// *****************************************************************************
// basics.tbl                                                         XL project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2012, Baptiste Soulisse <baptiste.soulisse@taodyne.com>
// (C) 2010-2011, Catherine Burvelle <catherine@taodyne.com>
// (C) 2009-2020, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2010-2013, Jérôme Forissier <jerome@taodyne.com>
// (C) 2010, Lionel Schaffhauser <lionel@taodyne.com>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************


// ============================================================================
//
//    Garbage collection initialization
//
// ============================================================================

INIT_GC;

INIT_ALLOCATOR(Tree);
INIT_ALLOCATOR(Natural);
INIT_ALLOCATOR(Real);
INIT_ALLOCATOR(Text);
INIT_ALLOCATOR(Name);
INIT_ALLOCATOR(Block);
INIT_ALLOCATOR(Prefix);
INIT_ALLOCATOR(Postfix);
INIT_ALLOCATOR(Infix);

INIT_ALLOCATOR(Context);
INIT_ALLOCATOR(Scope);
INIT_ALLOCATOR(Scopes);
INIT_ALLOCATOR(Rewrite);
INIT_ALLOCATOR(Rewrites);

INIT_ALLOCATOR(Types);
INIT_ALLOCATOR(RewriteCalls);
INIT_ALLOCATOR(RewriteCandidate);


// ============================================================================
//
//   Built-in names
//
// ============================================================================

NAME(nil);
NAME(self);
NAME(true);
NAME(false);
NAME(error);
NAME(matching);



// ============================================================================
//
//   Built-in types
//
// ============================================================================

TYPE(type, Tree, );

CONVERTIBLE_TYPE(boolean, Name,
                 if (Name *name = AsName())
                     if (name->value == "true" || name->value == "false")
                         return (boolean_p) name;
                 ,
                 operator bool()
                 {
                     return value == "true";
                 }
    );
TYPE(natural, Natural,
     if (Natural *ival = AsNatural())
         return (natural_p) ival;
    );
TYPE(real, Real,
     if (Real *rval = AsReal())
         return (real_r *) rval;
     if (Natural *ival = AsNatural())
         return (real_p) new Real(ival->value, ival->Position());
    );
TYPE(text, Text,
     if (Text *text = AsText())
         return (text_p) text;
    );
TYPE(character, Text,
     if (Text *tval = AsText())
         if (tval->IsCharacter())
             return (character_p) tval;
    );
TYPE(tree,      Tree, return (tree_p)  this);
TYPE(code,      Tree, return (code_p)  this);
TYPE(source,    Tree, return (source_p)  this);
TYPE(reference, Tree, return (reference_p)  this);
TYPE(value,     Tree, return (value_p) this);
TYPE(scope,     Scope, return (scope_p) this);
TYPE(symbol,  Name,
     if (Name *name = AsName())
         return (symbol_p) name;
    );
TYPE(name,    Name,
     if (Name *name = AsName())
         if (name->IsName())
             return (name_p) name;
    );
TYPE(operator,Name,
     if (Name *name = AsName())
         if (name->IsOperator())
             return (operator_p) name;
    );
TYPE(infix,Infix,
     if (Infix *infix = AsInfix())
         return (infix_p) infix;
    );
TYPE(declaration,Infix,
     if (Infix *infix = AsInfix())
         if (IsDeclaration(infix))
             return (declaration_p) infix;
    );
TYPE(prefix,Prefix,
     if (Prefix *prefix = AsPrefix())
         return (prefix_p) prefix;
    );
TYPE(postfix,Postfix,
     if (Postfix *postfix = AsPostfix())
         return (postfix_p) postfix;
    );
TYPE(block,Block,
     if (Block *block = AsBlock())
         return (block_p) block;
    );

TYPE(integer,natural,
     if (Natural *ival = AsNatural())
         return (integer_p) ival;
    );
TYPE(integer8,integer,
     if (Natural *ival = AsNatural())
         if ((longlong) ival->value >= -0x80 &&
             (longlong) ival->value  <  0x80)
             return (integer8_p) ival;
    );
TYPE(integer16,integer,
     if (Natural *ival = AsNatural())
         if ((longlong) ival->value >= -0x8000 &&
             (longlong) ival->value  <  0x8000)
             return (integer16_p) ival;
    );
TYPE(integer32,integer,
     if (Natural *ival = AsNatural())
         if ((longlong) ival->value >= -0x80000000 &&
             (longlong) ival->value  <  0x80000000)
             return (integer32_p) ival;
    );
TYPE(integer64,integer,
     if (Natural *ival = AsNatural())
         return (integer64_p) ival;
    );

TYPE(natural8,natural,
     if (Natural *ival = AsNatural())
         if (ival->value < 0x100)
             return (natural8_p) ival;
    );
TYPE(natural16,natural,
     if (Natural *ival = AsNatural())
         if (ival->value < 0x10000)
             return (natural16_p) ival;
    );
TYPE(natural32,natural,
     if (Natural *ival = AsNatural())
         if (ival->value < 0x100000000ULL)
             return (natural32_p) ival;
    );
TYPE(natural64,natural,
     if (Natural *ival = AsNatural())
         return (natural64_p) ival;
    );
TYPE(real16,real,
     if (Real *rval = AsReal())
         return (real16_p) rval;
    );
TYPE(real32,real,
     if (Real *rval = AsReal())
         return (real32_p) rval;
    );
TYPE(real64,real,
     if (Real *rval = AsReal())
         return (real64_p) rval;
    );



// ============================================================================
//
//   Basic operations
//
// ============================================================================

INFIX_SCOPE(Assign, tree, tree, ":=", value,
            RESULT(xl_assign(scope, &left, &right)));

INFIX(TextEQ, boolean, text, "=",  text, R_BOOL(LEFT == RIGHT));
INFIX(TextNE, boolean, text, "<>", text, R_BOOL(LEFT != RIGHT));
INFIX(TextLT, boolean, text, "<",  text, R_BOOL(LEFT <  RIGHT));
INFIX(TextGT, boolean, text, ">",  text, R_BOOL(LEFT >  RIGHT));
INFIX(TextLE, boolean, text, "<=", text, R_BOOL(LEFT <= RIGHT));
INFIX(TextGE, boolean, text, ">=", text, R_BOOL(LEFT >= RIGHT));

PREFIX_SCOPE(quote, tree, "quote", tree,RESULT(xl_parse_tree(scope,leftPtr)));
PREFIX_FN(parse, tree, text,            RESULT(xl_parse_text(left)));
PREFIX_FN(exit,  tree, natural,         exit(left); R_INT(0))

NAME_FN(Version, text, "xl_version",
        R_TEXT(XL::VERSION));
NAME_FN(CompatibleVersion, text, "xl_compatible_version",
        R_TEXT(XL::COMPATIBLE_VERSION));
