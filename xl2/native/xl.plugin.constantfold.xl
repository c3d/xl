// *****************************************************************************
// xl.plugin.constantfold.xl                                          XL project
// *****************************************************************************
//
// File description:
//
//     Simple constant folding, to be used after "differentiation"
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2004,2007,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PT = XL.PARSER.TREE
import BC = XL.BYTECODE
import ERR = XL.ERRORS
import XLT = XL.TRANSLATOR
import SYM = XL.SYMBOLS

module XL.PLUGIN.CONSTANTFOLD is

    changed : boolean := false

    translation ConstantFold
    // ------------------------------------------------------------------------
    //    Translate differentiation statements
    // ------------------------------------------------------------------------
    //    Adding a 'where <condition>' clause adds one thing being tested,
    //    so it adds one to the relative score of when clauses.
    //    So we use 'where true' to disambiguate otherwise equivalent clauses

        // Case where the constants are integers
        when ('X' + 0) then
            changed := true
            return ConstantFold(X)
        when (0 + 'X') where true then // Disambiguate
            changed := true
            return ConstantFold(X)
        when ('X' - 0) where true then // Disambiguate
            changed := true
            return ConstantFold(X)
        when (-'X' + 'Y') then
            changed := true
            return ConstantFold(parse_tree('Y'-'X'))
        when ('X' * 1) then
            changed := true
            return ConstantFold(X)
        when ('X' * -'Y') then
            changed := true
            return ConstantFold(parse_tree(-('X' * 'Y')))
        when (1 * 'X') where true then // Disambiguate
            changed := true
            return ConstantFold(X)
        when (-'X' * 'Y')  then
            changed := true
            return ConstantFold(parse_tree(-('X' * 'Y')))
        when ('X' * 0) then
            changed := true
            return parse_tree(0)
        when (0 * 'X') where true then // Disambiguate
            changed := true
            return parse_tree(0)
        when ('X' / 1) then
            changed := true
            return ConstantFold(X)
        when ('X' - 'X') then
            changed := true
            return parse_tree (0)
        when ('X' / 'X') then
            changed := true
            return parse_tree (1)
        when (('X')) then
            changed := true
            X := ConstantFold(X)
            return parse_tree ('X')
        when (-0) then
            changed := true
            return parse_tree (0)
        when (-1 * 'X') then
            changed := true
            return ConstantFold(parse_tree(-'X'))

        // Case where the constants are reals
        when ('X' + 0.0) then
            changed := true
            return ConstantFold(X)
        when (0.0 + 'X') where true then // Disambiguate
            changed := true
            return ConstantFold(X)
        when ('X' - 0.0) where true then // Disambiguate
            changed := true
            return ConstantFold(X)
        when ('X' * 1.0) then
            changed := true
            return ConstantFold(X)
        when (1.0 * 'X') where true then // Disambiguate
            changed := true
            return ConstantFold(X)
        when ('X' * 0.0) then
            changed := true
            return parse_tree(0.0)
        when (0.0 * 'X') where true then // Disambiguate
            changed := true
            return parse_tree(0.0)
        when ('X' / 1.0) then
            changed := true
            return ConstantFold(X)
        when (-0.0) then
            changed := true
            return parse_tree (0.0)
        when (-1.0 * 'X') then
            changed := true
            return ConstantFold(parse_tree(-'X'))

        // Catch-all clause
        when
            'Thing'
        then
            old_changed : boolean := changed
            changed := false
            result := XLT.Recurse(Thing, ConstantFold)
            if changed then
                result := ConstantFold(result)
            else
                changed := old_changed
