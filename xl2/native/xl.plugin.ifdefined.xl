// *****************************************************************************
// xl.plugin.ifdefined.xl                                             XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of ifdefined
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2008,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2004, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PT = XL.PARSER.TREE
import BC = XL.BYTECODE
import ERR = XL.ERRORS
import XLT = XL.TRANSLATOR
import SYM = XL.SYMBOLS
import PR = XL.PARSER
import PC = XL.PLUGIN.COMMON


module XL.PLUGIN.IFDEFINED is
// ----------------------------------------------------------------------------
//    Encapsulating module (not really necessary)
// ----------------------------------------------------------------------------

    translation IfDefined
    // ------------------------------------------------------------------------
    //    Translations below a 'IfDefined' pragma
    // ------------------------------------------------------------------------

        when
           'Anything'
        then
           pragma : PT.tree := SYM.GetProperty(XLT.context, "PRAGMA")

           translate pragma

              when
                 'PragmaName' 'Variable'
              where
                 Variable.kind = PT.xlName
              then
                 VariableName : Variable as PT.name_tree
                 IfDefined : boolean := PC.GetDefineInfo(VariableName.value) <> nil

                 if IfDefined then
                    return input
                 else
                    return nil

              when
                 'PragmaName' 'VariableAndAl'
              then

                 translate VariableAndAl

                    when
                       'Variable' 'Value'
                    where
                       Variable.kind = PT.xlName
                    then
                       VariableName : Variable as PT.name_tree
                       Pattern : PT.Tree := PC.GetDefineInfo(VariableName.value)

                       if Pattern = nil then
                          return nil

                       Args : PT.tree_map

                       if PT.Matches(Value, Pattern, Args) > 0 then
                          return input
                       else
                          return nil

                    else
                       ERR.Error "Pragma error : '$1'", pragma
                       ERR.Error "Syntax is : {IfDefined Variable Value}", pragma.position
                       return ERR.ErrorTree()

              else
                 ERR.Error "Pragma error : '$1'", pragma
                 ERR.Error "Syntax is : {IfDefined Variable [Value]}", pragma.position
                 return ERR.ErrorTree()

