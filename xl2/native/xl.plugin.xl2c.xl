// *****************************************************************************
// xl.plugin.xl2c.xl                                                  XL project
// *****************************************************************************
//
// File description:
//
//     Plug-in to do a simple transformation of C headers into XL
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2009,2015,2018-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PT = XL.PARSER.TREE
import PR = XL.PARSER
import XLT = XL.TRANSLATOR
import RD = XL.RENDERER
import SYM = XL.SYMBOLS
import ASCII = XL.TEXT_IO.ENCODING.ASCII


module XL.PLUGIN.XL2C is
// ----------------------------------------------------------------------------
//    Encapsulating module (not really necessary)
// ----------------------------------------------------------------------------

    function ConvertArgs(Args : PT.tree) return PT.tree


    function IntegerType (IsUnsigned : boolean;
                          IsShort : boolean;
                          LongCnt : integer) return PT.tree is
    // ------------------------------------------------------------------------
    //   Compute the name of the integer type
    // ------------------------------------------------------------------------
        if IsShort then
            if IsUnsigned then
                result := parse_tree(unsigned16)
            else
                result := parse_tree(integer16)
        else if LongCnt > 1 then
            if IsUnsigned then
                result := parse_tree(unsigned64)
            else
                result := parse_tree(integer64)
        else if LongCnt > 0 then
            if IsUnsigned then
                result := parse_tree(unsigned32)
            else
                result := parse_tree(integer32)
        else
            if IsUnsigned then
                result := parse_tree(unsigned)
            else
                result := parse_tree(integer)


    function Convert (input : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //    Convert the tree from pseudo C to pseudo XL
    // ------------------------------------------------------------------------
    //    We can't use 'translate' and 'translation' as much as usual, because
    //    the priorities set in C.syntax are different than usual for XL

        TyName     : PT.tree
        PtrCnt     : integer
        LongCnt    : integer
        IsShort    : boolean
        IsExtern   : boolean
        IsStatic   : boolean
        IsStruct   : boolean
        IsConst    : boolean
        IsUnsigned : boolean
        IsTypedef  : boolean
        FnArgs     : PT.tree
        FnPtrCnt   : integer
        IsMacro    : integer

        loop
            pre : input as PT.prefix_tree
            inf : input as PT.infix_tree
            blk : input as PT.block_tree
            namt: input as PT.name_tree
            intt: input as PT.integer_tree
            reat: input as PT.real_tree
            txtt: input as PT.text_tree

            if intt <> nil or reat <> nil or txtt <> nil then
                return input

            if inf <> nil and inf.name = ";" then
                inf.name := ASCII.CR

            if blk <> nil and blk.opening = "{" and blk.closing = "}" then
                blk.opening := PR.INDENT_MARKER
                blk.closing := PR.UNINDENT_MARKER

            if namt <> nil then
                // Strip pointers (convert void * to 'pointer to anything')
                if PtrCnt > 0 and TyName = nil then
                    TyName := parse_tree(anything)
                while PtrCnt > 0 loop
                    TyName := parse_tree(pointer to 'TyName')
                    PtrCnt -= 1
                if FnArgs <> nil then
                    if FnPtrCnt = 0 then
                        if TyName = nil then
                            return parse_tree
                                procedure 'namt' ('FnArgs') is C.'namt'
                        return parse_tree
                          function 'namt'('FnArgs') return 'TyName' is C.'namt'
                    if TyName = nil then
                        TyName := parse_tree(procedure('FnArgs'))
                    else
                        TyName := parse_tree(function('FnArgs') return 'TyName')
                    while FnPtrCnt > 1 loop
                        TyName := parse_tree(pointer to 'TyName')
                        FnPtrCnt -= 1
                    return parse_tree('namt' : 'TyName')
                else
                    // We get there only when the name is at end:
                    //   int X; int *X; typedef int X;
                    if TyName = nil then
                        TyName := IntegerType (IsUnsigned, IsShort, LongCnt)
                    if IsTypedef then
                        return parse_tree(type 'namt' is 'TyName')
                return parse_tree('namt' : 'TyName')

            if pre <> nil then

                // Check int x(int y); parsed as [int x] [(int y)]
                lpre : pre.left as PT.prefix_tree
                if lpre <> nil then
                    pre.left := lpre.left
                    pre.right := PT.NewPrefix(lpre.right,pre.right,pre.position)
                    restart

                // Check function declarations
                rblk : pre.right as PT.block_tree
                if rblk <> nil then
                    if rblk.opening = "(" and rblk.closing = ")" then
                        FnArgs := ConvertArgs(rblk.child)
                        input := pre.left
                        lblk : input as PT.block_tree
                        if lblk <> nil then
                            if lblk.opening = "(" and lblk.closing = ")" then
                                input := lblk.child
                        restart

                // Check 'static', 'extern', 'struct', and so on
                lname : pre.left as PT.name_tree
                if lname <> nil then
                    name : text := lname.value
                    if name = "#" then
                        IsMacro := 1
                        input := pre.right
                        restart
                    if IsMacro = 1 then
                        if name = "define" then
                            rpre : pre.right as PT.prefix_tree
                            rnam : pre.right as PT.name_tree
                            if rnam <> nil then
                                return parse_tree
                                    integer 'rnam' is 1
                            if rpre <> nil then
                                rl : PT.tree := rpre.left
                                rr : PT.tree := rpre.right
                                return parse_tree
                                    integer 'rl' is 'rr'
                    if IsMacro then
                        IsMacro := 0
                        restart
                    if name = "extern" then
                        IsExtern := true
                        input := pre.right
                        restart
                    if name = "static" then
                        IsStatic := true
                        input := pre.right
                        restart
                    if name = "short" then
                        IsShort := true
                        input := pre.right
                        restart
                    if name = "unsigned" then
                        IsUnsigned := true
                        input := pre.right
                        restart
                    if name = "long" then
                        LongCnt += 1
                        input := pre.right
                        restart
                    if name = "void" then
                        input := pre.right
                        restart
                    if name = "struct" then
                        IsStruct := true
                        input := pre.right
                        restart
                    if name = "typedef" then
                        IsTypedef := true
                        input := pre.right
                        restart
                    if name = "const" then
                        IsConst := true
                        input := pre.right
                        restart
                    if name = "char" then
                        if IsUnsigned then
                            TyName := parse_tree(unsigned8)
                        else
                            TyName := parse_tree(character)
                    if name = "int" then
                        TyName := IntegerType (IsUnsigned, IsShort, LongCnt)
                        input := pre.right
                        restart
                    if name = "float" then
                        TyName := parse_tree(real32)
                        input := pre.right
                        restart
                    if name = "double" then
                        TyName := parse_tree(real64)
                        input := pre.right
                        restart
                    if name = "*" then
                        if FnArgs <> nil then
                            FnPtrCnt += 1
                        else
                            PtrCnt += 1
                        input := pre.right
                        restart

                    // All other cases where we have a name on the left...
                    TyName := PT.NewName(name, input.position)
                    input := pre.right
                    restart

            // All other cases are dealt with using recursion
            return XLT.Recurse(input, Convert)


        ERR.Error "Don't know how to deal with $1", input


    function ConvertArgs(Args : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //    Convert an argument list
    // ------------------------------------------------------------------------
        translate Args
            when ('A1', 'A2') then
                A1 := ConvertArgs(A1)
                A2 := ConvertArgs(A2)
                return parse_tree ('A1';'A2')
            when (void) then
                return PT.NewName("", Args.position)

        return Convert(Args)


    procedure ConvertFunctionName (in out Name : PT.tree;
                                   in out RT   : PT.tree;
                                   in out IsPtr: boolean) is
    // ------------------------------------------------------------------------
    //    Extract function name and return type
    // ------------------------------------------------------------------------
        translate Name
            when (void 'X') then
                ConvertFunctionName X, RT, IsPtr
                Name := X

            when ((*'X')) then
                ConvertFunctionName X, RT, IsPtr
                if IsPtr then
                    ERR.Error "Cannot (yet) convert multiple pointers", X
                IsPtr := true
                Name := X

            when ('Ty' 'X') then
                RT := XLT.XL2C(Ty)
                Name := X
                ConvertFunctionName Name, RT, IsPtr


    function ConvertFunction(Name : PT.tree;
                             Args : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //   Convert a C function prototype
    // ------------------------------------------------------------------------
        ReturnType : PT.tree := nil
        IsPtr : boolean := false

        Args := ConvertArgs(Args)
        ConvertFunctionName Name, ReturnType, IsPtr

        if ReturnType = nil then
            if Name = nil then
                return parse_tree(procedure ('Args'))
            if IsPtr then
                return parse_tree('Name' : procedure ('Args'))
            return parse_tree(procedure 'Name' ('Args'))

        if Name = nil then
            return parse_tree(function ('Args') return 'ReturnType')
        if IsPtr then
            return parse_tree('Name' : function ('Args') return 'ReturnType')
        return parse_tree(function 'Name' ('Args') return 'ReturnType')


    translation XL2C
    // ------------------------------------------------------------------------
    //    Translation of simple C types into XL
    // ------------------------------------------------------------------------
        when ('Other') then
            return Convert(Other)
