// *****************************************************************************
// xl.math.complex.xl                                                 XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of a generic complex type
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2006,2008,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

module XL.MATH.COMPLEX is

    function Complex (re,im : complex.value) return complex written re + im i is
        result.re := re
        result.im := im

    function Complex (re : complex.value) return complex written re is
        result.re := re

    function Imaginary (im : complex.value) return complex written im i is
        result.im := im

    to Copy(out Target : complex; Source : complex) written Target := Source is
        Target.Re := Source.Re
        Target.Im := Source.Im

    function Add (X, Y : complex) return complex written X+Y is
        result.re := X.re + Y.re
        result.im := X.im + Y.im

    function Subtract (X, Y : complex) return complex written X-Y is
        result.re := X.re - Y.re
        result.im := X.im - Y.im

    function Multiply (X, Y : complex) return complex written X*Y is
        result.Re := X.Re * Y.Re - X.Im * Y.Im
        result.Im := X.Re * Y.Im + X.Im * Y.Re

    function Divide (X, Y : complex) return complex written X/Y is
        Denom : var := Y.Re * Y.Re + Y.Im * Y.Im
        result.Re := (X.Re * Y.Re + X.Im * Y.Im) / Denom
        result.Im := (X.Im * Y.Re - X.Re * Y.Im) / Denom

    // Optimized notations with a number and a complex
    function Copy(out Target : complex;
                  Source     : complex.value) written Target := Source is
        Target.re := Source

    function Multiply (X : complex;
                       Y : complex.value) return complex written X*Y written Y*X is
        result.Re := X.re * Y
        result.Im := X.Im * Y

    function Divide (X : complex;
                     Y : complex.value) return complex written X/Y is
        result.Re := X.Re / Y
        result.Im := X.Im / Y

