// *****************************************************************************
// compiler.xl                                                        XL project
// *****************************************************************************
//
// File description:
//
//     The main body of the XL compiler
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2003-2009,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2004, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import SC = XL.SCANNER
import CS = XL.UI.CONSOLE
import PT = XL.PARSER.TREE
import PR = XL.PARSER
import IO = XL.TEXT_IO
import XLT = XL.TRANSLATOR
import CG = XL.CODE_GENERATOR
import SYM = XL.SYMBOLS
import RD = XL.RENDERER
import ASCII = XL.TEXT_IO.ENCODING.ASCII
import ERR = XL.ERRORS
import MDL = XL.SEMANTICS.MODULES

// Things that we import just so that they get compiled
import CST = XL.CONSTANTS
import XL.SEMANTICS.TYPES
import XL.SEMANTICS.DECLARATIONS
import XL.SEMANTICS.TYPES.FUNCTIONS
import XL.SEMANTICS.TYPES.RECORDS
import XL.SEMANTICS.TYPES.ENUMERATIONS
import XL.SEMANTICS.TYPES.GENERICS
import XL.SEMANTICS.FUNCTIONS
import XL.SEMANTICS.ITERATORS
import XL.SEMANTICS.OVERLOAD
import XL.SEMANTICS.GENERICS
import XL.SEMANTICS.WRITTEN_FORMS
import XL.SEMANTICS.INSTRUCTIONS
import XL.SEMANTICS.PRAGMAS
import PPR = XL.SEMANTICS.MACROS

// Plugins
import XL.PLUGIN.DIFFERENTIATION
import XL.PLUGIN.CONSTANTFOLD
import XL.PLUGIN.LISTING
import XL.PLUGIN.JUNK
import XL.PLUGIN.TRANSFORMS
import XL.PLUGIN.INCLUDE
import XL.PLUGIN.DEFINE
import XL.PLUGIN.IFDEFINED
import XL.PLUGIN.IFP
import XL.PLUGIN.XL2C


procedure Main is
// ----------------------------------------------------------------------------
//   The main entry point
// ----------------------------------------------------------------------------
    I          : integer
    Max        : integer := size CS.arguments
    P          : PR.parser
    theProgram : PT.tree := nil
    compile    : boolean := true
    transcode  : boolean := true

    RD.DefaultRenderer := RD.Open(XLT.RuntimePath(XLT.style_file))
    CG.InitializeBytecodeMap()


    for I in 1..Max-1 loop
        name : text := CS.arguments[i]
        if name = "-show" then
            IO.WriteLn theProgram
        else if name[0] = '+' then
            plugin : text := name[1..length(name)-1]
            compile := false
            SYM.SetText XLT.context, "PHASE", "xlcommand"
            SYM.SetProperty XLT.context, "PRAGMA", PT.NewText(plugin, '"')
            theProgram := SYM.LookupRewrite(XLT.context, plugin, theProgram)
        else if name = "-style" or name = "-syntax" or name = "-bytecode" then
            if I + 1 <= Max - 1 then
               I += 1
               newfile : text := CS.arguments[I]
               if name = "-style" then
                   XLT.style_file := newfile + ".stylesheet"
               else if name = "-syntax" then
                   XLT.syntax_file := newfile + ".syntax"
               else if name = "-bytecode" then
                   XLT.bytecode_file := newfile + ".bytecode"
               RD.Close RD.DefaultRenderer
               RD.DefaultRenderer := RD.Open(XLT.RuntimePath(XLT.style_file),
                                             XLT.RuntimePath(XLT.syntax_file))
        else if name = "-parse" then
            compile := false
            transcode := false
        else if name = "-sem" then
            XLT.full_compile := true
            compile := false
            theProgram := MDL.AddBuiltins(theProgram)
            theProgram := XLT.ScopeSemantics(theProgram, XLT.scopeMain)
        else if name = "-opt" then
            compile := false
            theProgram := XLT.XLOptimizations(theProgram)
        else if name = "-bootstrap" then
            compile := false
            transcode := true
        else if name = "-xcode" then
            compile := false
            transcode := false
            CG.Transcode theProgram, IO.standard_output
        else if name = "-ccode" then
            compile := false
            transcode := false
            CG.Generate theProgram, IO.standard_output
        else if name = "-full" then
            compile := true
        else if name = "-I" then
            if I + 1 <= Max - 1 then
                I += 1
                MDL.AddPath CS.arguments[I]
                PPR.AddPath CS.arguments[I]
        else if name = "-r" then
            if I + 1 <= Max - 1 then
                I += 1
                XLT.ChangeRuntime CS.arguments[I]
        else if name = "-g" then
            CG.debug := true
        else if name = "-v" then
            XLT.verbose := true

        else
            P := PR.Open(name)
            theProgram := PR.Parse(P)
            if theProgram = nil then
                ERR.Error "File '$1' cannot be read", -1, name
            PR.Close P
            if compile and ERR.error_count = 0 then
                theProgram := MDL.AddBuiltins(theProgram)
                XLT.Compile theProgram
            else if transcode and ERR.error_count = 0 then
                CG.Transcode theProgram, IO.standard_output

    if ERR.error_count > 0 then
        exit 2


procedure Symbols(S : SYM.symbol_table; K: SYM.lookup_kind) is
// ------------------------------------------------------------------------
//   Dump a symbol table
// ------------------------------------------------------------------------
    if S = nil then
        S := XLT.context
    SYM.Debug S, K


procedure Symbols(S : SYM.symbol_table) is
// ------------------------------------------------------------------------
//   Dump a symbol table
// ------------------------------------------------------------------------
    Symbols S, SYM.lookupLocalOnly


procedure Symbols() is
// ------------------------------------------------------------------------
//   Dump a symbol table
// ------------------------------------------------------------------------
    Symbols nil
