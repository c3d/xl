// *****************************************************************************
// xl.plugin.ifp.xl                                                   XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of if
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2006,2008,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2004, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PT = XL.PARSER.TREE
import BC = XL.BYTECODE
import ERR = XL.ERRORS
import XLT = XL.TRANSLATOR
import SYM = XL.SYMBOLS
import PR = XL.PARSER
import PC = XL.PLUGIN.COMMON
import CST = XL.CONSTANTS

module XL.PLUGIN.IFP is
// ----------------------------------------------------------------------------
//    Encapsulating module (not really necessary)
// ----------------------------------------------------------------------------

    translation ifp
    // ------------------------------------------------------------------------
    //    Translations below a 'If' pragma
    // ------------------------------------------------------------------------

        when
           'Anything'
        then
           pragma : PT.tree := SYM.GetProperty(XLT.context, "PRAGMA")
           translate pragma

              when
                  'PragmaName' 'Variable'
              then
                  if CST.IsTrue (Variable) then
                      return input
                  else
                      return parse_tree(@nop)
              else
                 ERR.Error "Incorrect syntax '$1', use {ifp value}", pragma
                 return ERR.ErrorTree()

