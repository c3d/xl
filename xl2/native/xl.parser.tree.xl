// *****************************************************************************
// xl.parser.tree.xl                                                  XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of the parser tree specific functions
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2003-2006,2015,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2004, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PT = XL.PARSER.TREE
import IO = XL.TEXT_IO
import ASCII = XL.TEXT_IO.ENCODING.ASCII


module XL.PARSER.TREE is
// ----------------------------------------------------------------------------
//    Implementation of parse tree functions
// ----------------------------------------------------------------------------

    function XLNormalize (name : text) return text is
    // ------------------------------------------------------------------------
    //    Return the normalized name (lower-case, no underscores)
    // ------------------------------------------------------------------------
        result := ""
        Max : integer := length(name)
        I : integer
        for I in 0..Max-1 loop
            C : character := name[I]
            if C <> '_' then
                result += ASCII.tolower C


    function FindInfo(from : tree; name : text) return info is
    // ------------------------------------------------------------------------
    //   Find the associated info record, or return nil
    // ------------------------------------------------------------------------
        if count(from.info, name) > 0 then
            return from.info[name]
        return nil


    procedure SetInfo(from : tree; name : text; data : info) is
    // ------------------------------------------------------------------------
    //   Add given info to the info list for the tree
    // ------------------------------------------------------------------------
        if data <> nil then
            old : info := from.info[name];
            if old = data then
                // Already done
                return
            else if old <> nil then
                IO.WriteLn "Warning: Overwriting info for ", from, ":", name

            from.info[name] := data
            data.name := name


    procedure PurgeInfo(from : tree; name : text) is
    // ------------------------------------------------------------------------
    //  Find if there is an entry, if so purge it
    // ------------------------------------------------------------------------
        data : info := FindInfo(from, name)
        if data <> nil then
            delete data
            from.info[name] := nil


    procedure AttachTree(toTree : tree; key : text; attached : tree) is
    // ------------------------------------------------------------------------
    //   Attach another tree to 'toTree'
    // ------------------------------------------------------------------------
        data : tree_info
        data.name := key
        data.value := attached
        toTree.info[key] := data


    function Attached(toTree : tree; key : text) return tree is
    // ------------------------------------------------------------------------
    //    Return the attached tree if it exists
    // ------------------------------------------------------------------------
        if count(toTree.info, key) > 0 then
            data : toTree.info[key] as tree_info
            if data <> nil then
                return data.value
        return nil


    function Matches (test : tree;
                      ref : tree;
                      in out arg : tree_map) return integer is
    // ------------------------------------------------------------------------
    //   Check if the test tree matches the reference tree, return score
    // ------------------------------------------------------------------------

        trace [matches] "/* Matching: ", test, " */"
        trace [matches] "/* With: ", ref, " */"

        // Check if the reference is a wildcard like 'A'
        // If so, check if we saw the same name, and then check compatibility
        // If not, check
        if ref.kind = xlWILDCARD then
            R : ref as wildcard_tree

            // Did we see this name already?
            if count(arg, R.name) > 0 then
                empty_args : tree_map
                trace [matches] "/* Already found ", R.name, ", checking */"
                result := Matches(test, arg[R.name], empty_args)
                if result > 0 then
                    trace [matched] "/* Matched: ", test, " */"
                    trace [matched] "/* With: ", ref, " */"
                    trace [matched] "/* Score: ", result + 1, " (wildcard) */"
                    return result + 1
                trace [matches] "/* Failed wildcard */"
                return 0

            // We did not see the name: assign it
            arg[R.name] := test
            trace [matched] "/* Matched: ", test, " */"
            trace [matched] "/* With: ", ref, " */"
            trace [matched] "/* Score: 1 (wildcard, 1st time) */"
            return 1

        // If this is not a wildcard, then it must have the same kind
        if test.kind <> ref.kind then
            trace [matches] "/* Failed kind */"
            return 0

        // For each kind of atom, check and return 0 or 1
        if test.kind = xlNATURAL then
            T : test as integer_tree
            R : ref as integer_tree
            if T.value = R.value then
                trace [matched] "/* Matched: ", test, " */"
                trace [matched] "/* With: ", ref, " */"
                trace [matched] "/* Score: 2 (integer) */"
                return 2
            trace [matches] "/* Failed intval */"
            return 0

        if test.kind = xlREAL then
            T : test as real_tree
            R : ref as real_tree
            if T.value = R.value then
                trace [matched] "/* Matched: ", test, " */"
                trace [matched] "/* With: ", ref, " */"
                trace [matched] "/* Score: 2 (real) */"
                return 2
            trace [matches] "/* Failed realval */"
            return 0

        if test.kind = xlTEXT then
            T : test as text_tree
            R : ref as text_tree
            if T.value = R.value and T.quote = R.quote then
                trace [matched] "/* Matched: ", test, " */"
                trace [matched] "/* With: ", ref, " */"
                trace [matched] "/* Score: 2 (text) */"
                return 2
            trace [matches] "/* Failed textval */"
            return 0

        if test.kind = xlNAME then
            T : test as name_tree
            R : ref as name_tree
            if XLNormalize(T.value) = XLNormalize(R.value) then
                trace [matched] "/* Matched: ", test, " */"
                trace [matched] "/* With: ", ref, " */"
                trace [matched] "/* Score: 2 (name) */"
                return 2
            trace [matches] "/* Failed nameval */"
            return 0

        // For non-atoms, check recursively
        if test.kind = xlBLOCK then
            T : test as block_tree
            R : ref as block_tree
            if T.opening = R.opening and T.closing = R.closing then
                result := Matches(T.child, R.child, arg)
                if result > 0 then
                    trace [matched] "/* Matched: ", test, " */"
                    trace [matched] "/* With: ", ref, " */"
                    trace [matched] "/* Score: ", result+3, " (block) */"
                    return result + 3
            trace [matches] "/* Failed block */"
            trace [matches] "/* o=", T.opening = R.opening,
                            " c=", T.closing = R.closing, " */"
            trace [matches] "/* r=", result, " */"
            return 0

        if test.kind = xlPREFIX then
            T : test as prefix_tree
            R : ref as prefix_tree
            l_result : integer := Matches(T.left, R.left, arg)
            if l_result > 0 then
                r_result : integer := Matches(T.right, R.right, arg)
                if r_result > 0 then
                    trace [matched] "/* Matched: ", test, " */"
                    trace [matched] "/* With: ", ref, " */"
                    trace [matched] "/* Score: ", l_result+r_result+1,
                                    " (prefix) */"
                    return l_result + r_result + 1
            trace [matches] "/* Failed prefix */"
            return 0

        if test.kind = xlINFIX then
            T : test as infix_tree
            R : ref as infix_tree
            if T.name = R.name then
                l_result : integer := Matches(T.left, R.left, arg)
                if l_result > 0 then
                    r_result : integer := Matches(T.right, R.right, arg)
                    if r_result > 0 then
                        trace [matched] "/* Matched: ", test, " */"
                        trace [matched] "/* With: ", ref, " */"
                        trace [matched] "/* Score: ", l_result+r_result+2,
                                        " (infix) */"
                        return l_result + r_result + 2
                    else
                        trace [matches] "/* Failed left */"
                else
                    trace [matches] "/* Failed left */"
            trace [matches] "/* Failed infix */"
            return 0

        trace [matches] "/* Matching: ", test, " */"
        trace [matches] "/* With: ", ref, " */"


    function Matches (test : tree;
                      ref : tree) return boolean is
    // ------------------------------------------------------------------------
    //    Check if two trees match
    // ------------------------------------------------------------------------
        unused : tree_map
        return Matches(test, ref, unused) > 0


    function LargestMatch (test : tree;
                           ref_list : tree_list;
                           in out arg : tree_map) return integer is
    // ------------------------------------------------------------------------
    //    Finds the largest tree that matches from the list
    // ------------------------------------------------------------------------

        largest_score : integer := 0
        score         : integer := 0
        index         : integer := 0
        ref           : tree

        result := -2 // Not found
        for ref in ref_list loop
            args_for_ref  : tree_map
            score := Matches(test, ref, args_for_ref)
            if score > largest_score then
                result := index
                arg := args_for_ref
                largest_score := score
            else if score > 0 and score = largest_score then
                result := -1 // Ambiguous
            index += 1
        return result


    function Clone (original : tree) return tree is
    // ------------------------------------------------------------------------
    //   Create a deep clone of the tree
    // ------------------------------------------------------------------------

        if original = nil then
            return original
        if original.kind = xlNATURAL then
            it : original as integer_tree
            return NewNatural(it.value, it.position)
        if original.kind = xlREAL then
            rt : original as real_tree
            return NewReal (rt.value, rt.position)
        if original.kind = xlTEXT then
            tt : original as text_tree
            return NewText (tt.value, tt.quote, tt.position)
        if original.kind = xlNAME then
            nt : original as name_tree
            return NewName(nt.value, nt.position)
        if original.kind = xlBLOCK then
            bt : original as block_tree
            return NewBlock(Clone(bt.child),
                            bt.opening, bt.closing, bt.position)
        if original.kind = xlPREFIX then
            xt : original as prefix_tree
            return NewPrefix (Clone(xt.left), Clone(xt.right), xt.position)
        if original.kind = xlINFIX then
            it : original as infix_tree
            return NewInfix (it.name,
                             Clone(it.left), Clone(it.right), it.position)
        if original.kind = xlWILDCARD then
            wt : original as wildcard_tree
            return NewWildcard(wt.name, wt.position)

        assert original = nil
