// *****************************************************************************
// xl.semantics.pragmas.xl                                            XL project
// *****************************************************************************
//
// File description:
//
//     Handles the pragma notation: {pragma}
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2004,2006-2007,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2004, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PT = XL.PARSER.TREE
import XLT = XL.TRANSLATOR
import SYM = XL.SYMBOLS


module XL.SEMANTICS.PRAGMAS is


    function PragmaName (pragma : PT.tree) return PT.name_tree is
    // ------------------------------------------------------------------------
    //    Return the name of a pragma
    // ------------------------------------------------------------------------
        if pragma.kind = PT.xlNAME then
            name : pragma as PT.name_tree
            return name
        else if pragma.kind = PT.xlINFIX then
            infix : pragma as PT.infix_tree
            return PragmaName(infix.left)
        else if pragma.kind = PT.xlPREFIX then
            prefix : pragma as PT.prefix_tree
            return PragmaName(prefix.left)
        else
            ERR.Error "Invalid syntax for pragma", pragma
            return PT.NewName("error")


    function ProcessPragma(phase : text;
                           pragma : PT.tree;
                           input : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //    Process an individual pragma
    // ------------------------------------------------------------------------
        SYM.SetText XLT.context, "PHASE", phase
        SYM.SetProperty XLT.context, "PRAGMA", pragma
        p_name : PT.name_tree := PragmaName(pragma)
        name : text := PT.XLNormalize(p_name.value)
        if SYM.GetInteger(XLT.context, name + ".pragma", 0, true) <> 1 then
            ERR.Error "The pragma {$1} is not implemented", p_name
        result := SYM.LookupRewrite(XLT.context, name, input)
        trace[pragmas] "Pragma " + name + ".", phase,
                       "(", input, ")=(", result, ")"
        final : PT.tree := PT.Attached(result, "PRAGMA_RESULT")
        if final <> nil then
            result := final
        else
            result := SYM.LookupRewrite(XLT.context, phase, result)


    translation XLDeclarations
    // ------------------------------------------------------------------------
    //    Processing pragmas at declaration time
    // ------------------------------------------------------------------------
        when
            { 'Pragma' } 'Node'
        then
            result := ProcessPragma("xldeclarations", Pragma, Node)
        when
            { 'Pragma' }
            'Node'
        then
            result := ProcessPragma("xldeclarations", Pragma, Node)


    translation XLSemantics
    // ------------------------------------------------------------------------
    //    Processing pragmas at semantics time
    // ------------------------------------------------------------------------
        when
            { 'Pragma' } 'Node'
        then
            result := ProcessPragma("xlsemantics", Pragma, Node)
        when
            { 'Pragma' }
            'Node'
        then
            result := ProcessPragma("xlsemantics", Pragma, Node)


    translation XLOptimizations
    // ------------------------------------------------------------------------
    //    Processing pragmas at declaration time
    // ------------------------------------------------------------------------
        when
            { 'Pragma' } 'Node'
        then
            result := ProcessPragma("xloptimizations", Pragma, Node)
        when
            { 'Pragma' }
            'Node'
        then
            result := ProcessPragma("xloptimizations", Pragma, Node)
