// *****************************************************************************
// xl.renderer.xl                                                     XL project
// *****************************************************************************
//
// File description:
//
//     Renders an XL tree to (configurable) text form
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2004-2007,2009,2015,2018-2020, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2004, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PR = XL.PARSER
import PT = XL.PARSER.TREE
import IO = XL.TEXT_IO
import SC = XL.SCANNER
import ERR = XL.ERRORS
import ASCII = XL.TEXT_IO.ENCODING.ASCII
import XLT = XL.TRANSLATOR


module XL.RENDERER is
// ----------------------------------------------------------------------------
//    Implementation of the rendering of parse trees
// ----------------------------------------------------------------------------

    procedure RenderFormat(output : renderer; format : PT.tree)
    procedure RenderOne(output : renderer; what : PT.tree)


    procedure ReadSyntaxFile (R : renderer; syntax : text) is
    // ------------------------------------------------------------------------
    //   Read the xl.syntax file to get precedences
    // ------------------------------------------------------------------------
    //   This is really a shameless copy of the same function in XL.PARSER

        type state is enumeration
            inUnknown, inInfix, inPrefix, inPostfix,
            inComment, inCommentDef,
            inText, inTextDef,
            inBlock, inBlockDef

        txt      : text
        entry    : text
        tok      : SC.token
        priority : integer    := 0
        S        : SC.scanner := SC.Open(syntax)
        stxst    : state      := inUnknown

        loop
            tok := SC.NextToken(S)
            exit if tok = SC.tokEOF

            if tok = SC.tokNATURAL then
                priority := S.integer_value

            else if (tok = SC.tokNAME or tok = SC.tokSYMBOL or
                     tok = SC.tokTEXT) then
                txt := S.string_value
                if txt = "NEWLINE" then
                    txt := ASCII.CR
                else if txt = "INDENT" then
                    txt := PR.INDENT_MARKER
                else if txt = "UNINDENT" then
                    txt := PR.UNINDENT_MARKER

                if txt = "INFIX" then
                    stxst := inInfix
                else if txt = "PREFIX" then
                    stxst := inPrefix
                else if txt = "POSTFIX" then
                    stxst := inPostfix
                else if txt = "BLOCK" then
                    stxst := inBlock
                else if txt = "COMMENT" then
                    stxst := inComment
                else if txt = "TEXT" then
                    stxst := inText
                else if txt = "STATEMENT" then
                    R.statement_priority := priority
                else if txt = "FUNCTION" then
                    R.function_priority := priority
                else if txt = "DEFAULT" then
                    R.default_priority := priority
                else if stxst = inPrefix then
                    R.prefix_priority[txt] := priority
                else if stxst = inPostfix then
                    R.postfix_priority[txt] := priority
                else if stxst = inInfix then
                    R.infix_priority[txt] := priority
                else if stxst = inComment then
                    entry := txt
                    stxst := inCommentDef
                else if stxst = inCommentDef then
                    stxst := inComment
                else if stxst = inText then
                    entry := txt
                    stxst := inTextDef
                else if stxst = inTextDef then
                    stxst := inText
                else if stxst = inBlock then
                    entry := txt
                    stxst := inBlockDef
                    R.infix_priority[entry] := priority
                else if stxst = inBlockDef then
                    stxst := inBlock

        SC.Close S


    procedure EnterFormats (formats : PT.tree; R : renderer) is
    // ------------------------------------------------------------------------
    //    Enter the formats in the format table
    // ------------------------------------------------------------------------
        translate formats
            when
                'A'
                'B'
            then
                EnterFormats A, R
                EnterFormats B, R

            when
                'A' = 'B'
            then
                if A.kind = PT.xlNAME then
                    NA : A as PT.name_tree
                    N  : text := NA.value
                    if N = "cr" then
                        N := ASCII.CR
                    else if N = "tab" then
                        N := ASCII.TAB
                    else if NA.value = "space" then
                        N := " "
                    else if N = "indent" then
                        N := PR.INDENT_MARKER
                    else if N = "unindent" then
                        N := PR.UNINDENT_MARKER
                    else
                        N += " "
                    R.formats[N] := B
                else if A.kind = PT.xlTEXT then
                    NA : A as PT.text_tree
                    N  : text := NA.value
                    R.formats[N] := B
                else
                    ERR.Error "Format '$1' is not a name or a text", A
                    return
            else
                ERR.Error "Unknown format directive '$1'", formats


    procedure ReadRenderingFile (R : renderer; format : text) is
    // ------------------------------------------------------------------------
    //   Read the xl.stylesheet file to get precedences
    // ------------------------------------------------------------------------

        txt      : text
        P        : PR.Parser
        formats  : PT.tree

        P := PR.Open(format, XLT.RuntimePath("xl.syntax"))
        formats := PR.Parse(P)
        PR.Close P

        // A few default names
        R.formats[PR.INDENT_MARKER] := parse_tree(indent)
        R.formats[PR.UNINDENT_MARKER] := parse_tree(unindent)
        if formats <> nil then
            EnterFormats formats, R


    function Open(format : text; syntax : text) return renderer is
    // ------------------------------------------------------------------------
    //    Create a renderer with the default output stream
    // ------------------------------------------------------------------------
        result.output := IO.standard_output
        if format = "" then
            format := XLT.RuntimePath("xl.stylesheet")
        if syntax = "" then
            syntax := XLT.RuntimePath(XLT.syntax_file)
        ReadSyntaxFile result, syntax
        ReadRenderingFile result, format


    procedure Close(toClose : renderer) is
    // ------------------------------------------------------------------------
    //    Close a stream
    // ------------------------------------------------------------------------
        // Nothing to do?
        delete toClose
        toClose := nil


    procedure RenderTo(output : renderer; stream : IO.output_file) is
    // ------------------------------------------------------------------------
    //    Render to a specific output stream
    // ------------------------------------------------------------------------
        output.output := stream


    procedure RenderText(output : renderer; format : text) is
    // ------------------------------------------------------------------------
    //    Render a text, reformatting characters as needed
    // ------------------------------------------------------------------------
        C               : character
        need_separator  : boolean := output.need_separator
        quoted          : boolean := false
        formatLength    : integer := length format
        I               : integer
        for I in 0..formatLength-1 loop
            C := format[I]
            if need_separator then
                if not output.had_space and not ASCII.is_space(C) then
                    if output.had_punctuation = ASCII.is_punctuation(C) then
                        S : text := " "
                        if count(output.formats, S) > 0 then
                            RenderFormat output, output.formats[S]
                        else
                            IO.Write ' '
                need_separator := false
            T : text := ""
            T += C
            quoted := I > 0 and I < formatLength-1 and T = output.current_quote
            if quoted then
                T += " quoted"
            if count(output.formats, T) > 0 then
                RenderFormat output, output.formats[T]
            else if not quoted then
                IO.Write C
            else
                IO.Write C, C
            output.had_space := ASCII.is_space(C)
            output.had_punctuation := ASCII.is_punctuation(C)
        output.need_separator := need_separator


    procedure RenderFormat(output : renderer; format : PT.tree) is
    // ------------------------------------------------------------------------
    //   Render a format
    // ------------------------------------------------------------------------
        if format.kind = PT.xlTEXT then
            F : format as PT.text_tree
            if F.quote = '"' then
                IO.Write F.value    // Write as is, no formatting
            else
                RenderText output, F.value
        else if format.kind = PT.xlNAME then
            F : format as PT.name_tree
            N : text := F.value + " "
            if N = "cr " then
                N := ASCII.CR
            if N = "indent " then
                output.indent += 1
            else if N = "unindent " then
                output.indent -= 1
            else if N = "indents " then
                I  : integer
                K0 : text := "indents "
                if count (output.formats, K0) > 0 then
                    fmt : PT.tree := output.formats[K0]
                    for I in 1..output.indent loop
                        RenderFormat output, fmt
                else
                    for I in 1..output.indent loop
                        RenderText output, " "
            else if N = "self " then
                RenderText output, output.self
            else if N = "left " or N = "child " then
                RenderOne output, output.left
            else if N = "right " then
                RenderOne output, output.right
            else if N = "opening " then
                B : output.right as PT.block_tree
                RenderText output, B.opening
            else if N = "closing " then
                B : output.right as PT.block_tree
                RenderText output, B.closing
            else if N = "space " then
                if not output.had_space then
                    RenderText output, " "
            else if N = "separator " then
                output.need_separator := true
            else if N = "newline " then
                IO.Write ASCII.CR
                output.had_space := true
            else if count(output.formats, N) > 0 then
                RenderFormat output, output.formats[N]
            else
                ERR.Error "Undeclared format directive '$1'", format
        else if format.kind = PT.xlPREFIX then
            F : format as PT.prefix_tree
            RenderFormat output, F.left
            RenderFormat output, F.right
        else
            ERR.Error "Unknown kind of format directive '$1'", format


    procedure RenderFormat(output         : renderer;
                           self           : text;
                           format         : text) is
    // ------------------------------------------------------------------------
    //    Render format if it exists, otherwise text as is
    // ------------------------------------------------------------------------
        output.self := self
        if count(output.formats, format) > 0 then
            RenderFormat output, output.formats[format]
        else
            RenderText output, self


    procedure RenderFormat(output         : renderer;
                           self           : text;
                           format         : text;
                           generic_format : text) is
    // ------------------------------------------------------------------------
    //    Render format if it exists, otherwise text as is
    // ------------------------------------------------------------------------
        output.self := self
        if count(output.formats, format) > 0 then
            RenderFormat output, output.formats[format]
        else if count(output.formats, generic_format) > 0 then
            RenderFormat output, output.formats[generic_format]
        else
            RenderText output, self


    procedure RenderFormat(output         : renderer;
                           self           : text;
                           format         : text;
                           generic_format : text;
                           generic_format2: text) is
    // ------------------------------------------------------------------------
    //    Render format if it exists, otherwise text as is
    // ------------------------------------------------------------------------
        output.self := self
        if count(output.formats, format) > 0 then
            RenderFormat output, output.formats[format]
        else if count(output.formats, generic_format) > 0 then
            RenderFormat output, output.formats[generic_format]
        else if count(output.formats, generic_format2) > 0 then
            RenderFormat output, output.formats[generic_format2]
        else
            RenderText output, self


    function ImplicitBlock(T : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //   Return an implicit block
    // ------------------------------------------------------------------------
        return PT.NewBlock(T, " (", ") ", T.position)


    function IsAmbiguousPrefix (test_tree : PT.tree;
                                output    : renderer;
                                testL     : boolean;
                                testR     : boolean) return boolean is
    // ------------------------------------------------------------------------
    //   Return true if tree might be seen as infix when it is prefix
    // ------------------------------------------------------------------------
        if test_tree.kind = PT.xlPREFIX then
            T : test_tree as PT.prefix_tree
            L : PT.tree := T.left
            R : PT.tree := T.right
            if testL and L.kind = PT.xlNAME then
                N   : L as PT.name_tree
                sym : text := PT.XLNormalize(N.value)
                if count(output.infix_priority, sym) > 0 then
                    return true
            if testR and R.kind = PT.xlNAME then
                N   : R as PT.name_tree
                sym : text := PT.XLNormalize(N.value)
                if count(output.infix_priority, sym) > 0 then
                    return true
        return false


    function IsSubFunctionInfix (test_tree : PT.tree;
                                 output    : renderer) return boolean is
    // ------------------------------------------------------------------------
    //   Return true if tree is an infix with priority below function
    // ------------------------------------------------------------------------
        if test_tree.kind = PT.xlINFIX then
            T   : test_tree as PT.infix_tree
            sym : text := PT.XLNormalize(T.name)
            if count(output.infix_priority, sym) <= 0 then
                return true
            else if output.infix_priority[sym] < output.function_priority then
               return true
        return false


    function InfixPriority (test_tree  : PT.tree;
                            output     : renderer) return integer is
    // ------------------------------------------------------------------------
    //   Return infix priority for infix tree, infinity otherwise
    // ------------------------------------------------------------------------
        if test_tree.kind = PT.xlINFIX then
            T   : test_tree as PT.infix_tree
            sym : text := PT.XLNormalize(T.name)
            if count(output.infix_priority, sym) > 0 then
                return output.infix_priority[sym]
        return 9999


    procedure RenderOne(output : renderer; what : PT.tree) is
    // ------------------------------------------------------------------------
    //   Render to given stream
    // ------------------------------------------------------------------------
    //   The real complication here is to figure out when to emit
    //   implicit parentheses (which we do for blocks). We need that as some
    //   plug-ins may generate trees which would not be generable from
    //   the parser directly. For instance, you need to write
    //   exp (2*X), but it is possible to generate
    //   prefix(name("exp"), infix("*", integer(2), name("X")))
    //   which is the same thing without the parentheses.
    //   We insert the implicit parentheses here (creating blocks on the fly)
    //   They are bracketed between [ and ] in the examples below
    //
    //   The cases where we need that are:
    //   - When an infix child is an infix with a lower priority
    //     (strictly lower/lower-or-equal depending on associativity)
    //     Example: "A * [B + C]" or "A + [B + C]" or "[A else B] else C"
    //   - When an infix or prefix has a prefix child with a tail that is
    //     itself a valid infix symbol (it would be parsed as infix)
    //     Example: "A * [A *]" or "[A and] + B" or "not [A and]"
    //   - When an prefix child has a child which is an infix with a priority
    //     below "function_priority". Example: "exp [A + B] " (but not "A.B C")
    //   - When a prefix tail is a prefix with a left that is itself a
    //     valid infix. Example: "A [+ B]"

        old_self : text := output.self
        old_left : PT.tree := output.left
        old_right : PT.tree := output.right
        old_priority : integer := output.priority


        if what = nil then
            RenderFormat output, "?null?", "?null?", "error "
        else if what.kind = PT.xlNATURAL then
            W : what as PT.integer_tree
            T : text := text(W.value)
            RenderFormat output, T, T, "integer "
        else if what.kind = PT.xlREAL then
            W : what as PT.real_tree
            T : text := text(W.value)
            RenderFormat output, T, T, "real "
        else if what.kind = PT.xlTEXT then
            W : what as PT.text_tree
            T : text := text(W.value)
            Q0: text := "text "
            Q : text := Q0 + W.quote
            saveQuote : text := output.current_quote
            output.current_quote := W.quote
            if count(output.formats, Q) > 0 then
                output.self := T
                RenderFormat output, output.formats[Q]
            else if count (output.formats, Q0) > 0 then
                output.self := T
                RenderFormat output, output.formats[Q0]
            else
                T := W.quote + T + W.quote
                RenderText output, T
            output.current_quote := saveQuote
        else if what.kind = PT.xlNAME then
            W : what as PT.name_tree
            RenderFormat output, W.value, W.value, "name "
        else if what.kind = PT.xlPREFIX then
            W : what as PT.prefix_tree
            L : PT.tree := W.left
            R : PT.tree := W.right

            // Create blocks for implicit parentheses
            if (IsAmbiguousPrefix(L, output, false, true) or
                IsSubFunctionInfix(L, output)) then
                L := ImplicitBlock(L)
            if output.priority > output.statement_priority then
                if (IsAmbiguousPrefix(R, output, true, true) or
                    IsSubFunctionInfix(R, output)) then
                    R := ImplicitBlock(R)

            output.left := L
            output.right := R
            N0: text := "prefix "
            if L.kind = PT.xlNAME then
                left : L as PT.name_tree
                N : text := N0 + left.value
                if count (output.formats, N) > 0 then
                    RenderFormat output, output.formats[N]
                else if count(output.formats, N0) > 0 then
                    RenderFormat output, output.formats[N0]
                else
                    RenderOne output, W.left
                    RenderOne output, W.right
            else if count(output.formats, N0) > 0 then
                RenderFormat output, output.formats[N0]
            else
                RenderOne output, W.left
                RenderOne output, W.right
        else if what.kind = PT.xlINFIX then
            W  : what as PT.infix_tree
            N0 : text := "infix "
            N  : text := N0 + W.name
            L  : PT.tree := W.left
            R  : PT.tree := W.right

            // Create blocks for implicit parentheses, dealing with assoc.
            P0 : integer := InfixPriority(W, output)
            PL : integer := InfixPriority(L, output)
            PR : integer := InfixPriority(R, output)
            LA : boolean := (P0 & 1) = 0    // Left assoc
            RA : boolean := (P0 & 1) = 1    // Right assoc
            if (PL < P0 or (PL = P0 and RA) or
                IsAmbiguousPrefix(L, output, false, true)) then
                L := ImplicitBlock(L)
            if (PR < P0 or (PR = P0 and LA) or
                IsAmbiguousPrefix(R, output, false, true)) then
                R := ImplicitBlock(R)

            output.priority := P0
            output.left := L
            output.right := R
            output.self := W.name
            if count (output.formats, N) > 0 then
                RenderFormat output, output.formats[N]
            else if count(output.formats, N0) > 0 then
                RenderFormat output, output.formats[N0]
            else
                RenderOne output, W.left
                RenderFormat output, W.name, W.name
                RenderOne output, W.right
        else if what.kind = PT.xlBLOCK then
            W : what as PT.block_tree
            N0 : text := "block "
            N  : text := N0 + W.opening + " " + W.closing
            L : PT.tree := W.child
            output.left := L
            output.right := W
            output.self := W.opening + W.closing
            if count (output.formats, N) > 0 then
                RenderFormat output, output.formats[N]
            else if count(output.formats, N0) > 0 then
                RenderFormat output, output.formats[N0]
            else
                RenderFormat output, W.opening, W.opening, "opening "
                RenderOne output, W.child
                RenderFormat output, W.closing, W.closing, "closing "
        else if what.kind = PT.xlWILDCARD then
            W : what as PT.wildcard_tree
            RenderFormat output, W.name, "?wildcard?", "error "
        else
            IO.Write "/* ERROR: Rendering kind ", what.kind, " */ "
            RenderFormat output, "?unknown?", "?unknown?", "error "

        output.self := old_self
        output.left := old_left
        output.right := old_right
        output.priority := old_priority


    procedure Render(output : renderer; what : PT.tree) is
    // ------------------------------------------------------------------------
    //   Render the tree to given output
    // ------------------------------------------------------------------------
        old : IO.output_file := IO.standard_output
        if output then
            IO.standard_output := output.output
        output.indent := 0
        output.had_space := true
        output.had_punctuation := false
        output.need_separator := false
        output.priority := 0
        RenderFormat output, "", "begin "
        RenderOne output, what
        RenderFormat output, "", "end "
        IO.standard_output := old




// ============================================================================
//
//    I/O customization
//
// ============================================================================

module XL.TEXT_IO with
// ----------------------------------------------------------------------------
//   Implements an extension of the TEXT_IO module for parse trees
// ----------------------------------------------------------------------------

    procedure write(what : PT.tree) is
    // ------------------------------------------------------------------------
    //    For debugging purpose, write a tree using default renderer
    // ------------------------------------------------------------------------
        R : XL.RENDERER.renderer := XL.RENDERER.DefaultRenderer
        old : IO.output_file := R.output
        R.output := IO.standard_output
        XL.RENDERER.Render R, what
        R.output := old


procedure Debug (tree : PT.tree) is
// ----------------------------------------------------------------------------
//    This function is here to be invoked from the debugoger
// ----------------------------------------------------------------------------
    old : IO.output_file := IO.standard_output
    IO.standard_output := IO.standard_error
    IO.writeln tree
    IO.standard_output := old
