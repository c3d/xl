// *****************************************************************************
// xl.scanner.position.xl                                             XL project
// *****************************************************************************
//
// File description:
//
//     Information about scanner positions
//
//     Positions are recorded as number of characters since the beginning
//     of a compilation. As new files are being read, this modules keep track
//     of what file correspond to which character range
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2003-2004,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import IO = XL.TEXT_IO
import ASCII = XL.TEXT_IO.ENCODING.ASCII


module XL.SCANNER.POSITION is
// ----------------------------------------------------------------------------
//   Implementation of scanner position information
// ----------------------------------------------------------------------------

    // A range of position corresponding to one file
    type position_range is record with
        start   : integer
        file    : text

    // A list of ranges
    type position_list is string of position_range

    // The global list of ranges
    positions           : position_list
    current_position    : integer


    procedure Reset is
    // ------------------------------------------------------------------------
    // Reset the module (new compilation)
    // ------------------------------------------------------------------------
        clear positions
        current_position := 0


    function OpenFile (name : text) return integer is
    // ------------------------------------------------------------------------
    //    Return the new position for a file
    // ------------------------------------------------------------------------
        R : position_range
        R.start := current_position
        R.file := name
        positions += R
        return current_position


    procedure CloseFile (pos : integer) is
    // ------------------------------------------------------------------------
    //   Remember the end position for a file
    // ------------------------------------------------------------------------
        current_position := pos


    procedure PositionToFile (pos : integer;
                              out file : text;
                              out offset : integer) is
    // ------------------------------------------------------------------------
    //    Convert a position to a file and offset
    // ------------------------------------------------------------------------
        I   : integer
        Max : integer := size (positions)
        for I in 0..Max-1 loop
            P : position_range := positions[I]
            exit if pos < P.start
        if I > 0 then
            P : position_range := positions[I-1]
            file := P.file
            offset := pos - P.start
        else
            file := ""
            offset := pos


    procedure PositionToLine (pos : integer;
                              out filename : text;
                              out fileline : integer;
                              out filecolumn : integer;
                              out file_linetext : text) is
    // ------------------------------------------------------------------------
    //   Compute file, line and position
    // ------------------------------------------------------------------------
        offset  : integer := 0
        line    : integer := 1
        column  : integer := 0
        linetext: text := ""
        file    : IO.file
        ch      : character

        PositionToFile pos, filename, offset
        if filename <> "" then
            file := IO.open(filename)

            // Count lines and characters
            while IO.valid (file) loop
                IO.Read file, ch
                if ASCII.is_line_break(ch) then
                    line += 1
                    column := 0
                    linetext := ""
                else
                    column += 1
                    linetext += ch
                offset -= 1
                exit if offset <= 1

            // Read rest of line
            while IO.valid (file) loop
                IO.Read file, ch
                exit if ASCII.is_line_break(ch)
                linetext += ch

            IO.close file
            fileline := line
            filecolumn := column
            file_linetext := linetext
        else
            fileline := 0
            filecolumn := 0
            file_linetext := ""
