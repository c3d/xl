// *****************************************************************************
// allocate_memory.xl                                                 XL project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2008,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
use XL.POINTER
use XL.POINTER.HEAP
use XL.UI.CONSOLE

type list
type list_ptr is pointer to list

type list is record with
   next  : list_ptr
   value : integer

to PrintList(ptr : list_ptr) is
    Write "List: "
    while ptr <> nil loop
        Write ptr.value, ", "
        ptr := ptr.next
    WriteLn "EOL"

L : list_ptr

WriteLn "Building list"
for I in 1..12 loop
    new : list_ptr := Allocate(40U + unsigned(I)) // Should be enough
    new.next := L
    L := new
    new.value := I
    PrintList L

WriteLn "Expanding list"
for I in 2..7 loop
    new : list_ptr := Allocate(Byte_size(*L)) // Should be enough
    new.next := L
    L := new
    new.value := I
    PrintList L

WriteLn "Expanding list more"
for I in 4..8 loop
    L := new(list(L, 3-I))
    PrintList L

WriteLn "For reference, byte size=", Byte_Size(*L), " bit size=", Bit_Size(*L)

WriteLn "Destroying list"
P : list_ptr := L
while L <> nil loop
    PrintList L
    P := L.next
    Free L
    L := P

