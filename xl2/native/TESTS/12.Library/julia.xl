// *****************************************************************************
// julia.xl                                                           XL project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2006,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
use XL.MATH.COMPLEX
use XL.UI.CONSOLE

function Square(Z : complex) return complex written Z^2 is
    return Z*Z
function Square(X : real) return real written X^2 is
    return X*X

function IsBounded(Z : complex; Bound : real) return boolean is
    return Z.Re^2 + Z.Im^2 < Bound^2

function Depth(Z0, Mu : complex;
               Bound  : real := 1.0E8;
               Max    : integer := 30) return integer is
    Z : complex := Z0
    result := 0
    while result < Max and IsBounded(Z, Bound) loop
        result += 1
        Z := Z^2 - Mu

to Draw_Julia_Set(XLo, XHi, YLo, YHi : real;
                  Mu : complex;
                  NX, NY : integer) is
    StepX : real := (XHi - XLo) / real(NX)
    StepY : real := (YHi - YLo) / real(NY)
    X, Y  : real

    for Y in YLo..YHi step StepY loop
        for X in XLo..XHi step StepX loop
            D : integer := Depth(complex(X, Y), Mu)
            case
               D >= 30:    Write " "
               D > 20:     Write "."
               D > 15:     Write "+"
               D > 10:     Write "*"
               D > 5:      Write "@"
               true:       Write "#"
        WriteLn

Draw_Julia_Set (-1.8, 1.8, -1.8, 1.8, complex(0.75), 79, 50)

