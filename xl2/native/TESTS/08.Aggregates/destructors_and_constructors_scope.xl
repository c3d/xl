// *****************************************************************************
// destructors_and_constructors_scope.xl                              XL project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2006,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
use XL.UI.C_on_SOLE

Counter : integer := 777
function Integer () return integer is
   Counter += 1
   WriteLn "Constructed ", Counter
   return Counter

to Delete (Value : integer) is
   WriteLn "Destroyed ", Value

function F(in InVar : integer;
           out OutVar : integer;
           in out InOutVar : integer) return integer is
    WriteLn "On entry:"
    WriteLn " InVar=", InVar
    WriteLn " OutVar=", OutVar
    WriteLn " InOutVar=", InOutVar
    WriteLn " Result=", Result

    OutVar *= 2
    InOutVar *= 3

    WriteLn "On exit:"
    WriteLn " InVar=", InVar
    WriteLn " OutVar=", OutVar
    WriteLn " InOutVar=", InOutVar
    WriteLn " Result=", Result

Global, General, Universal : integer

WriteLn "Global variables:"
WriteLn " Global=", Global
WriteLn " General=", Gener_Al
WriteLn " Universal=", UniVERSAL
WriteLn "F=", F(Global, General, UniverSAL)
WriteLn "Global variables after call to F:"
WriteLn " Global=", Global
WriteLn " General=", Gener_Al
WriteLn " Universal=", UniVERSAL
