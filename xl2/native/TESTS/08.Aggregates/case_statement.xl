// *****************************************************************************
// case_statement.xl                                                  XL project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2006,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
// This tests the simple case statement

use XL.UI.CONSOLE

for I in 1..10 loop
    case
       I = 3 : WriteLn "I=3: I=", I
       I < 5 : WriteLn "I<5: I=", I
       I = 8 :
           Write "I=8: I=", I
           WriteLn " (somewhat of a special case)"
       I > 4 : WriteLn "I>4: I=", I
       I = 9 :
           WriteLn "I would be surprised if this ever comes up..."

// Check compile-time optimizations
case
   1 = 0: We do not care if it does not compile, since it is false
   1 = 1: WriteLn "This case is always taken"
   3 = 3: This case does not need to compile either, because it is never taken


// Check the index case
function Index(Val : integer; Ref : integer; ...) return integer is
    if Val = Ref then
        return 0
    return 1 + Index(Val, ...)
function Index(Val : integer) return integer is
    return 1

for I in 1..10 loop
    case I
        0 : WriteLn "Zero"
        2 : WriteLn "Two"
        4 :
            WriteLn "Four"
            WriteLn " (of a kind)"
        5 : WriteLn "Five"
        8 : WriteLn "Eight"
        9 : WriteLn "Nine"
        default: WriteLn "I forgot..."


