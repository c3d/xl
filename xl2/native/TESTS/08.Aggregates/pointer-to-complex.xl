// *****************************************************************************
// pointer-to-complex.xl                                              XL project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2007,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
use XL.POINTER
use XL.POINTER.ADDRESS
use XL.MATH.COMPLEX
use XL.UI.CONSOLE


Ptr : pointer to integer
Val : integer := 5

Ptr := &Val
WriteLn "Five=", *Ptr, "=", Val

Val := 6
WriteLn "Five=", *Ptr, "=", Val

*Ptr := 7
WriteLn "Five=", *Ptr, "=", Val

C : variable := complex(3,5)
PC : pointer to complex[integer] := &C

WriteLn "C=(", C.re, ";", C.im, ")"
WriteLn "PC=(", PC.re, ";", PC.im, ")"

Copy PC.re, 2
WriteLn "C=(", C.re, ";", C.im, ")"
WriteLn "PC=(", PC.re, ";", PC.im, ")"

PC.re := 6
WriteLn "C=(", C.re, ";", C.im, ")"
WriteLn "PC=(", PC.re, ";", PC.im, ")"
