// *****************************************************************************
// for_loops.xl                                                       XL project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2006-2007,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
// This tests the behavior of for loops

use XL.UI.CONSOLE

iterator IntegerIterator(var It : integer;
                         Low, High : integer) written It in Low..High is
    It := Low
    while It <= High loop
        yield
        It := It + 1


for I in 1..5 loop
    for J in 1..I loop
        WriteLn "I=", I, " and J=", J

// Define a more complex iterator with local state
iterator Accumulator(var It : integer;
                     Low, High : integer) written It=[Low..High] is
    Sum : integer := 0
    It := Low
    WriteLn "Entering For loop, It=", It
    while It <= High loop
        WriteLn "Entering body, It=", It
        yield
        Sum := Sum + It
        WriteLn "End of body, It=", It
        It := It + 1
    WriteLn "Exited for loop, It=", It, " Sum=", Sum
    WriteLn "Bye Bye!"

for I=[30..50] loop
    Writeln "TeaForTwo I=", I


// Define a two-variable iterator
iterator MatrixIterator (
    var I : integer; LI, HI : integer;
    var J : integer; LJ, HJ : integer) written I,J in [LI..HI, LJ..HJ] is
    I := LI
    while I <= HI loop
        J := LJ
        while J <= HJ loop
            yield
            J := J + 1
        I := I + 1

for A, B in [3..5, 7..9] loop
    WriteLn "A=", A, " and B=", B
