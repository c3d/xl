// *****************************************************************************
// differentiation_cmd_line.xl                                        XL project
// *****************************************************************************
//
// File description:
//
//     Test the differentiation and constantfold plugins from command line
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2003-2004,2007,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

// CMD=%x -parse %f +differentiation +constantfold -show

import IO = XL.TEXT_IO

function sin(X : real) return real
to Copy(Target : real; Source : real) return real written Target := Source

procedure Main is
    W, T0, T : real

    B : real := -A + B
    {differentiation} A : real := d/dx(exp(-2*x))
    A2 : real :=  d/dx(exp(2*x)) + d/dx(exp(2*x))
    Y : real := d/dT(exp(-2*W*(T-T0)) * sin(2*W*(T-T0)))
    Z : real := {constantfold} sin(X) - sin(1*X)
    IO.WriteLn Y

procedure zNort is
    U := A + B + C * D * E
