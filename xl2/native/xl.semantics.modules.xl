// *****************************************************************************
// xl.semantics.modules.xl                                            XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of XL modules
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2005-2008,2015,2018-2020, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2005, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PR = XL.PARSER
import PT = XL.PARSER.TREE
import SYM = XL.SYMBOLS
import ASCII = XL.TEXT_IO.ENCODING.ASCII
import XLT = XL.TRANSLATOR
import BC = XL.BYTECODE
import ERR = XL.ERRORS
import TY = XL.SEMANTICS.TYPES
import REC = XL.SEMANTICS.TYPES.RECORDS
import DCL = XL.SEMANTICS.DECLARATIONS
import FL = XL.FILES


module XL.SEMANTICS.MODULES is
// ----------------------------------------------------------------------------
//    Parse modules and import statements
// ----------------------------------------------------------------------------

    initially
    // ------------------------------------------------------------------------
    //    Start with a '.' path
    // ------------------------------------------------------------------------
        modules_path += text "."
        modules_path += XLT.RuntimePath(".")
        modules_path += text "library"


    procedure AddPath (path : text) is
    // ------------------------------------------------------------------------
    //   Add a path to the path list
    // ------------------------------------------------------------------------
        new_path : string of text
        new_path += path
        new_path += modules_path
        modules_path := new_path


    procedure ReplacePath(oldPath : text; newPath : text) is
    // ------------------------------------------------------------------------
    //    Remove the given path if among the module paths
    // ------------------------------------------------------------------------
        new_paths : string of text
        path      : text
        for path in modules_path loop
            if path = oldPath then
                new_paths += newPath
            else
                new_paths += path
        modules_path := new_paths


    function GetSymbols (Value : PT.tree) return SYM.symbol_table is
    // ------------------------------------------------------------------------
    //    Find the symbols associated with a given entity
    // ------------------------------------------------------------------------
        ValueType       : TY.any_type := TY.GetType(Value)
        ValueCodeType   : ValueType as TY.code_type
        ValueRecType    : ValueType as REC.record_type
        trace[modules] "Value ", Value
        if ValueRecType <> nil then
            trace[modules] "  record symbols ", ValueRecType.symbols
            return ValueRecType.symbols
        if ValueCodeType <> nil then
            trace[modules] "  code symbols ", ValueCodeType.symbols
            return ValueCodeType.symbols
        trace[modules] "  no symbols"
        return nil


    procedure AutoExport (modDecl : DCL.declaration) is
    // ------------------------------------------------------------------------
    //   Automatically create export type for 'module X is Y'
    // ------------------------------------------------------------------------
    //   In that case, we have no declaration list, no record type, so we
    //   build one and attach it to the declaration

        trace[modules] "Autoexport (", PT.tree(modDecl.name), ")"

        Name : modDecl.name as PT.name_tree
        if Name = nil then
            ERR.Error "Module name '$1' is invalid", modDecl.name
            return

        if modDecl.initializer = nil then
            ERR.Error "Module '$1' has no implementation", modDecl.name
            return

        tp  : TY.any_type := TY.GetType(modDecl.initializer)
        ctp : tp as TY.code_type
        if ctp = nil then
            ERR.Error "Module '$1' has an invalid initializer", modDecl.name
            if tp <> nil then
                ERR.Error "Its type is '$1'", TY.Source(tp)
            return

        syms    : SYM.symbol_table := ctp.symbols
        defs    : PT.tree_list
        def     : PT.tree
        decls   : DCL.declarations
        decl    : DCL.declaration
        nm      : text := Name.value
        SYM.LocalSymbols syms, defs
        trace [modules] "Auto Found ", size(defs),
                        " for ", nm, " in code ", syms
        for def in defs loop
            decl := DCL.GetDeclaration (def)
            if decl <> nil then
                dtype : TY.any_type := decl.type
                decls += decl
                trace[modules] "AutoExport ", PT.tree(decl.name),
                               " in code ", syms
                trace[modules] " type ", TY.Source(dtype),
                               " mname ", PT.tree(dtype.machine_name)

        // Create a record type
        recType : PT.tree := REC.EnterType (Name, TY.module_type, nil)
        rtp     : TY.GetDefinedType(recType) as REC.record_type
        if rtp = nil then
            ERR.Error "Internal: autoexport of '$1', no record type", Name
        else
            recSyms : SYM.symbol_table := rtp.symbols
            rtp.fields := decls
            Name := PT.NewName (Name.value, Name.position)
            TY.SetType Name, rtp
            TY.SetType rtp.machine_name, rtp
            TY.SetType modDecl.machine_name, rtp
            modDecl.type := rtp
            modDecl.name := Name
            SYM.CopySymbols recSyms, syms
            trace[modules] "AutoExport ", PT.tree(Name),
                           " as ", PT.tree(modDecl.machine_name),
                           " type ", PT.tree(rtp.machine_name)


    procedure ReconcileOne (nm           : text;
                            kind         : text;
                            symbols      : SYM.symbol_table;
                            enclosing    : SYM.symbol_table;
                            in out decls : DCL.declarations;
                            in_body      : boolean) is
    // ------------------------------------------------------------------------
    //   Reconcile one kind of symbol
    // ------------------------------------------------------------------------
        defs    : PT.tree_list
        def     : PT.tree
        decl    : DCL.declaration
        dtype   : TY.any_type
        SYM.Lookup symbols, kind, nm, defs,SYM.lookupLocalOnly
        trace [modules] "Found ", size(defs), " for ", nm, " in ", symbols
        for def in defs loop
            decl := DCL.GetDeclaration (def)
            if decl <> nil then
                decls += decl
                dtype := decl.type
                // If we have a body-only module, like module X is Y,
                // use the type of the implementation instead of 'module'
                if in_body then
                    if TY.IsModuleType(dtype) then
                        AutoExport decl
                        dtype := decl.type
                trace[modules] "Enter ", PT.tree(decl.name), " in ", enclosing
                trace[modules] " type ", TY.Source(dtype),
                               " mname ", PT.tree(dtype.machine_name)
                SYM.Enter enclosing, kind, nm, def


    function Reconcile (Iface   : PT.tree;
                        Body    : PT.tree;
                        BaseName: PT.tree;
                        Name    : PT.name_tree;
                        Cached  : boolean) return BC.bytecode is
    // ------------------------------------------------------------------------
    //   Reconcile the header and body of a function
    // ------------------------------------------------------------------------

        // Find the enclosing symbol table
        enclosing : SYM.symbol_table := XLT.global_context
        iface_sym : SYM.symbol_table
        body_sym  : SYM.symbol_table

        if BaseName <> nil then
            Base : PT.tree := XLT.XLSemantics(BaseName)
            syms : SYM.symbol_table := GetSymbols(Base)
            if syms <> nil then
                trace[modules] "Base symbols ", syms
                enclosing := syms
            else
                ERR.Error "Did not find symbols in '$1'", BaseName
                ERR.Error "Its type is '$1'", TY.Source(TY.GetType(Base))
        trace[modules] "Module symbols ", enclosing, " for ", Iface

        // Get the symbols from the results, which should have code types
        if Iface <> nil then
            iface_sym := GetSymbols(Iface)
            if iface_sym = nil then
                ERR.Error "No symbols in interface '$1'", Iface
                Iface := nil
        if Body <> nil then
            body_sym := GetSymbols(Body)
            if body_sym = nil then
                ERR.Error "No symbols in body '$1'", Body
                Body := nil

        // Try to find the declarations in the interface
        // There may be more than one matching, e.g. overloaded functions
        // We add them to the enclosing scope
        nm      : text := Name.value
        decls   : DCL.declarations
        if Iface <> nil then
            ReconcileOne nm, "DECL", iface_sym, enclosing, decls, false
            ReconcileOne nm, "FN", iface_sym, enclosing, decls, false
            ReconcileOne nm, "TYPE", iface_sym, enclosing, decls, false

            if Body <> nil and not Cached then
                if DCL.MatchInterface(decls, body_sym) = false then
                    ERR.Error "The body and interface of '$1' don't match", Name

        else if Body <> nil then
            ReconcileOne nm, "DECL", body_sym, enclosing, decls, true
            ReconcileOne nm, "FN", body_sym, enclosing, decls, true
            ReconcileOne nm, "TYPE", body_sym, enclosing, decls, true

        if size(decls) = 0 then
            ERR.Error "No imported declaration found for '$1'", Name

        result := XLT.Append(Iface, Body)


    function FindModule (Iface   : PT.tree;
                         BaseName: PT.tree;
                         Name    : PT.name_tree) return PT.tree is
    // ------------------------------------------------------------------------
    //   If we are declaring a module, find its declaration in iface
    // ------------------------------------------------------------------------

        // Find the enclosing symbol table
        enclosing     : SYM.symbol_table := XLT.global_context
        iface_symbols : SYM.symbol_table

        if BaseName <> nil then
            Base : PT.tree := XLT.XLSemantics(BaseName)
            syms : SYM.symbol_table := GetSymbols(Base)
            if syms <> nil then
                trace[modules] "FindModule base symbols ", syms
                enclosing := syms
            else
                ERR.Error "Did not find symbols in '$1'", BaseName
                ERR.Error "Its type is '$1'", TY.Source(TY.GetType(Base))
        trace[modules] "FindModule symbols ", enclosing, " for ", Iface

        // Get the symbols from the results, which should have code types
        iface_symbols := GetSymbols(Iface)
        if iface_symbols = nil then
            ERR.Error "No symbols in interface '$1'", Iface
            return nil

        // Try to find the declarations in the interface
        // There may be more than one matching, e.g. overloaded functions
        // We add them to the enclosing scope
        nm      : text := Name.value
        decls   : DCL.declarations
        defs    : PT.tree_list
        decl    : DCL.declaration
        dtype   : TY.any_type
        SYM.Lookup iface_symbols, "DECL", nm, defs, SYM.lookupLocalOnly
        trace [modules] "Found ", size(defs), " for ", nm," in ",iface_symbols
        if size(defs) <> 1 then
            return nil
        decl := DCL.GetDeclaration (defs[0])
        if decl <> nil then
            dtype := decl.type
            // If we have a body-only module, like module X is Y,
            // use the type of the implementation instead of 'module'
            if TY.IsModuleType(dtype) then
                return nil
            return decl.name
        return nil


    function IsValidImport (LongName : PT.tree) return boolean is
    // ------------------------------------------------------------------------
    //    Check that the input long name looks valid
    // ------------------------------------------------------------------------
        if LongName.kind = PT.xlNAME then
            return true
        if LongName.kind = PT.xlINFIX then
            LN : LongName as PT.infix_tree
            if LN.name = "." then
                return IsValidImport(LN.left) and IsValidImport(LN.right)
        return false


    function DottedName (LongName : PT.tree) return text is
    // ------------------------------------------------------------------------
    //    Return a string like 'X.Y.Z' for the corresponding tree
    // ------------------------------------------------------------------------
        if LongName.kind = PT.xlNAME then
            LN : LongName as PT.name_tree
            return LN.value
        if LongName.kind = PT.xlINFIX then
            LN : LongName as PT.infix_tree
            if LN.name = "." then
                return DottedName(LN.left) + "." + DottedName(LN.right)
        return "<error>"


    function WantToEvaluate(Value : PT.tree) return BC.bytecode is
    // ------------------------------------------------------------------------
    //   Try to evaluate the argument, return nil if it failed
    // ------------------------------------------------------------------------
        symbols : SYM.symbol_table := XLT.context
        symname : text

        trace[modules] "Eval (", Value, ") in ", symbols
        if Value.kind = PT.xlNAME then
            Name : Value as PT.name_tree
            symname := Name.value
        else
            translate Value
                when ('Record'.'Field') where (REC.IsRecord(Record) and
                                               Field.kind = PT.xlNAME) then
                    Name : Field as PT.name_tree
                    symname := Name.value
                    symbols := nil
                    Record := WantToEvaluate(Record)
                    trace[modules] "Record (", Value, ") is ", Record
                    if Record <> nil then
                        symbols := GetSymbols(Record)
                        trace[modules] "Record symbols ", symbols
                    if symbols = nil then
                        return nil
                else
                    return nil

        list : PT.tree_list
        Lookup symbols, "TYPE", symname, list, SYM.lookupLocalOnly
        Lookup symbols, "FN", symname, list, SYM.lookupLocalOnly
        Lookup symbols, "DECL", symname, list, SYM.lookupLocalOnly
        trace[modules] "For ", Value, " name ", symname, " found ", size(list)
        if size(list) > 0 then
            rdecl : DCL.declaration := DCL.GetDeclaration(list[0])
            rtype : TY.any_type := rdecl.type
            trace [modules] "Eval=", list[0],
                            " type ", TY.Source(rtype),
                            " mname ", PT.tree(rtype.machine_name)
            return list[0]
        return nil


    function TryToEvaluate(Value : PT.tree) return BC.bytecode is
    // ------------------------------------------------------------------------
    //    Evaluate, expecting failure
    // ------------------------------------------------------------------------
        ERR.PushErrorContext()
        result := WantToEvaluate(Value)
        ERR.PopErrorContext()


    function InXlBuiltinsModule() return boolean is
    // ------------------------------------------------------------------------
    //    Detect if we are in the XL_BUILTINS module
    // ------------------------------------------------------------------------
        return SYM.GetInteger(XLT.main_context, "MOD:xlbuiltins") = 2


    function AddBuiltins(Input : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //    Add the builtin module
    // ------------------------------------------------------------------------
        result := Input
        if not InXlBuiltinsModule() then
            result := parse_tree
                use XL_BUILTINS
                'result'


    function ImportModule (LongName     : PT.tree;
                           ShortName    : PT.tree) return BC.bytecode is
    // ------------------------------------------------------------------------
    //   Internal function to process an 'import' statement
    // ------------------------------------------------------------------------

        // Split X.Y.Z into components, and import X.Y if necessary
        LeafName : PT.name_tree
        Base     : PT.tree
        BaseName : PT.tree
        Alias    : ShortName as PT.name_tree

        FileName : text := PT.XLNormalize(DottedName(LongName))
        trace[modules] "Looking for ", FileName, " symbols ", XLT.context

        // Load enclosing import if needed
        if LongName.kind = PT.xlNAME then
            LeafName := PT.name_tree(LongName)
        else
            translate LongName
                when ('BaseImport'.'Enclosed') then
                    Base := ImportModule (BaseImport, nil)
                    BaseName := BaseImport
                    if Enclosed.kind <> PT.xlNAME then
                        ERR.Error "'$1' is not a valid module name", Enclosed
                        return ERR.ErrorTree()
                    LeafName := PT.name_tree(Enclosed)
                else
                    ERR.Error "'$1' is not a valid import name", LongName

        // Check if we already imported the desired module
        KeyI : text := "MODI:" + FileName
        OldI : PT.tree := SYM.GetProperty(XLT.main_context, KeyI, false)
        KeyB : text := "MODB:" + FileName
        OldB : PT.tree := SYM.GetProperty(XLT.main_context, KeyB, false)

        // Parse the interface and implementation files
        if OldI = nil and OldB = nil then
            DirName : text
            Pass    : integer := 0
            FileExt : text := ".xs"
            Iface   : PT.tree := nil
            Body    : PT.tree := nil
            KeyR    : text := "MOD:" + FileName

            // Detect recursive imports
            if SYM.GetInteger(XLT.main_context, KeyR, 0, false) then
                ERR.Error "Circular dependency detected when importing '$1'",
                          LongName
                return ERR.ErrorTree()
            SYM.SetInteger(XLT.main_context, KeyR, 2)

            // Load interface and body files
            for Pass in 1..2 loop
                Parsed  : PT.tree := nil
                Found   : boolean := false
                for DirName in modules_path loop
                    NormalizedName : text := FileName + FileExt
                    NameInDir : text
                    Directory : string of text := FL.Directory(DirName)
                    for NameInDir in Directory loop
                        if PT.XLNormalize(NameInDir) = NormalizedName then
                            // TODO: Machine dependency here
                            FullName : text := DirName + "/" + NameInDir
                            trace[modules] "Trying ", FullName
                            P : PR.parser := PR.Open (FullName)
                            if PR.IsValid (P) then
                                Parsed := PR.Parse(P)
                                if Parsed <> nil then
                                    trace[modules] "Parsed file ", FullName
                                    Found := true
                            PR.Close(P)
                        exit if Found
                    exit if found

                if Pass = 1 then
                    Iface := Parsed
                else
                    Body := Parsed

                FileExt := ".xl"

            // Check if we found nothing
            if Iface = nil and Body = nil then
                ERR.Error "No file found for module '$1'", LongName
                return ERR.ErrorTree()

            // Run semantics on interface and body, and cache for next import
            if Iface <> nil then
                Iface := AddBuiltins(Iface)
                Iface := XLT.ScopeSemantics(Iface, XLT.scopeModule, BaseName)
                SYM.SetProperty XLT.main_context, KeyI, Iface
            if Body <> nil then
                Body := AddBuiltins (Body)
                if Iface <> nil then
                    PT.AttachTree Body, "MODIFACE",
                                  FindModule(Iface, BaseName, LeafName)
                Body := XLT.ScopeSemantics(Body, XLT.scopeModule, BaseName)
                SYM.SetProperty XLT.main_context, KeyB, Body

            // After semantics, reconcile them
            result := Reconcile (Iface, Body, BaseName, LeafName, false)
            result := XLT.Append(Base, result)

            SYM.SetInteger(XLT.main_context, KeyR, 1)

        else
            // We use the cached ones and enter them locally
            result := Reconcile (OldI, OldB, BaseName, LeafName, true)

        // Make sure we actually defined what we were here for
        existing : PT.tree := WantToEvaluate(LongName)
        if existing = nil then
            ERR.Error "Imported file did not define '$1'", LongName
        else if Alias <> nil then
            if not REC.IsRecord(existing) then
                ERR.Error "Defining an alias '$1' for non-record module", Alias
            else
                SYM.Enter XLT.context, "DECL", Alias.value, existing




    function ProcessImport (LongName     : PT.tree;
                            ShortName    : PT.tree) return BC.bytecode is
    // ------------------------------------------------------------------------
    //    Process an 'import' statement
    // ------------------------------------------------------------------------

        trace[modules] "Importing ", LongName, " as ", ShortName

        // Check that the input is valid
        if not IsValidImport(LongName) then
            ERR.Error "The form '$1' is not a valid import name", LongName
            return ERR.ErrorTree()
        if ShortName <> nil and ShortName.kind <> PT.xlNAME then
            ERR.Error "The form '$1' is not a valid import shortcut", ShortName
            ShortName := nil // Try to import anyway

        // Check if there was already something declared in current scope
        existing : PT.tree := TryToEvaluate(LongName)
        if existing <> nil then
            ERR.Error "The import name '$1' already exists", LongName
            ERR.Error "It was defined as '$1'", existing
            return existing
        if ShortName <> nil then
            existing := TryToEvaluate(ShortName)
            if existing <> nil then
                ERR.Error "The import shortcut '$1' already exists", ShortName
                ERR.Error "It was defined as '$1'", existing
                ShortName := nil

        // Import the module
        result := ImportModule (LongName, ShortName)


    translation XLDeclarations
    // ------------------------------------------------------------------------
    //   Declaration of modules
    // ------------------------------------------------------------------------
    //   They are tagged with REPROCESSMACROS so that we will reprocess
    //   the following node through the preprocessor

         when
             import 'ShortName' = 'LongName'
         then
             result := ProcessImport (LongName, ShortName)
             PT.AttachTree(result, "REPROCESSMACROS", result)

         when
             import 'LongName'
         then
             result := ProcessImport (LongName, nil)
             PT.AttachTree(result, "REPROCESSMACROS", result)

         when
             use 'LongName'
         then
             result := ProcessImport (LongName, nil)
             result := XLT.Append(result, REC.EnterUsing(LongName))
             PT.AttachTree(result, "REPROCESSMACROS", result)
