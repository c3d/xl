// *****************************************************************************
// xl.plugin.differentiation.xl                                       XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of symbolic differentiation
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2004,2007-2008,2010,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PT = XL.PARSER.TREE
import BC = XL.BYTECODE
import ERR = XL.ERRORS
import XLT = XL.TRANSLATOR
import SYM = XL.SYMBOLS

module XL.PLUGIN.DIFFERENTIATION is

    function Differentiate (expr : PT.tree;
                            dv   : text) return PT.tree is
    // ------------------------------------------------------------------------
    //   Compute differentiated tree from actual expression and dv name
    // ------------------------------------------------------------------------

        translate expr

            when ('K') where K.kind = PT.xlNATURAL or K.kind = PT.xlREAL then
                return parse_tree(0.0)

            when ('X') where X.kind = PT.xlNAME then
                Xname : X as PT.name_tree
                if Xname.value = dv then
                    return parse_tree(1.0)
                else
                    return parse_tree(0.0)

            when (('X')) then
                X := Differentiate (X, dv)
                return parse_tree(('X'))

            when (-'X') then
                X := Differentiate (X, dv)
                return parse_tree(-'X')

            when (+'X') then
                X := Differentiate (X, dv)
                return parse_tree(+'X')

            when ('X' + 'Y') then
                X := Differentiate(X, dv)
                Y := Differentiate(Y, dv)
                return parse_tree('X' + 'Y')

            when ('X' - 'Y') then
                X := Differentiate(X, dv)
                Y := Differentiate(Y, dv)
                return parse_tree('X' - 'Y')

            when ('X' * 'Y') then
                dX : PT.tree := Differentiate(X, dv)
                dY : PT.tree := Differentiate(Y, dv)
                return parse_tree('dX' * 'Y' + 'X' * 'dY')

            when ('X' / 'Y') then
                dX : PT.tree := Differentiate(X, dv)
                dY : PT.tree := Differentiate(Y, dv)
                return parse_tree(('dX' * 'Y' - 'X' * 'dY') / ('Y' ^ 2))

            when ('X' ^ 'N') then
                dX : PT.tree := Differentiate(X, dv)
                return parse_tree('N' * 'dX' * ('X' ^ ('N' - 1)))

            when (exp 'X') then
                dX : PT.tree := Differentiate(X, dv)
                return parse_tree('dX' * exp('X'))
            when (log 'X') then
                dX : PT.tree := Differentiate(X, dv)
                return parse_tree('dX' / 'X')
            when (sqrt 'X') then
                dX : PT.tree := Differentiate(X, dv)
                return parse_tree(-'dX' / (2.0 * sqrt('X')))
            when (sin 'X') then
                dX : PT.tree := Differentiate(X, dv)
                return parse_tree('dX' * cos('X'))
            when (cos 'X') then
                dX : PT.tree := Differentiate(X, dv)
                return parse_tree(-'dX' * sin('X'))
            when (tan 'X') then
                dX : PT.tree := Differentiate(X, dv)
                return parse_tree('dX' / (cos('X') ^ 2))

            when (MATH.'F'('X')) then
                // Consider math.sin same as sin
                return Differentiate(parse_tree('F'('X')), dv)

            else
                ERR.Error "Unknown form '$1' for differentiation", expr
                return ERR.ErrorTree()


    function Differentiate (dFn : PT.tree;
                            dExpr : PT.tree;
                            dVar : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //   Extract components for differentiation
    // ------------------------------------------------------------------------

        fnName  : dFn as PT.name_tree
        varName : dVar as PT.name_tree

        // Find variable against which we derive
        dv : text := varName.value
        if (dv[0]) <> 'd' then
            ERR.Error "Invalid differential variable name '$1'", dVar
            return ERR.ErrorTree()
        dv := dv[1..length(dv)-1]

        // Find function name without the initial 'd'
        fn : text := fnName.value
        if fn[0] <> 'd' then
            ERR.Error "Invalid differential function name '$1'", dFn
            return ERR.ErrorTree()
        fn := fn[1..length(fn)-1]

        if fn = "" then
            // Case of d(X+1)/dX for instance
            return Differentiate (dExpr, dv)
        else
            // Other cases: extract function name
            fnName.value := fn
            return Differentiate (parse_tree('fnName'('dExpr')), dv)


    function IsDName(dX : PT.tree; minLen : integer := 2) return boolean is
    // ------------------------------------------------------------------------
    //   Check if this is a valid differential name (dX, dY, dA, etc)
    // ------------------------------------------------------------------------
        if dX.kind = PT.xlNAME then
            nameTree : dX as PT.name_tree
            name : text := nameTree.value
            if length(name) >= minLen and (name[0]) = 'd' then
                return true
        return false


    translation Differentiation
    // ------------------------------------------------------------------------
    //    Translate differentiation statements
    // ------------------------------------------------------------------------

        when
            'dFn' / 'dVar' ('dExpr')
        where
            (dFn.kind = PT.xlNAME and dVar.kind = PT.xlNAME and
             IsDName(dFn, 1) and IsDName(dVar))
        then
            // General case
            return Differentiate (dFn, dExpr, dVar)

        when
            'dFn' / 'dVar'
        where
            (dFn.kind = PT.xlNAME and dVar.kind = PT.xlNAME and
             IsDName(dFn) and IsDName(dVar))
        then
            // Special case dX/dX and dY/dX
            top : dFn as PT.name_tree
            bottom : dVar as PT.name_tree
            if top.value = bottom.value then
                return parse_tree(1)
            return parse_tree(0)

        when
            'T'
        then
            return XLT.Recurse(T, Differentiation)
