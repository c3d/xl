<!--XL Operators-->

{@xl} doesn't really have a notion of "built-in operator" as most
programming languages do. Instead, a precedence table drives the
parsing of operators found in {concept "xl012" "XL0"} text into the
appropriate {inside "tree" "parse tree"} structure.
By default, this precedence table is specified by the
{cvs "xl.syntax" "xl.syntax" "."} input file. It is considered bad
taste to change the priority of any of the operators defined in this
table, as this would introduce significant {@synnoise}. However, it
is OK to add entries in this table, notably when
{concept "extension" "extending"} the language. This can be done by
{inside "plugins" "compiler plug-ins"}.

From a {inside "parser" "parsing point of view"}, {@xl} only
classifies operators along two dimensions: name vs. symbol, and
prefix vs. infix vs. block.
<UL>
<LI>Names are made of
sequences of alphanumeric characters (beginning with a letter),
whereas symbols are made of sequences of non-alphanumeric
characters. So {tt "not"} and {tt "in"} are names, whereas
{tt "+"} or {tt "&lt;=&gt;"} are symbols. Beyond the parser, the two
categories are treated identically.
<LI>Infix symbols sit between their
two operands, and must be defined in the precedence table. Prefix symbols
sit before their unique operand, and the default for a symbol not
found in that table is to be considered as a prefix with
the priority of a function name. Blocks sit around their unique operand.
The {tt "*"} operator in {tt "A*B"} is
  infix (its priority being defined by {cvs "xl.syntax" "xl.syntax" "."}
whereas {tt "not"} in {tt "not Found"} is a prefix operator with a
  non-default priority. Finally, {tt "Factorial"} in
 {tt "Factorial&nbsp;5"} is a prefix operator with the default
priority for function names. The {tt "["} and {tt "]"} characters in
{tt "[A,B,C]"} define a block (the content being made of the infix
{tt ","} with {tt "A"} on its left, and another infix {tt ","} on its right).
</UL>

{@xl} (more precisely {concept "xl012" "XL1"}) uses operators in
roles which are typically played by keywords in older languages. In
particular, the new-line and semi-colon {tt ";"} are two operators,
which are in general used to sequence instructions. Structures such
as while loops, if-then-else, or indentation blocks, are also defined
in terms of operators. For instance, consider the following text:

{pre}while X > 0 loop
    if not EOF then
       A := A+1
       B *= (2.54 + MATH.sqrt(1-A))
{erp}

Below is the {@C++} translation of the creation of the corresponding
parse tree (this C++ code was generated by using {example "quote"}
and asking the XL compiler to emit C++ code). You can find the various
operators from the source code replicated in that structure. Note the
use of {tt "I+"} and {tt "I-"} to denote indentation delimiters, and
the use of a new-line operator ({tt "ascii::cr"}).

{pre}// C++ code generating the above parse tree
newinfix(text("loop"),
    newprefix(
      newname(text("while")),
      newinfix(text(">"),
        newname(text("x")),
        newnatural(0))),
    newblock(
      newinfix(text("then"),
        newprefix(
          newname(text("if")),
          newprefix(
            newname(text("not")),
            newname(text("eof")))),
        newblock(
          newinfix(xl::textio::encoding::ascii::cr,
            newinfix(text(":="),
              newname(text("a")),
              newinfix(text("+"),
                newname(text("a")),
                newnatural(1))),
            newinfix(text("*="),
              newname(text("b")),
              newblock(
                newinfix(text("+"),
                  newreal(2.54),
                  newprefix(
                    newinfix(text("."),
                      newname(text("math")),
                      newname(text("sqrt"))),
                    newblock(
                      newinfix(text("-"),
                        newnatural(1),
                        newname(text("a"))),
                     "(", ")"))),
              "(", ")"))),
        "I+", "I-")),
    "I+", "I-")))
{erp}
