// *****************************************************************************
// xl.symbols.xl                                                      XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of XL symbol tables
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2004-2008,2015,2018-2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2004, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PT = XL.PARSER.TREE
import ERR = XL.ERRORS
import CG = XL.CODEGENERATOR


module XL.SYMBOLS is
// ----------------------------------------------------------------------------
//    Implementation of XL symbol tables
// ----------------------------------------------------------------------------

    type rewrite_list is string of rewrite

    type using_entry is record with
    // ------------------------------------------------------------------------
    //    An entry describing a 'lateral' map
    // ------------------------------------------------------------------------
        scope           : PT.tree
        symbols         : symbol_table
    type using_entries is string of using_entry


    type symbol_table_data is record with
    // ------------------------------------------------------------------------
    //    Information stored in a symbol table
    // ------------------------------------------------------------------------
        enclosing       : symbol_table
        names           : map [text, tree_list]
        rewrites        : map [text, rewrite_list]
        properties      : map [text, PT.tree]
        usings          : using_entries
        implicit        : string of symbol_table


    type symbol_table_depths is map[symbol_table, integer]
    type symbol_table_scopes is map[symbol_table, PT.tree]


    function NewSymbolTable (enclosing : symbol_table) return symbol_table is
    // ------------------------------------------------------------------------
    //    Create a symbol table
    // ------------------------------------------------------------------------
        result.enclosing := enclosing
        trace[symbols] "New table ", result, " enclosed by ", enclosing


    procedure DeleteSymbolTable (table : symbol_table) is
    // ------------------------------------------------------------------------
    //    Delete a symbol table
    // ------------------------------------------------------------------------
        table.enclosing := nil
        delete table


    function Enclosing (table : symbol_table) return symbol_table is
    // ------------------------------------------------------------------------
    //    Return the immediately enclosing symbol table
    // ------------------------------------------------------------------------
        if table <> nil then
            return table.enclosing
        return nil


    procedure SetEnclosing (table : symbol_table; enclosing : symbol_table) is
    // ------------------------------------------------------------------------
    //    Set the enclosing of the table
    // ------------------------------------------------------------------------
        table.enclosing := enclosing


    procedure AddUsing(table : symbol_table;
                       scope : PT.tree;
                       syms  : symbol_table) is
    // ------------------------------------------------------------------------
    //    Add the entry corresponding to a 'using' statement
    // ------------------------------------------------------------------------
        assert table <> nil
        assert syms <> nil
        entry : using_entry
        entry.scope := scope
        entry.symbols := syms
        table.usings += entry
        trace[symbols] "Added using ", syms, " to ", table, " scope ", scope


    procedure AddImplicit (table : symbol_table; syms : symbol_table) is
    // ------------------------------------------------------------------------
    //   Add an implicit table that is looked up when the rest fails
    // ------------------------------------------------------------------------
        table.implicit += syms


    procedure RemoveImplicit(table : symbol_table) is
    // ------------------------------------------------------------------------
    //   Remove the last implicit table
    // ------------------------------------------------------------------------
        pop_back table.implicit


    procedure CopySymbols (toTable : symbol_table; fromTable : symbol_table) is
    // ------------------------------------------------------------------------
    //   Copy all entries in a symbol table
    // ------------------------------------------------------------------------
        toTable.names := fromTable.names
        toTable.rewrites := fromTable.rewrites
        toTable.properties := fromTable.properties
        toTable.usings := fromTable.usings


    procedure AddSymbols (toTable : symbol_table; fromTable : symbol_table) is
    // ------------------------------------------------------------------------
    //   Add symbols from source into destination
    // ------------------------------------------------------------------------
        name : text
        for name in fromTable.names loop
            toTable.names[name] += fromTable.names[name]
        for name in fromTable.rewrites loop
            toTable.rewrites[name] += fromTable.rewrites[name]
        toTable.usings += fromTable.usings


    procedure LocalSymbols (table : symbol_table;
                            in out list : PT.tree_list) is
    // ------------------------------------------------------------------------
    //    Add all local symbols to the tree list
    // ------------------------------------------------------------------------
        name : text
        for name in table.names loop
            list += table.names[name]


    procedure CopyProperty (to   : SYM.symbol_table;
                            from : SYM.symbol_table;
                            name : text) is
    // ------------------------------------------------------------------------
    //    Copy a property from a symbol table to another
    // ------------------------------------------------------------------------
        to.properties[name] := from.properties[name]



    // ========================================================================
    //
    //    Score adjustment for the various lookup kinds
    //
    // ========================================================================

    SCORE_RENAMES_FACTOR        : integer := 16#1
    SCORE_DEPTH_FACTOR          : integer := 16#10
    SCORE_DEFAULT_VALUES_FACTOR : integer := 16#1000
    SCORE_CONVERSION_FACTOR     : integer := 16#10000
    SCORE_GENERICITY_FACTOR     : integer := 16#400000
    SCORE_VARIADICITY_FACTOR    : integer := 16#800000
    SCORE_MATCH_FACTOR          : integer := 16#1000000


    procedure AdjustScoreMatches(in out score : integer; count : integer) is
    // ------------------------------------------------------------------------
    //   Adjust score specificity by a given amount
    // ------------------------------------------------------------------------
        score += (count+1) * SCORE_MATCH_FACTOR


    procedure AdjustScoreDepth (in out score : integer; depth : integer) is
    // ------------------------------------------------------------------------
    //   Adjust the depth by the give amount
    // ------------------------------------------------------------------------
        score -= (depth + 1) * SCORE_DEPTH_FACTOR


    procedure AdjustScoreRenames(in out score : integer; count : integer) is
    // ------------------------------------------------------------------------
    //   Adjust score specificity by a given amount
    // ------------------------------------------------------------------------
        score += (count+1) * SCORE_RENAMES_FACTOR


    procedure AdjustScoreDefaultValues (in out score : integer) is
    // ------------------------------------------------------------------------
    //   Adjust the genericity by the give amount
    // ------------------------------------------------------------------------
        score -= SCORE_DEFAULT_VALUES_FACTOR


    procedure AdjustScoreConversions (in out score : integer) is
    // ------------------------------------------------------------------------
    //   Adjust the genericity by the give amount
    // ------------------------------------------------------------------------
        score -= SCORE_CONVERSION_FACTOR


    procedure AdjustScoreGenericity (in out score : integer) is
    // ------------------------------------------------------------------------
    //   Adjust the genericity by the give amount
    // ------------------------------------------------------------------------
        score -= SCORE_GENERICITY_FACTOR


    procedure AdjustScoreVariadicity (in out score : integer) is
    // ------------------------------------------------------------------------
    //    the variadicity by the given amount
    // ------------------------------------------------------------------------
        score -= SCORE_VARIADICITY_FACTOR



    // ========================================================================
    //
    //    Simple name lookup
    //
    // ========================================================================

    procedure Enter (table          : symbol_table;
                     category       : text;
                     name           : text;
                     value          : PT.tree) is
    // ------------------------------------------------------------------------
    //   Add the value to the named entries
    // ------------------------------------------------------------------------
        name := category + ":" + PT.XLNormalize(name)
        trace [lookup] "Enter ", name, "=", value, " into ", table
        table.names[name] += value


    procedure Collect(table         : symbol_table;
                      in out depths : symbol_table_depths;
                      in out scopes : symbol_table_scopes;
                      mode          : lookup_kind;
                      depth         : integer := 1;
                      scope         : PT.tree := nil) is
    // ------------------------------------------------------------------------
    //   Collect all tables referenced by the current one, with their depth
    // ------------------------------------------------------------------------
        current_depth : integer := depths[table]

        if current_depth > depth then
            depths[table] := depth
            scopes[table] := scope
        else if current_depth = 0 then
            depths[table] := depth
            scopes[table] := scope
            if mode <> lookupLocalOnly then
                if mode <> lookupDirect then
                    entry : using_entry
                    for entry in table.usings loop
                        entryScope : PT.tree := entry.scope
                        entryMode  : lookup_kind := mode
                        if scope <> nil then
                            entryMode := lookupLocalOnly
                            if entryScope <> nil then
                                entryScope := parse_tree('scope'.'entryScope')
                            else
                                entryScope := scope
                        Collect entry.symbols,depths,scopes,entryMode,
                                depth+100, entryScope
                    impl : symbol_table
                    for impl in table.implicit loop
                        Collect impl, depths, scopes, mode, depth+100, scope
                if mode <> lookupLocalUsing then
                    if table.enclosing <> nil then
                        Collect table.enclosing, depths, scopes, mode,
                                depth+2, scope


    procedure Lookup (table         : symbol_table;
                      category      : text;
                      name          : text;
                      in out values : tree_list;
                      mode          : lookup_kind) is
    // ------------------------------------------------------------------------
    //   Fill the tree list with all the values found
    // ------------------------------------------------------------------------

        scope : map[PT.tree, integer]
        Lookup table, category, name, values, scope, 0, mode


    procedure Lookup (table         : symbol_table;
                      category      : text
                      name          : text;
                      in out values : tree_list;
                      in out scopes : map[PT.tree, integer];
                      baseDepth     : integer;
                      mode          : lookup_kind) is
    // ------------------------------------------------------------------------
    //    Lookup and store the depth of each symbol
    // ------------------------------------------------------------------------

        symdepths     : symbol_table_depths
        symscopes     : symbol_table_scopes
        clearscopes   : map[PT.tree, integer]
        clearvalues   : tree_list

        name := category + ":" + PT.XLNormalize(name)

        trace [lookup] "Lookup: ", name, " from ", table, " mode ", mode

        Collect table, symdepths, symscopes, mode

        for table in symdepths loop
            scope : PT.tree := symscopes[table]
            depth : integer := symdepths[table] + baseDepth

            if count(table.names, name) > 0 then
                if scope <> nil then
                    depth += 1
                trace [lookup] " in ", table,
                               " depth ", depth, " scope ", scope,
                               " got ", size(table.names[name])
                list : PT.tree_list := table.names[name]
                item : PT.tree

                // In innermost mode, only find the closest symbol
                if mode = lookupInnermost and size(values) > 0 then
                    best : integer := scopes[values[0]]
                    if depth > best then
                        list := clearvalues
                    else if depth < best then
                        values := clearvalues
                        scopes := clearscopes

                // Loop on symbols found here
                for item in list loop
                    if scopes[item] = 0 then
                        scoped : PT.tree := item
                        if scope <> nil then
                            scoped := parse_tree('scope'.'item')
                            scoped.info := item.info
                            scoped.position := item.position
                            scopes[scoped] := depth
                        values += scoped
                        scopes[item] := depth


    function LookupOne (table         : symbol_table;
                        category      : text;
                        name          : text;
                        mode          : lookup_kind) return PT.tree is
    // ------------------------------------------------------------------------
    //   Fill the tree list with all the values found
    // ------------------------------------------------------------------------

        list : PT.tree_list
        Lookup table, category, name, list, mode
        if size(list) > 0 then
            return list[0]
        return nil



    // ========================================================================
    //
    //    Tree rewrites support
    //
    // ========================================================================

    function TreeName (to_name : PT.tree) return text is
    // ------------------------------------------------------------------------
    //    Return the name used for symbol lookup for a tree
    // ------------------------------------------------------------------------
    // The name is used to accelerate lookup of written forms in symbol tables

        if to_name = nil then
            result := "Z"
        else if to_name.kind = PT.xlINFIX then
            infix : to_name as PT.infix_tree
            result := "I";
            result += PT.XLNormalize(infix.name)
        else if to_name.kind = PT.xlPREFIX then
            result := "P"
        else if to_name.kind = PT.xlBLOCK then
            block : to_name as PT.block_tree
            result := "B"
            result += block.opening
        else if to_name.kind = PT.xlNAME then
            name : to_name as PT.name_tree
            result := "N"
            result += PT.XLNormalize(name.value)
        else if to_name.kind = PT.xlWILDCARD then
            result := "*"
        else
            result := "T"               // Terminal


    procedure EnterRewrite  (table : symbol_table;
                             Name : text;
                             info : rewrite) is
    // ------------------------------------------------------------------------
    //   Enter a tree rewrite into the symbol table
    // ------------------------------------------------------------------------
        trace [rewrite] "Entering (", info.reference_form, " as [", Name, "])",
                        " into ", table
        Name += "."
        Name += TreeName (info.reference_form)
        table.rewrites[Name] += info
        trace [rewrite] "Entered (", info.reference_form, " as [", Name, "])",
                        " into ", table


    procedure DebugEntry(what : PT.tree) is
    // ------------------------------------------------------------------------
    //    Debug hook to be used in the compiler, entry to rewrite
    // ------------------------------------------------------------------------
        if false then DebugEntry what


    procedure DebugExit(what : PT.tree) is
    // ------------------------------------------------------------------------
    //    Debug hook to be used in the compiler, entry to rewrite
    // ------------------------------------------------------------------------
        if false then DebugExit what


    function  LookupRewrite (table     : symbol_table;
                             kind      : text;
                             test_tree : PT.tree;
                             out cnt   : integer;
                             report    : boolean) return PT.tree is
    // ------------------------------------------------------------------------
    //    Find the best rewrite and apply it
    // ------------------------------------------------------------------------
        Name       : text := kind
        R          : rewrite
        score      : integer := 0
        best       : integer := 0
        bestR      : rewrite := nil
        bestA      : PT.tree_map
        bestS      : PT.tree
        bestShape  : integer := 0
        errorList  : PT.tree := nil
        ambig      : rewrite := nil
        key        : text := "TRANSFORMS"
        track      : boolean := count(test_tree.info, key) > 0
        info       : PT.info := nil
        List       : rewrite_list
        Depths     : map[rewrite, integer]
        symdepths  : symbol_table_depths
        symscopes  : symbol_table_scopes
        Wild       : text
        tbl        : symbol_table

        if track then
            IO.WriteLn "Rewrite: ", kind, "(", test_tree, ")"
            info := test_tree.info[key]
            DebugEntry test_tree

        Name += "."
        Wild := Name
        Wild += "*"
        Name += TreeName(test_tree)
        result := test_tree

        trace [rewrite] "Rewrite ", kind, "(", test_tree, ")"

        // First find all candidates. We used to evaluate scores here too,
        // but this may involve some semantics (instantiation) that modifies
        // the maps being looped on, which is not good for the iterators
        cnt := 0
        Collect table, symdepths, symscopes, lookupAll
        for tbl in symdepths loop
            depth   : integer := symdepths[tbl]
            sublist : rewrite_list

            if count(tbl.rewrites, name) > 0 then
                sublist += tbl.rewrites[name]
            if count(tbl.rewrites, Wild) > 0 then
                sublist += tbl.rewrites[Wild]

            if track then
                IO.WriteLn " in ", tbl, " depth ", depth,
                           " rewrites ", size(sublist)

            if size(sublist) > 0 then
                item : rewrite
                for item in sublist loop
                    List += item
                    Depths[item] := depth

        // Then sort candidates
        for R in List loop
            depth      : integer := Depths[R]
            args       : PT.tree_map
            ref        : PT.tree := R.reference_form
            dropErrors : boolean := false
            matches    : integer := PT.Matches(test_tree, ref, args)
            if track then
                IO.Write "Matching (", ref, ") = ", score, " depth ", depth, " "
            if matches > 0 then
                score := 0
                AdjustScoreMatches score, matches
                AdjustScoreDepth score, depth
                if bestShape < score then
                    // The shape we found is better than anything before
                    bestShape := score
                    errorList := nil
                if bestShape > score or ref.kind = PT.xlWILDCARD then
                    // The shape is worse than the best, do not show errors
                    dropErrors := true

                if R.score_adjust <> nil then
                    score := R.score_adjust (test_tree, R, args,
                                             depth, score)
                    if score = 0 and not dropErrors then
                        if errorList = nil or XLT.verbose then
                            ERR.PushErrorContext()
                            ERR.Error "Form '$1' could not be selected", ref
                            ERR.DisplayLastErrors()
                            errorList := ERR.ErrorTree(errorList)
                            ERR.PopErrorContext()
                    if track then
                        IO.WriteLn " adjusted = ", score
                if score > 0 then
                    errorList := nil
                    if score > best then
                        if track then
                            IO.WriteLn "Best so far"
                        bestR := R
                        bestA := args
                        bestS := nil
                        best := score
                        ambig := nil
                        cnt := 1
                    else if score = best and R <> bestR then
                        if track then
                            IO.WriteLn "Ambiguity"
                        ambig := R
                        cnt += 1

        if bestR <> nil then
            if ambig = nil then
                old_pos : integer := PT.NOPOS
                PT.NOPOS := test_tree.position
                result := bestR.translator(test_tree, bestS, bestR, bestA)
                if result <> nil and result <> test_tree then
                    if result.source = nil then
                        result.source := test_tree
                PT.NOPOS := old_pos
            else if report then
                ERR.Error "The form '$1' is ambiguous", test_tree
                ERR.Error "A first possible match is $1",
                          bestR.reference_form
                ERR.Error "A second possible match is $1",
                          ambig.reference_form
        else if report and count(report_misses, kind) > 0 then
            ERR.PushErrorContext()
            ERR.Error "No translation for '$1'", test_tree
            ERR.ReplayErrors errorList
            ERR.PopErrorContext()
            ERR.DisplayLastErrors()
            result := ERR.ErrorTree()

        trace[rewrite] "Rewritten: ", kind, "(", test_tree, ")=", result
        if track then
            IO.WriteLn "Rewritten: ", kind, "(", test_tree, ")=", result
            result.info[key] := info
            DebugExit result


    function  LookupRewrite (table     : symbol_table;
                             kind      : text;
                             tree      : PT.tree;
                             out count : integer) return PT.tree is
    // ------------------------------------------------------------------------
    //   Lookup the tree, assuming we do error handling in caller
    // ------------------------------------------------------------------------
        result := LookupRewrite (table, kind, tree, count, false)


    function  LookupRewrite (table     : symbol_table;
                             kind      : text;
                             tree      : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //    Lookup, assuming we find exactly one result
    // ------------------------------------------------------------------------
        count  : integer := 0
        result := LookupRewrite (table, kind, tree, count, true)


    function  RewritesCount  (table     : symbol_table;
                              kind      : text;
                              tree      : PT.tree) return integer is
    // ------------------------------------------------------------------------
    //    Count the number of matches we find
    // ------------------------------------------------------------------------
        tree := LookupRewrite (table, kind, tree, result, false)


    function RewriteAsTranslator  (input       : PT.tree;
                                   scope       : PT.tree;
                                   info        : rewrite;
                                   in out args : PT.tree_map) return PT.tree is
    // ------------------------------------------------------------------------
    //    Replace a tree with the reference (used in name lookup)
    // ------------------------------------------------------------------------
    //  This is used as a callback in symbol tables for simple rewrites
        return info.reference_form



    function RewriteAs (reference_form : PT.tree) return rewrite is
    // ------------------------------------------------------------------------
    //   Return a rewrite that rewrites as the reference form
    // ------------------------------------------------------------------------
        result.reference_form := reference_form
        result.score_adjust   := nil
        result.translator     := RewriteAsTranslator



    // ========================================================================
    //
    //    Symbol table properties
    //
    // ========================================================================

    procedure SetProperty (table : symbol_table;
                           name  : text;
                           prop  : PT.tree) is
    // ------------------------------------------------------------------------
    //    Set some arbitrary property
    // ------------------------------------------------------------------------
        table.properties[name] := prop


    function GetProperty (table    : symbol_table;
                          name     : text;
                          enclosed : boolean) return PT.tree is
    // ------------------------------------------------------------------------
    //   Get some arbitrary property
    // ------------------------------------------------------------------------
        result := nil
        while result = nil and table loop
            if count (table.properties, name) >0 then
                result := table.properties[name]
            table := table.enclosing
            exit if not enclosed


    procedure SetInteger (table : symbol_table;
                         name  : text;
                         value : integer) is
    // ------------------------------------------------------------------------
    //   Set an integer property
    // ------------------------------------------------------------------------
        SetProperty table, name, PT.NewNatural(value)


    function GetInteger (table         : symbol_table;
                         name          : text;
                         default_value : integer;
                         enclosed      : boolean) return integer is
    // ------------------------------------------------------------------------
    //   Get an integer property
    // ------------------------------------------------------------------------
       I : PT.tree := GetProperty(table, name, enclosed)
       if I <> nil and I.kind = PT.xlNATURAL then
           as_int : I as PT.integer_tree
           return as_int.value
       return default_value


    procedure SetText (table : symbol_table;
                       name  : text;
                       value : text) is
    // ------------------------------------------------------------------------
    //   Set an text property
    // ------------------------------------------------------------------------
        SetProperty table, name, PT.NewText(value, '"')


    function GetText (table         : symbol_table;
                      name          : text;
                      default_value : text;
                      enclosed      : boolean) return text is
    // ------------------------------------------------------------------------
    //   Get an text property
    // ------------------------------------------------------------------------
       T : PT.tree := GetProperty(table, name, enclosed)
       if T <> nil and T.kind = PT.xlTEXT then
           as_txt : T as PT.text_tree
           return as_txt.value
       return default_value


    procedure AddScopeItem(table:symbol_table; section:text; item:PT.tree) is
    // ------------------------------------------------------------------------
    //   Add an item to a section in the current context
    // ------------------------------------------------------------------------

        old : PT.tree := table.properties[section]
        if old <> nil then
            item := parse_tree
               'old'
               'item'
        table.properties[section] := item


    procedure PushScopeItem(table:symbol_table; section:text; item:PT.tree) is
    // ------------------------------------------------------------------------
    //   Add an item to a section in the current context
    // ------------------------------------------------------------------------

        old : PT.tree := table.properties[section]
        if old <> nil then
            item := parse_tree
               'item'
               'old'
        table.properties[section] := item


    function ScopeItems (table:symbol_table; section:text) return PT.tree is
    // ------------------------------------------------------------------------
    //   Return the current list of scope items, or @nop
    // ------------------------------------------------------------------------
        result := table.properties[section]



    // ========================================================================
    //
    //    Named context property
    //
    // ========================================================================

    type context_info_data is PT.info_data with
    // ------------------------------------------------------------------------
    //    Used to record a context property
    // ------------------------------------------------------------------------
        context         : SYM.symbol_table
    type context_info is access to context_info_data


    procedure SetContextProperty (table       : symbol_table;
                                  name        : text;
                                  value       : symbol_table) is
    // ------------------------------------------------------------------------
    //   Record the context in a property
    // ------------------------------------------------------------------------
        prop  : PT.tree := PT.NewName("")
        coinf : context_info
        coinf.context := value
        PT.SetInfo prop, name, coinf
        SetProperty table, name, prop


    function ContextProperty (ctxt    : symbol_table;
                              name    : text;
                              recurse : boolean) return symbol_table is
    // ------------------------------------------------------------------------
    //   Return the context property for that name
    // ------------------------------------------------------------------------
        prop  : PT.tree := GetProperty(ctxt, name, recurse)
        if prop = nil then
            return nil
        coinf : PT.FindInfo (prop, name) as context_info
        if coinf = nil then
            return nil
        return coinf.context


    procedure SetContextProperty (data  : PT.tree;
                                  name  : text;
                                  value : symbol_table) is
    // ------------------------------------------------------------------------
    //   Record the context in a property
    // ------------------------------------------------------------------------
        coinf : context_info
        coinf.context := value
        PT.SetInfo data, name, coinf


    function ContextProperty (data    : PT.tree;
                              name    : text) return symbol_table is
    // ------------------------------------------------------------------------
    //   Return the context property for that name
    // ------------------------------------------------------------------------
        if data = nil then
            return nil
        coinf : PT.FindInfo (data, name) as context_info
        if coinf = nil then
            return nil
        return coinf.context



    // ========================================================================
    //
    //    Misc helpers
    //
    // ========================================================================

    unique_id : integer := 0
    function Temporary(base : text; pos : integer) return PT.name_tree is
    // ------------------------------------------------------------------------
    //   Creating a temporary compiler-generated name
    // ------------------------------------------------------------------------
        unique_id += 1
        base += "_"  // Invalid in XL names, but valid in most back-ends
        if CG.HasFormat(base + "rename") then
            base := CG.Format(base + "rename")
        base += text(unique_id)
        return PT.NewName (base, pos)



    procedure Debug(S : symbol_table; kind : lookup_kind) is
    // ------------------------------------------------------------------------
    //   Dump a symbol table
    // ------------------------------------------------------------------------
        IO.WriteLn "Symbol table ", S

        depths : symbol_table_depths
        scopes : symbol_table_scopes
        Collect S, depths, scopes, kind

        for S in depths loop
            depth :integer := depths[S]
            IO.WriteLn "Table ", S, " depth ", depth, " scope ", scopes[S]
            if S.enclosing <> nil then
                enclDepth : integer := depth + 1
                if count(depths, S.enclosing) > 0 then
                    enclDepth := depths[S.enclosing]
                IO.WriteLn " Parent depth ", enclDepth,
                           " p ::symbols(", S.enclosing, ")"
            name : text
            for name in S.names loop
                IO.Write " Name ", name, ": "
                T : PT.tree
                for T in S.names[name] loop
                    IO.Write PT.name_tree(T), " "
                IO.WriteLn ""
            for name in S.rewrites loop
                IO.Write " Rewr ", name, " (", size(S.rewrites[name]), "): "
                R : rewrite
                for R in S.rewrites[name] loop
                    IO.Write R, " "
                IO.WriteLn ""
            for name in S.properties loop
                IO.Write " Prop ", name, ": "
                prop : PT.tree := S.properties[name]
                if prop = nil then
                    IO.WriteLn "nil"
                else if (prop.kind = PT.xlNATURAL or prop.kind = PT.xlREAL or
                         prop.kind = PT.xlTEXT or prop.kind = PT.xlNAME) then
                    IO.WriteLn prop
                else
                    IO.WriteLn " p ::debug(", PT.name_tree(prop), ")"
            ue : using_entry
            for ue in S.usings loop
                ueDepth : integer := depth + 1
                if count(depths, ue.symbols) > 0 then
                    ueDepth := depths[ue.symbols]
                IO.WriteLn " Usng ", ue.scope, " depth ", ueDepth,
                           " p ::symbols(",ue.symbols, ")"
            impl : symbol_table
            for impl in S.implicit loop
                implDepth : integer := depth + 1
                if count(depths, impl) > 0 then
                    implDepth := depths[impl]
                IO.WriteLn " Impl depth ", implDepth, " p ::symbols(", impl, ")"
