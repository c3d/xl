// *****************************************************************************
// xl.errors.xl                                                       XL project
// *****************************************************************************
//
// File description:
//
//     Errors for the XL compiler
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2003-2008,2015,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2004-2005, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import IO = XL.TEXT_IO
import POS = XL.SCANNER.POSITION

module XL.ERRORS is
// ----------------------------------------------------------------------------
//    Elementary module for error handling
// ----------------------------------------------------------------------------

    function Localize (E : text) return text is
    // ------------------------------------------------------------------------
    //   Temporary: localization is off at this point
    // ------------------------------------------------------------------------
        return E


    type error_stack_element is record with
        message         : text
        position        : integer
    type error_stack_level is string of error_stack_element
    error_stack         : string of error_stack_level
    last_errors         : error_stack_level
    empty               : error_stack_level


    procedure PushErrorContext() is
    // ------------------------------------------------------------------------
    //    Push a new output string stream to store errors
    // ------------------------------------------------------------------------
        error_stack += empty


    function PopErrorContext() return boolean is
    // ------------------------------------------------------------------------
    //   Pop last string stream for errors
    // ------------------------------------------------------------------------
        last_errors := back(error_stack)
        pop_back error_stack
        return size(last_errors) > 0


    procedure DisplayLastErrors() is
    // ------------------------------------------------------------------------
    //   Display the last errors
    // ------------------------------------------------------------------------
        if size(error_stack) > 0 then
            back(error_stack) += last_errors
        else
            errors : error_stack_level := last_errors
            last_errors := empty
            E : error_stack_element
            for E in errors loop
                Error E.message, E.position


    function LastErrorsText() return text is
    // ------------------------------------------------------------------------
    //   Return the text for the very last errors
    // ------------------------------------------------------------------------
        if size(last_errors) > 0 then
            E : error_stack_element := last_errors[0]
            result := E.message


    function PendingErrors() return integer is
    // ------------------------------------------------------------------------
    //    Return the number of errors at the current level
    // ------------------------------------------------------------------------
        if size(error_stack) > 0 then
            return size(back(error_stack))
        return error_count


    function ErrorTree(previous : PT.tree) return PT.tree is
    // ------------------------------------------------------------------------
    //   Generate an "@error" parse tree recording the errors we had
    // ------------------------------------------------------------------------
        // Recover previous errors if any
        if previous <> nil then
            translate previous
                when (@error 'msgs') then
                    result := msgs

        errors : error_stack_level
        if size(error_stack) > 0 then
            errors := back(error_stack)
        else
            errors := last_errors
        E : error_stack_element
        for E in errors loop
            msg : PT.text_tree := PT.NewText (E.message, '"', E.position)
            if result = nil then
                result := msg
            else
                result := parse_tree ('result' 'msg')
        if result <> nil then
            result := parse_tree(@error 'result')


    procedure ReplayErrors(token : PT.tree) is
    // ------------------------------------------------------------------------
    //    Replay errors recorded by some '@error' tree
    // ------------------------------------------------------------------------
        if token <> nil then
            translate token
                when (@error 'messages') then
                    ReplayErrors messages
                when (@error) then
                    Error "Error message was lost", token.position
                when ('msg1' 'msg2') then
                    ReplayErrors msg1
                    ReplayErrors msg2
                else
                    msg : token as PT.text_tree
                    if msg <> nil then
                        Error msg.value, msg.position
                    else
                        Error "Unknown error token '$1'", token


    procedure Error (E : text; pos : integer; args : string of text) is
    // ------------------------------------------------------------------------
    //    Report the given error
    // ------------------------------------------------------------------------
        file      : text
        line      : integer
        column    : integer
        linetext  : text
        msg       : text
        fmt       : text
        I         : integer
        Max       : integer
        hadDollar : boolean := false

        // Get message and perform substitution
        msg := Localize E
        Max := length msg
        for I in 0..Max-1 loop
            C : character := msg[I]
            if C = '$' then
                if hadDollar then
                    fmt += "$"
                    hadDollar := false
                else
                    hadDollar := true
            else if hadDollar then
                if C >= '1' and C <= '9' then
                    fmt += args[integer(C) - integer('1')]
                hadDollar := false
            else
                fmt += C

        trace[errors] "Error @", pos, ":", size(error_stack), ": ", fmt

        M : error_stack_element
        M.message := fmt
        M.position := pos
        if size(error_stack) > 0 then
            if size(back(error_stack)) < max_errors then
                back(error_stack) += M
        else
            error_count += 1
            if (size(last_errors) < max_errors) then
                last_errors += M

            // Convert positon to line and column
            if pos = -1 then
                IO.WriteLn "[Compiler generated] ", fmt
            else
                POS.PositionToLine pos, file, line, column, linetext

                // Display message
                if file <> "" then
                    IO.WriteLn file, ":", line, ": ", fmt

                    // Display line contents and caret
                    IO.Writeln "| ", linetext
                    IO.Write   "|_"
                    while column > 0 loop
                        IO.Write "_"
                        column -= 1
                    IO.writeln "^"
                else
                    IO.WriteLn "[Unknown position] ", fmt


    procedure Error (E : text; pos : integer) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        Error E, pos, args


    procedure Error (E : text; pos : integer; arg : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += arg
        Error E, pos, args


    procedure Error (E : text; pos : integer; arg : text; arg2 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += arg
        args += arg2
        Error E, pos, args


    procedure Error (E : text;
                     pos : integer;
                     arg : text; arg2 : text; arg3 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += arg
        args += arg2
        args += arg3
        Error E, pos, args


    function ArgPosition(arg : PT.tree) return integer is
    // ------------------------------------------------------------------------
    //    Return the position for an input argument
    // ------------------------------------------------------------------------
        if arg <> nil then
            return arg.position
        return PT.NOPOS


    function TreeToText(in out arg : PT.tree) return text is
    // ------------------------------------------------------------------------
    //    Convert arg to text, eliminating any bytecode reference
    // ------------------------------------------------------------------------
        loop
            result := text arg
            C : character
            for C in result loop
                exit if C = '@'
            if C = '@' then
                if arg.source <> nil then
                    arg := arg.source
                    restart
            return result


    procedure Error (E : text; arg : PT.tree) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += TreeToText arg
        Error E, ArgPosition(arg), args


    procedure Error (E : text; arg : PT.tree; arg2 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += TreeToText arg
        args += arg2
        Error E, ArgPosition(arg), args


    procedure Error (E : text; arg : PT.tree; arg2 : PT.tree) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += TreeToText arg
        args += TreeToText arg2
        Error E, ArgPosition(arg), args


    procedure Error (E : text; arg : PT.tree; arg2 : text; arg3 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += TreeToText arg
        args += arg2
        args += arg3
        Error E, ArgPosition(arg), args


    procedure Error (E : text; arg : PT.tree; arg2 : text; arg3 : PT.tree) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += TreeToText arg
        args += arg2
        args += TreeToText arg3
        Error E, ArgPosition(arg), args


    procedure Error (E : text; arg : PT.tree; arg2 : PT.tree; arg3 : text) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += TreeToText arg
        args += TreeToText arg2
        args += arg3
        Error E, ArgPosition(arg), args


    procedure Error (E : text; arg:PT.tree; arg2:PT.tree; arg3:PT.tree) is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        args : string of text
        args += TreeToText arg
        args += TreeToText arg2
        args += TreeToText arg3
        Error E, ArgPosition(arg), args
