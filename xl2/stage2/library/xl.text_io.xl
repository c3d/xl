// *****************************************************************************
// xl.text_io.xl                                                      XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of text I/O
//     This uses runtime-dependent primitives that are defined in the bytecode
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2006-2008,2015,2019, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

module XL.TEXT_IO is

    type file is XL.BYTECODE.xlfile

    function File (Name, Mode : text) return file is XL.BYTECODE.OpenFile
    procedure Delete (F : file) is XL.BYTECODE.CloseFile
    to Copy(out Tgt : file;
            in  Src : file) written Tgt := Src is XL.BYTECODE.copy_ptr
    to PutCharInFile(C : integer; F : file) is XL.BYTECODE.PutChar
    to PutRealInFile(X : real; F : file) is XL.BYTECODE.PutReal
    to PutStringInFile (S : text; F : file) is XL.BYTECODE.PutString
    to PutNewLineInFile(F : file) is XL.BYTECODE.PutNewLine



    // ========================================================================
    //
    //   Writing to files
    //
    // ========================================================================

    to Write(F : file) is
    // ------------------------------------------------------------------------
    //   Write nothing at all, with style
    // ------------------------------------------------------------------------
        return


    to Write(F : file; C : character) is
    // ------------------------------------------------------------------------
    //    Write a single character
    // ------------------------------------------------------------------------
        PutCharInFile integer(C), F


    to Write(F : file; N : integer) is
    // ------------------------------------------------------------------------
    //    Writing an integer
    // ------------------------------------------------------------------------
        if N < 0 then
            PutCharInFile integer('-'), F
            N := - N

        base    : integer := 10
        if N / base <> 0 then
            Write F, N/base
        N := N mod base
        PutCharInFile N + integer('0'), F


    to Write(F : file; N : unsigned) is
    // ------------------------------------------------------------------------
    //    Writing an unsigned integer
    // ------------------------------------------------------------------------
        base    : unsigned := 10U
        if N / base <> 0U then
            Write F, N/base
        N := N mod base
        PutCharInFile integer(N) + integer('0'), F


    to Write(F : file; N : real) is
    // ------------------------------------------------------------------------
    //   Writing a real number
    // ------------------------------------------------------------------------
        PutRealInFile N, F


    to Write(F : file; S : text) is
    // ------------------------------------------------------------------------
    //    Writing a text
    // ------------------------------------------------------------------------
        PutStringInFile S, F


    to Write(F : file; W : writable; ...) is
    // ------------------------------------------------------------------------
    //   Write a writable and something else to a file
    // ------------------------------------------------------------------------
        any.Write F, W
        any.Write F, ...


    to WriteLn(F : file; ...) is
    // ------------------------------------------------------------------------
    //   Write elements with CR at end
    // ------------------------------------------------------------------------
        any.Write F, ...
        PutNewLineInFile F
