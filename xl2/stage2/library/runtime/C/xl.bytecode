// ****************************************************************************
//  xl.bytecode                     (C) 1992-2003 Christophe de Dinechin (ddd)
//                                                                 XL2 project
// ****************************************************************************
//
//   File Description:
//
//     Bytecode format strings
//
//
//
//
//
//
//
//
// ****************************************************************************
// This document is released under the GNU Genral Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision: 299 $
// * Date       : $Date: 2007-06-14 22:36:13 +0200 (Thu, 14 Jun 2007) $
// ****************************************************************************

RUNTIME         "C"

xcinit          "#define XLINIT 1"
                "#include ""xl_lib.h"""
xcterm          ""

init            "#include <stdio.h>"
                "#include <stdlib.h>"
                "#include <setjmp.h>"
                "#include <math.h>"

                "typedef char                   xlint8;"
                "typedef short                  xlint16;"
                "typedef int                    xlint32;"
                "typedef long long              xlint64;"
                "typedef unsigned char          xluint8;"
                "typedef unsigned short         xluint16;"
                "typedef unsigned int           xluint32;"
                "typedef unsigned long long     xluint64;"
                "typedef float                  xlreal32;"
                "typedef double                 xlreal64;"
                "typedef int                    xlint;"
                "typedef unsigned               xluint;"
                "typedef double                 xlreal;"
                "typedef char                   xlbool;"
                "typedef char                   xlchar;"
                "typedef const char *           xltext;"
                "typedef void *                 xlptr;"
                "typedef struct {} /* !ANSIC */ xlrecord, xlmodule;"
                "typedef FILE *                 xlfile;"
                "jmp_buf *                      XL_exception_stack = NULL;"
                "#define NOP                    (void) 0;"

term            "/*end*/"

stdfile         "$1 = xl_getstdfile($2);"

stdin           "$1 = stdin;"
stdout          "$1 = stdout;"
stderr          "$1 = stderr;"
OpenFile        "$1 = fopen($2, $3);"
CloseFile       "fclose($1);"
PutChar         "fputc($1, $2);"
PutReal         "fprintf($2, ""%#10.4g"", $1);"
PutString       "fputs($1, $2);"
PutNewLine      "fputc('\n', $1);"

nop             ""
decl            ""
type            "/* Type */"
error           "/* ERROR */"
info            "/* Info: $1 */"
value           "/* Value: $1 */"
copy            "$1 = $2;"

type_decl       "typedef struct $1_data $2;"
type_impl       "/* exist $1 impl $2 */$= $2 $1_data"

ref_decl        "/* $1 $2; Ref */"
temp_decl       "$1 $2; /* Temp */"
local_decl      "$1 $2; /* Local */"
result_decl     "$1 $2; /* Result */"
parm_decl       "/* $1 $2; Parm */"
global_decl     "$1 $2; /* Global */"
field_decl      "$1 $2; /* Field */"

fn_ret0         "void "
fn_ret1         "$1 "
fn_retN_begin   "struct Ret_$1 {${"
fn_retN_decl    "$1 $2;"
fn_retN_end     "$}} /* $1 */;"
fn_retN         "struct Ret_$1 "
fn_name         "$1 "
fn_ptr_name     "(*$1) "
fn_begin_parms  "(${ "
fn_retN_ptr     ""
fn_parm         "$[, ]$1 $2 "
fn_end_parms    "$}) "

fn_decl_begin   ""
fn_decl_end     ";"
fn_ptr_begin   "typedef "
fn_ptr_end     ";"

fn_body_begin   ""
fn_body         "{"
fn_entry        ""
fn_exit         "exit_$1: NOP;"
fn_body_end     "}"

fn_ptr_copy     "$1 = $2;"

native_C        ""

record_begin    "typedef struct $1 {"
record_field    "  $2 $3; /* RecF */"
record_end      "} $1;"

field           "/*$1=($2.$3)*/$= $1 ($2.$3)"

call_begin      ""
call_ret1_decl  "$1 $2; /* Ret */"
call_retN_decl  "struct Ret_$1 $2;"
call_ret1       "$2 = "
call_retN       "$2 = "
call_args_begin "$1 (${ "
call_arg_retN   ""
call_arg        "$[, ]$2 "
call_args_end   ")$};"
call_outtype    ""
call_outarg1    "$1 = $3;"
call_outargN    "$1 = $2.$3;"
call_end        ""

entry_ret1_decl "$1 $2; /* Out=Ret */"
entry_retN_decl "struct Ret_$1 RetVal_$1;"
entry_retN_loc  "$1 $2;"
exit_ret1       "return $1;"
exit_retN_set   "RetVal_$1.$2 = $3;"
exit_retN       "return RetVal_$1;"

goto_exit       "goto exit_$1;"

if              "if($1) goto else_$2;"
ifnot           "if(!($1)) goto else_$2;"
ifelse          "goto endif_$1;"
                "else_$1: NOP;"
ifend           "endif_$1: NOP;"
ifendelse       "else_$1: NOP;"

cases           ""
caseskip        "goto end_$1;"
casesend        "end_$1: NOP;"

case_begin      "switch($2) {"
case_label      ""
case_code       ""
case_entry      "case $2:"
case_exit       "break;"
case_def_entry  "default:"
case_def_exit   "break;"
case_end        "}"

exit_loop       "goto loopexit_$1;"
restart_loop    "goto loop_$1;"

loop_begin      "loop_$1:"
loop_end        "goto loop_$1;"
                "loopexit_$1: NOP;"

non_loop_begin  "loop_$1:"
non_loop_end    "loopexit_$1: NOP;"

do_while_begin  "loop_$1:"
do_while_test   "/* Test code for $1 in $2 */"
do_while_end    "if ($2) goto loop_$1;"
                "loopexit_$1: NOP;"

do_until_begin  "loop_$1:"
do_until_test   "/* Test code for $1 in $2 */"
do_until_end    "if (!$2) goto loop_$1;"
                "loopexit_$1: NOP;"

while_begin     "loop_$1:"
while_test      "if (!$2) goto loopexit_$1;"
while_end       "goto loop_$1;"
                "loopexit_$1: NOP;"

until_begin     "loop_$1:"
until_test      "if ($2) goto loopexit_$1;"
until_end       "goto loop_$1;"
                "loopexit_$1: NOP;"

once_decl       "static int $1_Once = 0; // Single-threaded"
once_begin      "if ($1_Once) goto $1_endOnce;"
                "$1_Once = 1;"
once_end        "$1_endOnce: NOP;"

type_info       "#define $1_id $2"

unwind_decl     "jmp_buf $1_save;"
                "int $1_exc;"
                "jmp_buf *$1_prev = NULL;"
unwind_entry    "$1_prev = XL_exception_stack;"
                "XL_exception_stack = &$1_save;"
                "$1_exc = setjmp($1_save);"
                "if ($1_exc != 0) goto $1_catch;"
unwind_exit     "XL_exception_stack = $1_prev;"
                "goto $1_end;"
unwind_catch    "$1_catch:"
                "XL_exception_stack = $1_prev;"
                "switch($1_exc) {"
unwind_land     "case $2_id: /* $1 */ "
unwind_resume   "goto $1_end; /* $2 */"
unwind_caught   "} /* $1 */"
                "longjmp(*XL_exception_stack, $1_exc);"
unwind_end      "$1_end: NOP;"
unwind_raise    "longjmp(*XL_exception_stack, $1);"
unwind_reraise  "longjmp(*XL_exception_stack, $1_exc);"

main_begin      "int main(int Argc, char **Argv)"
                "{"
main_entry      "    /* Main */"
main_end        "    return 0;"
                "}"

xltest          "xl::textio::writeln($1);"

zero_uint       "$1 = 0;"
copy_uint       "$1 = $2;"
adds_uint       "$1 = $1 + $2;"
subs_uint       "$1 = $1 - $2;"
muls_uint       "$1 = $1 * $2;"
divs_uint       "$1 = $1 / $2;"
add_uint        "$1 = $2 + $3;"
sub_uint        "$1 = $2 - $3;"
mul_uint        "$1 = $2 * $3;"
div_uint        "$1 = $2 / $3;"
mod_uint        "$1 = $2 % $3; if ($1 && ($2 ^ $3) < 0) $1 += $3;"
rem_uint        "$1 = $2 % $3; // Assume C99 remainder"
power_uint      "if ($3 < 0) $1 = 0; else {"
                "  xluint64 x = $2, y = $3;"
                "  $1 = 1; while (y) { if (y&1) $1 *= x; x *= x; y >>= 1; }"
                "}"
and_uint        "$1 = $2 & $3;"
or_uint         "$1 = $2 | $3;"
xor_uint        "$1 = $2 ^ $3;"
not_uint        "$1 = ~$2;"
equ_uint        "$1 = $2 == $3;"
lt_uint         "$1 = $2 < $3;"
gt_uint         "$1 = $2 > $3;"
le_uint         "$1 = $2 <= $3;"
ge_uint         "$1 = $2 >= $3;"
ne_uint         "$1 = $2 != $3;"
neg_uint        "$1 = -$2;"

zero_real        "$1 = 0.0;"
copy_real        "$1 = $2;"
adds_real        "$1 = $1 + $2;"
subs_real        "$1 = $1 - $2;"
muls_real        "$1 = $1 * $2;"
divs_real        "$1 = $1 / $2;"
add_real         "$1 = $2 + $3;"
sub_real         "$1 = $2 - $3;"
mul_real         "$1 = $2 * $3;"
div_real         "$1 = $2 / $3;"
mod_real         "$1 = fmod($2, $3); if ($1 != 0.0 && $2 * $3 < 0) $1 += $3;"
rem_real         "$1 = fmod($2, $3);"
power_uint_real  "$1 = 1.0;"
                 "{"
                 "   double x = $2; unsigned y = $3;"
                 "   while (y) { if (y & 1) $1 *= x; x *= x; y >>= 1; }"
                 "}"
power_int_real   "$1 = 1.0;"
                 "{"
                 "   xlbool negative_$3 = $3 < 0;"
                 "   double x = $2; unsigned y = negative_$3 ? -$3 : $3;"
                 "   while (y) { if (y & 1) $1 *= x; x *= x; y >>= 1; }"
                 "   if (negative_$3) $1 = 1.0 / $1;"
                 "}"
power_real_real  "$1 = pow($2, $3);"
equ_real         "$1 = $2 == $3;"
lt_real          "$1 = $2 < $3;"
gt_real          "$1 = $2 > $3;"
le_real          "$1 = $2 <= $3;"
ge_real          "$1 = $2 >= $3;"
ne_real          "$1 = $2 != $3;"
neg_real         "$1 = -$2;"

zero_bool        "$1 = 0;"
copy_bool        "$1 = $2;"
not_bool         "$1 = !$2;"
and_bool         "$1 = $2 && $3;"
or_bool          "$1 = $2 && $3;"
xor_bool         "$1 = !$2 != !$3;"

equ_bool         "$1 = $2 == $3;"
lt_bool          "$1 = $2 < $3;"
gt_bool          "$1 = $2 > $3;"
le_bool          "$1 = $2 <= $3;"
ge_bool          "$1 = $2 >= $3;"
ne_bool          "$1 = $2 != $3;"

zero_char        "$1 = 0;"
copy_char        "$1 = $2;"
equ_char         "$1 = $2 == $3;"
lt_char          "$1 = $2 < $3;"
gt_char          "$1 = $2 > $3;"
le_char          "$1 = $2 <= $3;"
ge_char          "$1 = $2 >= $3;"
ne_char          "$1 = $2 != $3;"

get_stdin        "$1 = stdin;"
get_stdout       "$1 = stdout;"
get_stderr       "$1 = stderr;"

pointer_type     "typedef $1 *$2;"
zero_ptr         "$1 = (void *) 0;"
copy_ptr         "$1 = $2;"
deref_ptr        "$= $1 (*$2)"
address_ptr      "$1 = & $2;"
new_memory       "$1 = malloc(sizeof(*$1));"
                 "*$1 = $2;"
allocate_memory  "$1 = malloc($2);"
free_memory      "if ($1) free($1);"
                 "$1 = (void *) 0;"
byte_size        "$1 = sizeof($2);"
bit_size         "$1 = sizeof($2) * 8;"
int_to_ptr       "$1 = (xlptr) $2;"
ptr_to_int       "$1 = (xlint) $2;"
uint_to_ptr      "$1 = (xlptr) $2;"
ptr_to_uint      "$1 = (xluint) $2;"
is_null          "$1 = $2 == (void *) 0;"
is_not_null      "$1 = $2 != (void *) 0;"
eq_ptr           "$1 = $2 == $3;"
ne_ptr           "$1 = $2 != $3;"

enum_type        "typedef xluint $1;"
enum_type_rep    "typedef $2 $1;"
enum_decl        "$= $2 ($1) $3"
zero_enum        "$1 = 0;"
copy_enum        "$1 = $2;"
enum_to_int      "$1 = $2;"
int_to_enum      "$1 = $2;"
equal_enum       "$1 = $2 == $3;"

array_type       "typedef struct { $1 values[$2]; } $3;"
array_index      "$= $1 ($2.values[$3])"

xl_assert        "fprintf(stderr, ""%s:%d: Assertion failure: %s\n"","
                 "        $2, $3, $1);"
                 "abort();"

// Numerical conversions
int_from_uint    "$1 = (xluint) $2;"
int8_from_uint   "$1 = (xlint8) $2;"
int16_from_uint  "$1 = (xlint16) $2;"
int32_from_uint  "$1 = (xlint32) $2;"
int64_from_uint  "$1 = (xlint64) $2;"
uint_from_uint   "$1 = (xluint) $2;"
uint8_from_uint  "$1 = (xluint8) $2;"
uint16_from_uint "$1 = (xluint16) $2;"
uint32_from_uint "$1 = (xluint32) $2;"
uint64_from_uint "$1 = (xluint64) $2;"

real_from_uint   "$1 = (xlreal) $2;"
real32_from_uint "$1 = (xlreal32) $2;"
real64_from_uint "$1 = (xlreal64) $2;"
real80_from_uint "$1 = (xlreal80) $2;"

real_from_real   "$1 = (xlreal) $2;"
real32_from_real "$1 = (xlreal32) $2;"
real64_from_real "$1 = (xlreal64) $2;"
real80_from_real "$1 = (xlreal80) $2;"

int_from_real    "$1 = (xluint) $2;"
int8_from_real   "$1 = (xlint8) $2;"
int16_from_real  "$1 = (xlint16) $2;"
int32_from_real  "$1 = (xlint32) $2;"
int64_from_real  "$1 = (xlint64) $2;"
uint_from_real   "$1 = (xluint) $2;"
uint8_from_real  "$1 = (xluint8) $2;"
uint16_from_real "$1 = (xluint16) $2;"
uint32_from_real "$1 = (xluint32) $2;"
uint64_from_real "$1 = (xluint64) $2;"

char_from_uint   "$1 = (xlchar) $2;"
int_from_char    "$1 = (xluint) $2;"
int8_from_char   "$1 = (xlint8) $2;"
int16_from_char  "$1 = (xlint16) $2;"
int32_from_char  "$1 = (xlint32) $2;"
int64_from_char  "$1 = (xlint64) $2;"
uint_from_char   "$1 = (xluint) $2;"
uint8_from_char  "$1 = (xluint8) $2;"
uint16_from_char "$1 = (xluint16) $2;"
uint32_from_char "$1 = (xluint32) $2;"
uint64_from_char "$1 = (xluint64) $2;"

bool_from_uint   "$1 = (xlbool) $2;"
bool_from_int    "$1 = (xlbool) $2;"
int_from_bool    "$1 = (xluint) $2;"
int8_from_bool   "$1 = (xlint8) $2;"
int16_from_bool  "$1 = (xlint16) $2;"
int32_from_bool  "$1 = (xlint32) $2;"
int64_from_bool  "$1 = (xlint64) $2;"
uint_from_bool   "$1 = (xluint) $2;"
uint8_from_bool  "$1 = (xluint8) $2;"
uint16_from_bool "$1 = (xluint16) $2;"
uint32_from_bool "$1 = (xluint32) $2;"
uint64_from_bool "$1 = (xluint64) $2;"

// Sized integer and real types
uint     ->     int int8 int16 int32 int64 uint8 uint16 uint32 uint64
real    ->      real32 real64 real80
