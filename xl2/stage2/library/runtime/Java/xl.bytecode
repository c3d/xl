// ****************************************************************************
//  xl.bytecode                     (C) 1992-2003 Christophe de Dinechin (ddd) 
//                                                                 XL2 project 
// ****************************************************************************
// 
//   File Description:
// 
//     Bytecode format strings
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This document is released under the GNU Genral Public License.
// See http://www.gnu.org/copyleft/gpl.html for details
// ****************************************************************************
// * File       : $RCSFile$
// * Revision   : $Revision: 299 $
// * Date       : $Date: 2007-06-14 22:36:13 +0200 (Thu, 14 Jun 2007) $
// ****************************************************************************

RUNTIME         "Java"

xcinit          "*** CANNOT USE XL2C FOR JAVA ***"
xcterm          "*** CANNOT USE XL2C FOR JAVA ***"

init            "$= xlint8      char"
                "$= xlint16     short"
                "$= xlint32     int"
                "$= xlint64     long"
                "$= xluint8     byte"
                "$= xluint16    short"
                "$= xluint32    int"
                "$= xluint64    long"
                "$= xlreal32    float"
                "$= xlreal64    double"
                "$= xlint       int"
                "$= xluint      int"
                "$= xlreal      double"
                "$= xlbool      boolean"
                "$= xlchar      char"
                "$= xltext      String$;"

                "class xlrecord{}"
                "class xlmodule{}"
                "class xlfile{}"
                "class xlptr{}"

                "class XLProgram"
                "{"

                "public static char make_char() { return (char) 0; }"
                "public static short make_short() { return (short) 0; }"
                "public static int make_int() { return 0; }"
                "public static long make_long() { return (long) 0; }"
                "public static float make_float() { return (float) 0; }"
                "public static double make_double() { return (double) 0; }"
                "public static boolean make_boolean() { return false; }"

                "public static xlmodule make_xlmodule() { return null; }"
                "public static xlrecord make_xlrecord() { return null; }"
                "public static xlfile make_xlfile() { return null; }"
                "public static xlptr make_xlptr() { return null; }"

                "public static boolean Enum_boolean(int i) { return i != 0; }"
                "public static int Enum_int(int i) { return i; }"

term            "}/*end*/"

stdin           "$1 = null;"
stdout          "$1 = null;"
stderr          "$1 = null;"
OpenFile        "$1 = new xlfile();"
CloseFile       "$1 = null;"
PutChar         "System.out.print((char) $1);"
PutReal         "System.out.printf(""%10.4g"", $1);"
PutString       "System.out.print($1);"
PutNewLine      "System.out.println();"


nop             ""
decl            ""
type            "/* Type */"
error           "/* ERROR */"
info            "/* Info: $1 */"
value           "/* Value: $1 */"
copy            "$1 = $2;"

type_decl       "public static class $1 {}"

ref_decl        "/* $1 $2; Ref */"
temp_decl       "$1 $2 = make_$1(); /* Temp */"
local_decl      "$1 $2 = make_$1(); /* Local */"
result_decl     "$1 $2 = make_$1(); /* Result */"
parm_decl       "/* $1 $2; Parm */"
global_decl     "public static $1 $2 = make_$1(); /* Global */"
field_decl      "$1 $2; /* Field */"

fn_ret0         "public static void "
fn_ret1         "public static $1 "
fn_retN_begin   "public static class Ret_$1 {${"
fn_retN_decl    "$1 $2;"
fn_retN_end     "$}} /* $1 */"
fn_retN         "public static Ret_$1 "
fn_name         "$1 "
fn_ptr_name     "$1 $=$1 int$; "
fn_begin_parms  "(${ "
fn_retN_ptr     ""
fn_parm         "$[, ]$1 $2 "
fn_end_parms    "$}) "

fn_decl_begin   "/* FNDECL: "
fn_decl_end     "; */"
fn_ptr_begin   "/* FNTYPE:  "
fn_ptr_end     "*/"

fn_body_begin   ""
fn_body         "{"
fn_entry        "function_$1: do {"
fn_exit         "} while(false);"
fn_body_end     "}"

native_Java     ""

record_begin    "public static class $1 {"
record_field    "public $2 $3 = make_$2(); /* RecF */"
record_end      "} /* $1 */"
                "public static $1 make_$1() { return new $1(); }"

field           "$= $1 $2.$3"

call_begin      ""
call_ret1_decl  "$1 $2; /* Ret */"
call_retN_decl  "Ret_$1 $2;"
call_ret1       "$2 = "
call_retN       "$2 = "
call_args_begin "$1 (${ "
call_arg_retN   ""
call_arg        "$[, ]$2 "
call_args_end   ")$};"
call_outtype    ""
call_outarg1    "$1 = $2;"
call_outargN    "$1 = $2.$3;"
call_end        ""

entry_ret1_decl "$1 $2 = make_$1(); /* Out=Ret */"
entry_retN_decl "Ret_$1 RetVal_$1 = new Ret_$1();"
entry_retN_loc  "$1 $2;"
exit_ret1       "return $1;"
exit_retN_set   "RetVal_$1.$2 = $3;"
exit_retN       "return RetVal_$1;"

goto_exit       "break function_$1;"

if              "if(!$1) { /* $2 */"
ifnot           "if($1) { /* $2 */"
ifelse          "} else { /* $1 */"
ifend           "} /* $1 */"
ifendelse       "} /* $1 */"

cases           "case_$1: do { /* $1 */"
caseskip        "break case_$1;"
casesend        "} while (false);"

case_begin      "switch($2) {"
case_label      ""
case_code       ""
case_entry      "case $2:"
case_exit       "break;"
case_def_entry  "default:"
case_def_exit   "break;"
case_end        "}"

exit_loop       "break loop_$1;"
restart_loop    "continue loop_$1;"

loop_begin      "loop_$1: while (true) {"
loop_end        "} /* while loop_$1 */"

non_loop_begin  "loop_$1: do {"
non_loop_end    "} while (false); /* loop_$1 */"

do_while_begin  "loop_$1: do {"
do_while_test   "/* Test code for $1 in $2 */"
do_while_end    "} while ($2); /* do-while $1 */"

do_until_begin  "loop_$1: do {"
do_until_test   "/* Test code for $1 in $2 */"
do_until_end    "} while (!$2); /* do-until $1 */"

while_begin     "loop_$1: while(true) {"
while_test      "if (!$2) break loop_$1;"
while_end       "} while ($2); /* do-while $1 */"

until_begin     "loop_$1: while(true) {"
until_test      "if ($2) break loop_$1;"
until_end       "} while (!$2); /* do-until $1 */"

once_decl       "static boolean $1_didRun = false;"
                "public static class $1_Once {"
                "   public synchronized boolean Ran() {"
                "       boolean result = $1_didRun;"
                "       $1_didRun = true;"
                "       return result;"
                "   }"
                "}"
once_begin      "if (!(new $1_Once().Ran())) {"
once_end        "} /* end once */"

type_info       "static public const int $1_id = $2;"

unwind_decl     ""
unwind_entry    "try { /* $1 */"
unwind_exit     "}"
unwind_catch    "catch (XLexception exception) {"
unwind_caught   "}"
unwind_end      ""


main_begin      "public static void main(String args[])"
                "{"
main_entry      "    /* Main */"
main_end        "    /* End of main */"
                "}"

xltest          "System.out.println($1);"


zero_uint       "$1 = 0;"
copy_uint       "$1 = $2;"
adds_uint       "$1 = $1 + $2;"
subs_uint       "$1 = $1 - $2;"
muls_uint       "$1 = $1 * $2;"
divs_uint       "$1 = $1 / $2;"
add_uint        "$1 = $2 + $3;"
sub_uint        "$1 = $2 - $3;"
mul_uint        "$1 = $2 * $3;"
div_uint        "$1 = $2 / $3;"
mod_uint        "$1 = $2 % $3; if ($1 != 0 && ($2 ^ $3) < 0) $1 += $3;"
rem_uint        "$1 = $2 % $3;"
power_uint      "if ($3 < 0) $1 = 0; else {"
                "  $1 = 1; while ($3) { $1 *= $2; $2 *= $2; $3 >>= 1; }"
                "}"
and_uint        "$1 = $2 & $3;"
or_uint         "$1 = $2 | $3;"
xor_uint        "$1 = $2 ^ $3;"
not_uint        "$1 = ~$2;"
equ_uint        "$1 = $2 == $3;"
lt_uint         "$1 = $2 < $3;"
gt_uint         "$1 = $2 > $3;"
le_uint         "$1 = $2 <= $3;"
ge_uint         "$1 = $2 >= $3;"
ne_uint         "$1 = $2 != $3;"
neg_uint        "$1 = -$2;"

zero_real        "$1 = 0.0;"
copy_real        "$1 = $2;"
adds_real        "$1 = $1 + $2;"
subs_real        "$1 = $1 - $2;"
muls_real        "$1 = $1 * $2;"
divs_real        "$1 = $1 / $2;"
add_real         "$1 = $2 + $3;"
sub_real         "$1 = $2 - $3;"
mul_real         "$1 = $2 * $3;"
div_real         "$1 = $2 / $3;"
mod_real         "$1 = fmod($2, $3); if ($1 != 0.0 && $2 * $3 < 0) $1 += $3;"
rem_real         "$1 = fmod($2, $3);"
power_uint_real  "$1 = 1.0; while ($3) { $1 *= $2; $2 *= $2; $3 >>= 1; }"
power_int_real   "bool negative_$3 = $3 < 0;"
                 "if (negative_$3) $3 = -$3;"
                 "$1 = 1.0; while ($3) { $1 *= $2; $2 *= $2; $3 >>= 1; }"
                 "if (negative_$3) $1 = 1.0 / $1;"
power_real_real  "$1 = pow($2, $3);"
equ_real         "$1 = $2 == $3;"
lt_real          "$1 = $2 < $3;"
gt_real          "$1 = $2 > $3;"
le_real          "$1 = $2 <= $3;"
ge_real          "$1 = $2 >= $3;"
ne_real          "$1 = $2 != $3;"
neg_real         "$1 = -$2;"

zero_bool        "$1 = false;"
copy_bool        "$1 = $2;"
not_bool         "$1 = !$2;"
and_bool         "$1 = $2 && $3;"
or_bool          "$1 = $2 && $3;"
xor_bool         "$1 = !$2 != !$3;"

equ_bool         "$1 = $2 == $3;"
lt_bool          "$1 = $2 < $3;"
gt_bool          "$1 = $2 > $3;"
le_bool          "$1 = $2 <= $3;"
ge_bool          "$1 = $2 >= $3;"
ne_bool          "$1 = $2 != $3;"

zero_char        "$1 = 0;"
copy_char        "$1 = $2;"
equ_char         "$1 = $2 == $3;"
lt_char          "$1 = $2 < $3;"
gt_char          "$1 = $2 > $3;"
le_char          "$1 = $2 <= $3;"
ge_char          "$1 = $2 >= $3;"
ne_char          "$1 = $2 != $3;"

pointer_type     "public static class $2 { public $1 Value; }"
                 "public static $2 make_$2() { return new $2(); }"
                 "public static $2 make_$2($1 Value) {"
                 "   $2 tmp = new $2();"
                 "   tmp.Value = Value;"
                 "   return tmp;"
                 "}"
                 "public static $2 Allocate($2 zero) { return new $2(); }"
                 "public static $2 New($2 zero, $1 Value) {"
                 "    return make_$2(Value);"
                 "}"
zero_ptr         "$1 = null;"
copy_ptr         "$1 = $2;"
deref_ptr        "$= $1 ($2.Value)"
address_ptr      "$1 = New($1, $2);"
alloc_ptr        "$1 = Allocate($1);"
new_ptr          "$1 = New ($1, $2);"
free_ptr         "/* free $1 */"

enum_type        "$= $1 int"
enum_type_rep    "$= $1 $2"
enum_decl        "$= $2 Enum_$1($3)"
zero_enum        "$1 = 0;"
copy_enum        "$1 = $2;"
enum_to_int      "$1 = $2;"
int_to_enum      "$1 = $2;"
equal_enum       "$1 = $2 == $3;"

array_type       "public static class $3 { public $1 Values[] = new $1[$2]; }"
                 "public static $3 make_$3() { return new $3(); }"
array_index      "$= $1 ($2.Values[$3])"

xl_assert        "System.out.println($2 + "":"" + $3 + "": "
                 "                   ""Assertion failure: "" + $1);"
                 "abort();"

// Numerical conversions
int_from_uint    "$1 = (int) $2;"
int8_from_uint   "$1 = (byte) $2;"
int16_from_uint  "$1 = (short) $2;"
int32_from_uint  "$1 = (int) $2;"
int64_from_uint  "$1 = (long) $2;"
uint_from_uint   "$1 = (int) $2;"
uint8_from_uint  "$1 = (byte) $2;"
uint16_from_uint "$1 = (short) $2;"
uint32_from_uint "$1 = (int) $2;"
uint64_from_uint "$1 = (long) $2;"

real_from_uint   "$1 = (double) $2;"
real32_from_uint "$1 = (float) $2;"
real64_from_uint "$1 = (double) $2;"


real_from_real   "$1 = (double) $2;"
real32_from_real "$1 = (float) $2;"
real64_from_real "$1 = (double) $2;"

int_from_real    "$1 = (int) $2;"
int8_from_real   "$1 = (byte) $2;"
int16_from_real  "$1 = (short) $2;"
int32_from_real  "$1 = (int) $2;"
int64_from_real  "$1 = (long) $2;"
uint_from_real   "$1 = (int) $2;"
uint8_from_real  "$1 = (byte) $2;"
uint16_from_real "$1 = (short) $2;"
uint32_from_real "$1 = (int) $2;"
uint64_from_real "$1 = (long) $2;"

char_from_uint   "$1 = (char) $2;"
int_from_char    "$1 = (int) $2;"
int8_from_char   "$1 = (byte) $2;"
int16_from_char  "$1 = (short) $2;"
int32_from_char  "$1 = (int) $2;"
int64_from_char  "$1 = (long) $2;"
uint_from_char   "$1 = (int) $2;"
uint8_from_char  "$1 = (byte) $2;"
uint16_from_char "$1 = (short) $2;"
uint32_from_char "$1 = (int) $2;"
uint64_from_char "$1 = (long) $2;"

bool_from_uint   "$1 = $2 != 0;"
bool_from_int    "$1 = $2 != 0;"
int_from_bool    "$1 = (int) ($2 ? 1 : 0);"
int8_from_bool   "$1 = (byte) ($2 ? 1 : 0);"
int16_from_bool  "$1 = (short) ($2 ? 1 : 0);"
int32_from_bool  "$1 = (int) ($2 ? 1 : 0);"
int64_from_bool  "$1 = (long) ($2 ? 1 : 0);"
uint_from_bool   "$1 = (int) ($2 ? 1 : 0);"
uint8_from_bool  "$1 = (byte) ($2 ? 1 : 0);"
uint16_from_bool "$1 = (short) ($2 ? 1 : 0);"
uint32_from_bool "$1 = (int) ($2 ? 1 : 0);"
uint64_from_bool "$1 = (long) ($2 ? 1 : 0);"

// Sized integer and real types
uint     ->     int int8 int16 int32 int64 uint8 uint16 uint32 uint64
real    ->      real32 real64
