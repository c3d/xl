// *****************************************************************************
// assert_macro_compile_time_failure.xl                               XL project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2006-2007,2015,2019, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
// Implement an 'assert' macro, using elements like position, etc
// We have one case here that is false at compile time, so...
// EXIT=2
// The message should indicate which asserts are false at compile time

// Evaluate the expression, expand the condition as text
transform (my_assert('cond')) into (my_assert_implementation(xl.value('cond'), xl.text('cond'), 'cond'))

// Check the constant cases for static asserts
transform (my_assert_implementation(true, 'message', 'source')) into (@nop)
transform (my_assert_implementation(false, 'message', 'source')) into (xl.error ("Assertion '$1' is false at compile time", 'source'))

// Otherwise, expand to a runtime test
transform (my_assert_implementation('cond', 'msg', 'src')) into (if not ('cond') then my_assertion_failure ('msg', xl.file('src'), xl.line('src')))

// Tests
procedure my_assertion_failure(msg : text; file : text; line : integer) is
    line := line - 1

procedure test_it(X : integer; Y : integer) is
    my_assert (1 > 2)
    my_assert (2 + 1 < 3)
    my_assert (X + Y < 34)

