// *****************************************************************************
// demichel.xl                                                        XL project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2007,2015,2019, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
use XL.ARRAY.BASIC
use XL.UI.CONSOLE
use XL.POINTER
use XL.POINTER.ADDRESS

use XL.SIZED_INTEGERS

generic type numeric where
    x, y : numeric
    x := x + y
    x := x - y
    x := x * y
    x := x / y

function sum (A : array) return array.item is
    for I in Range(A) loop
        result += A[I]


intArray : array[5] of integer

for I in Range(intArray) loop
    intArray[I] := I + 3
    WriteLn "intArray[", I, "]=", intArray[I]

totalOfInts : integer := sum(intArray)

WriteLn "Sum is ", totalOfInts


realArray : array[12] of real

for I in Range(realArray) loop
    realArray[I] := 3.2 / (real(I) - 2.7)
    WriteLn "realArray[", I, "]=", realArray[I]

totalOfReals : real := sum(realArray)

WriteLn "Sum is ", totalOfReals

type vec4 is record with
    glop, glap, glip, flop : real

function Add (in out X : vec4; Y : vec4) return vec4 written X += Y is
    // Could be optimized to a bytecode add_vec4 if supported on target
    X.glop += Y.glop
    X.glap += Y.glap
    X.glip += Y.glip
    X.flop += Y.flop

v4 : vec4
v4a : array[32] of vec4

v4 := sum(v4a)

