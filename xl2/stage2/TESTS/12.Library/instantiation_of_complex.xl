// *****************************************************************************
// instantiation_of_complex.xl                                        XL project
// *****************************************************************************
//
// File description:
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2006,2008,2015,2019, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************
use XL.MATH.COMPLEX
use XL.UI.CONSOLE

K : complex[real]
L : complex
M : complex [integer]

to Write (F : XL.TEXT_IO.file; Z : complex) is
    IO.Write F, "(", Z.re, ";", Z.im, ")"

to ShowNumbers(msg : text) is
    WriteLn msg
    WriteLn "K=", K
    WriteLn "L=", L
    WriteLn "M=", M


// Check direct assignments to the fields
K.re := 3.6; K.im := 5.7
L.re := 2.2; L.im := 8.4
M.re := 3; M.im := 4
ShowNumbers "Initial state"

// Check additions
K := K + K
L := L + L
M := M + M
ShowNumbers "After adding"

// Check initializers with functional notation
K := complex(2.02, 3.5)
L := complex(4.2, 7.8)
M := complex(2, 4)
ShowNumbers "After functional initializers"

K := K * K
L := L * L
M := M * M
ShowNumbers "After Multiplications"

// Check initializers with complex notation
K := 3.14 + 15.92i
L := 2.21 + 3.02i
M := 3 + 2i
ShowNumbers "After notational initializers"

K := K - K
L := L - L
M := M - M
ShowNumbers "After subtraction"

// Check initializers with explicit real conversion
K := complex(17.02)
L := complex(5.12)
M := complex(997)
ShowNumbers "After real initializers"

K := K / K
L := L / L
M := M / M
ShowNumbers "After Divide"

// Check initializers with implicit real conversion
K := 125.521
L := 5.06
M := 777
ShowNumbers "After implicit real initializers"

// Check scaling
K := K * 2.0
L := 3.1 * K
M := 2 * M
ShowNumbers "After multiplication by a real"

// Check initializers with imaginary notation
K := 0.02i
L := 5.03i
M := 26i
ShowNumbers "After imaginary initializers"

// Check divide by a real
K := K / 3.61
L := L / 2.24
M := M / 9
ShowNumbers "After divide by a real"

Copy K, Add(K,K)
Copy L, Add(L, L)
Copy M, Subtract(M, Add(M, M))
ShowNumbers "After function-style calls"
