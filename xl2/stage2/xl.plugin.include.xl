// *****************************************************************************
// xl.plugin.include.xl                                               XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of include
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2008,2015,2019, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2004, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PT = XL.PARSER.TREE
import BC = XL.BYTECODE
import ERR = XL.ERRORS
import XLT = XL.TRANSLATOR
import SYM = XL.SYMBOLS
import PR = XL.PARSER
import PC = XL.PLUGIN.COMMON

module XL.PLUGIN.INCLUDE is

    function GetInclude (filename : PT.text_tree) return PT.Tree is
    // ------------------------------------------------------------------------
    //    Return the AST corresponding to a file content if possible
    // ------------------------------------------------------------------------
        aParser  : PR.parser  := PR.Open(filename.value)
        aScanner : SC.scanner := aParser.scanner

        if not IO.valid aScanner.input then
           ERR.Error "Unable to include file : '$1'", filename
           return ERR.ErrorTree()

        tree   : BC.bytecode := PR.Parse(aParser)

        return tree

    translation Include
    // ------------------------------------------------------------------------
    //    Translations below an 'Include' pragma
    // ------------------------------------------------------------------------

        when
           'Anything'
        then
           pragma : PT.tree := SYM.GetProperty(XLT.context, "PRAGMA")
           // For debug purpose
           // ERR.Error "Pragma = '$1'", Pragma

           translate pragma
              when
                 'PragmaName' 'IncludeFile'
              where
                 IncludeFile.kind = PT.xlTEXT
              then
                 filename : IncludeFile as PT.text_tree
                 return GetInclude(filename)

              when
                 'PragmaName' 'Symbol'
              where
                 Symbol.kind = PT.xlName
              then
                 symbol_name : Symbol as PT.text_tree
                 DefineInfo : PT.Tree := PC.GetDefineInfo(symbol_name.value)

                 if DefineInfo = nil then
                    ERR.Error "Define is not defined : '$1'", Symbol
                    return ERR.ErrorTree()

                 filename : DefineInfo as PT.text_tree
                 return GetInclude(filename)

              when
                 'PragmaName' 'IncludeFile'
              then
                 ERR.Error "Unknown form for include pragma : '$1'", IncludeFile
                 return ERR.ErrorTree()

              else
                 ERR.Error "Syntax is : {Include Filename}", pragma.position
                 return ERR.ErrorTree()
