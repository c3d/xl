// *****************************************************************************
// ctrans.tbl                                                         XL project
// *****************************************************************************
//
// File description:
//
//     This describes the various operations that can be performed by
//     the translator when it "recognized" something
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2003,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

// Translation of names and symbols
NAME(character, char)
NAME(integer, int)
NAME(real, double)
NAME(boolean, bool)
NAME(main, XLMain)

SYMBOL(":=", "=")
SYMBOL("=", "==")
SYMBOL("<>", "!=")
SYMBOL("and", "&&")
SYMBOL("or", "||")
SYMBOL("xor", "^")
SYMBOL("bitwisenot", "~")
SYMBOL("nil", "0")
PREFIX(in)
PREFIX(out)

BINARY(".", scope)
BINARY("in", iterator)

// Data types
SYMBOL("string", "std::vector")
SYMBOL("text", "::text")
INFIX(of)
INFIX(to)
PREFIX(map)


// Declarations
PREFIX(import)
PREFIX(module)
BINARY(":", declaration)
BINARY("\n", sequence)
BINARY(";", sequence)
BINARY(",", list)
BINARY("..", range)
INFIX(is)
INFIX(return)
PREFIX(function)
PREFIX(procedure)
UNARY("to", procedure)
PREFIX(type)
PREFIX(record)
PREFIX(enumeration)
UNARY("enum", enumeration)

// Statements
INFIX(then)
INFIX(else)
PREFIX(loop)
INFIX(loop)
PREFIX(exit)
PREFIX(for)
PREFIX(translate)


#undef NAME
#undef SYMBOL
#undef INFIX
#undef PREFIX
#undef UNARY
#undef BINARY
