// *****************************************************************************
// xl.parser.xl                                                       XL project
// *****************************************************************************
//
// File description:
//
//     The basic XL0 parser
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2003-2005,2015,2018-2019, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PT = XL.PARSER.TREE
import SC = XL.SCANNER
import ASCII = XL.TEXT_IO.ENCODING.ASCII
import ERR = XL.ERRORS

module XL.PARSER is

    function NewParser(name : text) return parser is
    // ------------------------------------------------------------------------
    //   Create a new parser
    // ------------------------------------------------------------------------
        S : SC.scanner := SC.NewScanner(name)
        result.scanner := S
        ReadSyntaxFile result, "xl.syntax"
        S.blocks := result.blocks


    type pending is record with
    // ------------------------------------------------------------------------
    //    Pending expression while parsing
    // ------------------------------------------------------------------------
        opcode             : text
        argument           : PT.tree
        priority           : integer


    function Parse(P : parser) return PT.tree is
    // ------------------------------------------------------------------------
    //   The top-level parsing function
    // ------------------------------------------------------------------------
        return Parse(P, "")


    function NextToken(P : parser) return SC.token is
    // ------------------------------------------------------------------------
    //   Convenience function
    // ------------------------------------------------------------------------
        return SC.NextToken(P.scanner)


    function IsComment(P: parser; sym: text; out eoc: text) return boolean is
    // ------------------------------------------------------------------------
    //   Check if a symbol represents a comment, if so return end of comment
    // ------------------------------------------------------------------------
        if count (P.comments, sym) > 0 then
            eoc := P.comments[sym]
            return true
        return false


    function IsBlock(P: parser; sym: text; out eob: text) return boolean is
    // ------------------------------------------------------------------------
    //   Check if a symbol represents a comment, if so return end of comment
    // ------------------------------------------------------------------------
        if count (P.blocks, sym) > 0 then
            eob := P.blocks[sym]
            return true
        return false


    function IsBlock(P: parser; sym: character; out eob: text) return boolean is
    // ------------------------------------------------------------------------
    //   Check if a symbol represents a comment, if so return end of comment
    // ------------------------------------------------------------------------
        return IsBlock(P, text("") + sym, eob)


    function GetPrefixPriority(P: parser; sym : text) return integer is
    // ------------------------------------------------------------------------
    //   Return the prefix priority or parser's default priority
    // ------------------------------------------------------------------------
        if count(P.prefix_priority, sym) > 0 then
            return P.prefix_priority[sym]
        return P.default_priority


    function GetInfixPriority(P: parser; sym : text) return integer is
    // ------------------------------------------------------------------------
    //   Return the infix priority or parser's default priority
    // ------------------------------------------------------------------------
        if count(P.infix_priority, sym) > 0 then
            return P.infix_priority[sym]
        return P.default_priority


    function Parse(P : parser; closing : text) return PT.tree is
    // ------------------------------------------------------------------------
    //   The actual parsing function
    // ------------------------------------------------------------------------
    // XL parsing is not very difficult, but a bit unusual, because it is based
    // solely on dynamic information and not, for instance, on keywords.
    // Consider the following cases, where p is "prefix-op" and i is "infix-op"
    //     Write A
    //  Parses as p(Write,A).
    //     A and B
    //  Parses as i(and,A,B) if 'and' has a priority,
    //         as p(A,p(and,B)) otherwise
    //  Write -A,B
    //  This parses as (Write-A),B since "-" has a priority.
    //  I wish I could fix that one...
    //  The correct XL syntax is: Write (-A),B
    // We hope that semantic will catch such a case later and let us know...

        comment_end             : text
        left                    : PT.tree
        right                   : PT.tree
        infix                   : text
        name                    : text
        spelling                : text
        prefix                  : text          := ""
        tok                     : SC.token
        done                    : boolean       := false
        block_opening           : text
        block_closing           : text
        default_priority        : integer       := P.default_priority
        function_priority       : integer       := P.function_priority
        statement_priority      : integer       := P.statement_priority
        result_priority         : integer       := default_priority
        prefix_priority         : integer
        infix_priority          : integer
        paren_priority          : integer       := GetInfixPriority(P, closing)
        stack                   : string of pending
        is_expression           : boolean       := true
        new_statement           : boolean       := true
        pending_token           : SC.token      := SC.tokNONE
        S                       : SC.scanner    := P.scanner
        line_continuation       : boolean       := false
        extra_indents           : integer       := 0

        // When inside a () block, we are in 'expression' mode right away
        if closing <> "" and paren_priority > statement_priority then
            new_statement := false
            is_expression := true

        while not done loop
            // If no token pending, scan one
            if pending_token = SC.tokNONE then
                right := nil
                prefix_priority := default_priority
                infix_priority := default_priority
                tok := NextToken(P)
            else if pending_token = SC.tokNEWLINE then
                // We have a pending new-line:

                // Skip actual token if it is also a new-line
                tok := NextToken(P)
                if tok = SC.tokNEWLINE then
                    restart

                // Check names and symbols, skip comments
                else if tok = SC.tokSYMBOL or tok = SC.tokNAME then
                    name := S.token
                    if IsComment(P, name, comment_end) then
                        // Got a comment with a pending new-line, skip it
                        SC.Comment S, comment_end
                        if comment_end = ASCII.CR then
                            restart

                    // Check if we got something like 'else'
                    if GetInfixPriority(P, name) >= statement_priority then
                        // Otherwise, delay current token and process
                        // the 'fake' new-line
                        pending_token := tok
                        tok := SC.tokNEWLINE
                    right := nil
                    prefix_priority := default_priority
                    infix_priority := default_priority

                // Something that is itself a new-line parses directly
                else if tok = SC.tokINDENT or tok = SC.tokEOF then
                    pending_token := SC.tokNONE
                    right := nil
                    prefix_priority := default_priority
                    infix_priority := default_priority

                // Something else is delayed until after we deal with new-line
                else
                    pending_token := tok
                    tok := SC.tokNEWLINE
                    right := nil
                    prefix_priority := default_priority
                    infix_priority := default_priority

            // Other pending tokens just fall through
            else
                tok := pending_token
                pending_token := SC.tokNONE

            // Check if we are dealing with a trailing operator
            if line_continuation then
                if tok = SC.tokINDENT then
                    tok := SC.tokNEWLINE
                    extra_indents += 1
            else if extra_indents > 0 then
                if tok = SC.tokUNINDENT then
                    extra_indents -= 1
                    tok := SC.tokNEWLINE

            // Check token result
            if tok = SC.tokEOF or tok = SC.tokERROR then
                done := true
            else if tok = SC.tokNATURAL then
                right := PT.NewNatural(S.integer_value)
                prefix_priority := function_priority
            else if tok = SC.tokREAL then
                right := PT.NewReal(S.real_value)
                prefix_priority := function_priority
            else if tok = SC.tokTEXT then
                right := PT.NewText(S.string_value, '"')
                prefix_priority := function_priority
            else if tok = SC.tokQUOTE then
                right := PT.NewText(S.string_value, '''')
                prefix_priority := function_priority
                if result = nil and new_statement then
                    is_expression := false
            else if tok = SC.tokNAME or tok = SC.tokSYMBOL then
                name := S.token
                spelling := S.string_value
                if IsComment(P, name, comment_end) then
                    SC.Comment S, comment_end
                    if comment_end = ASCII.CR then
                        pending_token := SC.tokNEWLINE
                    restart

                else if not result then
                    // If this is the very first thing we see
                    prefix_priority := GetPrefixPriority(P, name)
                    right := PT.NewName(spelling)
                    if prefix_priority = default_priority then
                        prefix_priority := function_priority
                    if new_statement and tok = SC.tokNAME then
                        is_expression := false
                else if left <> nil then
                    // This is the right of an infix operator
                    // If we have "A and not B", where "not" has
                    // higher priority than "and", we want to
                    // parse tis as "A and (not B)" rather than as
                    // "(A and not) B"
                    prefix_priority := GetPrefixPriority (P, name)
                    right := PT.NewName(spelling)
                    if prefix_priority = default_priority then
                        prefix_priority := function_priority
                else
                    // Complicated case: need to discriminate
                    // infix and prefix
                    infix_priority := GetInfixPriority (P, name)
                    if infix_priority <> default_priority then
                        // We got an infix
                        left := result
                        infix := spelling
                    else
                        // No priority : take this as a prefix by default
                        prefix_priority := GetPrefixPriority(P, name)
                        right := PT.NewName(spelling)
                        if prefix_priority = default_priority then
                            prefix_priority := function_priority
                            if new_statement and tok = SC.tokNAME then
                                is_expression := false

            else if tok = SC.tokNEWLINE then
                if pending_token = SC.tokNONE then
                    tok := SC.NextToken S
                    if tok = SC.tokSYMBOL or tok = SC.tokNAME then
                        if IsComment(P, S.token, comment_end) then
                            // Followed by a comment
                            // Can't decide just yet what indent we have
                            // Skip the comment
                            SC.Comment S, comment_end
                            restart
                    // Otherwise, we'll deal with this other token next
                    pending_token := tok

                // Consider new-line as an infix operator
                infix := ASCII.CR
                name := infix
                infix_priority := GetInfixPriority (P, infix)
                left := result

            else if tok = SC.tokPARCLOSE then
                // Check for mismatched parentheses here
                if S.token <> closing then
                    ERR.Report ERR.E_ParseMismatchParen, S.file, S.line
                    IO.WriteLn "Mismatched parenthese, got '", S.token, "', expected '", closing, "'"
                done := true

            else if tok = SC.tokUNINDENT then
                // Check for mismatched parentheses here
                if closing <> UNINDENT_MARKER then
                    ERR.Report ERR.E_ParseMismatchParen, S.file, S.line
                    IO.WriteLn "Mismatched parenthese, got unindent, expected '", closing, "'"
                done := true

            else if tok = SC.tokPAROPEN or tok = SC.tokINDENT then
                old_indent : integer
                if tok = SC.tokPAROPEN then
                    block_opening := S.token
                    block_closing := S.blocks[block_opening]
                    if  block_closing = "" then
                        ERR.Report ERR.E_ParseMismatchParen, S.file, S.line
                        IO.WriteLn "Mismatched parenthese (internal)"
                    old_indent := SC.OpenParen(S)
                else
                    block_opening := INDENT_MARKER
                    block_closing := UNINDENT_MARKER

                name := block_opening
                paren_priority := GetInfixPriority (P, name)

                // Just like for names, parse the contents of the parentheses
                prefix_priority := paren_priority
                infix_priority := default_priority
                right := Parse(P, block_closing)
                if tok = SC.tokPAROPEN then SC.CloseParen S, old_indent
                if right = nil then
                    right := PT.NewName ("")
                right := PT.NewBlock(right, block_opening, block_closing)

                if tok = SC.tokINDENT then
                    // Unindent to be seen as unindent followed by new-line
                    // so that new-line operator combines lines
                    pending_token := SC.tokNEWLINE

            else
                IO.writeln "Invalid token: ", tok, " (", S.token, ")"
                assert not "Invalid token"

            // Check what is the current result
            line_continuation := false
            if result = nil then

                // First thing we parse
                result := right
                result_priority := prefix_priority

                // We are now in the middle of an expression
                if result and result_priority >= statement_priority then
                    new_statement := false

            else if left <> nil then

                // Check if we had a statement separator
                if infix_priority < statement_priority then
                    new_statement := true
                    is_expression := true

                // We got left and infix-op, we are now looking for right
                // If we have 'A and not B', where 'not' has higher priority
                // than 'and', we want to finish parsing 'not B' first, rather
                // than seeing this as '(A and not) B'.
                if prefix_priority <> default_priority and prefix_priority > infix_priority then
                    // Push "A and" in the above example
                    T : pending
                    T.opcode := infix
                    T.argument := left
                    T.priority := infix_priority
                    stack += T
                    if infix_priority > default_priority then
                        line_continuation := true
                    left := nil

                    // Start over with "not"
                    result := right
                    result_priority := prefix_priority

                else
                    while size(stack) loop
                        prev : pending := back(stack)

                        // Check priorities compared to stack
                        // A+B*C we got '*', keep 'A+..." on stack
                        // Odd priorities are made right-associative by
                        // clearing the low-bit in the test below
                        if not done then
                            exit if prev.priority <> default_priority and infix_priority > (prev.priority & (bitwise_not 1))
                        if prev.opcode = prefix then
                            left := PT.NewPrefix(prev.argument, left)
                        else
                            left := PT.NewInfix(prev.opcode, prev.argument, left)
                        pop_back stack

                    // Now we want to restart with the rightmost operand
                    if done then
                        // End of text: the result is what we just got
                        result := left

                    else
                        // Something like A+B+C, just got second +
                        T : pending
                        T.opcode := infix
                        T.argument := left
                        T.priority := infix_priority
                        stack += T
                        if infix_priority > default_priority then
                            line_continuation := true
                        result := nil

                    left := nil

            else if right <> nil then

                // Check if we had a low-priority prefix (e.g. pragmas)
                if prefix_priority < statement_priority then
                    new_statement := true
                    is_expression := true

                // Check priorities for "A.B x,y" -> "(A.B) (x,y)"
                // Make odd priorities right-associative by clearing low bit
                // in previous priority
                if prefix_priority <= result_priority then
                    while size(stack) loop
                        prev : pending := back(stack)
                        if not done then
                            exit if prev.priority <> default_priority and result_priority > (prev.priority & (bitwise_not 1))

                        if prev.opcode = prefix then
                            result := PT.NewPrefix(prev.argument, result)
                        else
                            result := PT.NewInfix(prev.opcode, prev.argument, result)
                        pop_back stack

                // Check if new statement
                T : pending
                if not is_expression then
                    if right.kind <> PT.xlBLOCK then
                        if size(stack) = 0 then
                            result_priority := statement_priority
                        else
                            T := back(stack)
                            if T.priority < statement_priority then
                                result_priority := statement_priority

                // Push a recognized prefix op
                T.opcode := prefix
                T.argument := result
                T.priority := result_priority
                stack += T
                result := right
                result_priority := prefix_priority
        // end "while not done"

        if size(stack) then
            if result = nil then
                last : pending := back(stack)
                if last.opcode <> ASCII.CR then
                    ERR.Report ERR.E_ParseTrailingOp, S.file, S.line
                result := last.argument
                pop_back stack

            // Check if some stuff remains on the stack
            while size(stack) loop
                prev : pending := back(stack)
                if prev.opcode = prefix then
                    result := PT.NewPrefix(prev.argument, result)
                else
                    result := PT.NewInfix(prev.opcode, prev.argument, result)
                pop_back stack


    procedure ReadSyntaxFile (P : PR.parser; syntax : text) is
    // ------------------------------------------------------------------------
    //   Read the xl.syntax file to get precedences
    // ------------------------------------------------------------------------
        type state is enumeration
            inUnknown, inInfix, inPrefix, inPostfix,
            inComment, inCommentDef,
            inText, inTextDef,
            inBlock, inBlockDef

        txt      : text
        entry    : text
        tok      : SC.token
        priority : integer    := 0
        S        : SC.scanner := SC.NewScanner(syntax)
        stxst    : state      := inUnknown

        loop
            tok := SC.NextToken(S)
            exit if tok = SC.tokEOF

            if tok = SC.tokNATURAL then
                priority := S.integer_value

            else if tok = SC.tokNAME or tok = SC.tokSYMBOL or tok = SC.tokTEXT or tok = SC.tokQUOTE then
                txt := S.string_value
                if txt = "NEWLINE" then
                    txt := ASCII.CR
                else if txt = "INDENT" then
                    txt := INDENT_MARKER
                else if txt = "UNINDENT" then
                    txt := UNINDENT_MARKER

                if txt = "INFIX" then
                    stxst := inInfix
                else if txt = "PREFIX" then
                    stxst := inPrefix
                else if txt = "POSTFIX" then
                    stxst := inPostfix
                else if txt = "BLOCK" then
                    stxst := inBlock
                else if txt = "COMMENT" then
                    stxst := inComment
                else if txt = "TEXT" then
                    stxst := inText
                else if txt = "STATEMENT" then
                    P.statement_priority := priority
                else if txt = "FUNCTION" then
                    P.function_priority := priority
                else if txt = "DEFAULT" then
                    P.default_priority := priority
                else if stxst = inPrefix then
                    P.prefix_priority[txt] := priority
                else if stxst = inPostfix then
                    // Ignored in bootstrap compiler
                    priority := priority + 0
                else if stxst = inInfix then
                    P.infix_priority[txt] := priority
                else if stxst = inComment then
                    entry := txt
                    stxst := inCommentDef
                else if stxst = inCommentDef then
                    P.comments[entry] := txt
                    stxst := inComment
                else if stxst = inText then
                    entry := txt
                    stxst := inTextDef
                else if stxst = inTextDef then
                    P.text_delimiters[entry] := txt
                    stxst := inText
                else if stxst = inBlock then
                    entry := txt
                    stxst := inBlockDef
                    P.infix_priority[entry] := priority
                else if stxst = inBlockDef then
                    P.infix_priority[txt] := priority
                    P.blocks[entry] := txt
                    P.blocks[txt] := ""
                    stxst := inBlock
