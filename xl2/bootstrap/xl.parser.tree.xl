// *****************************************************************************
// xl.parser.tree.xl                                                  XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of the parser tree
//
//     This file actually only provides debug support
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2003-2004,2010,2015,2018-2020, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2004, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import PT = XL.PARSER.TREE
import IO = XL.TEXT_IO
import ASCII = XL.TEXT_IO.ENCODING.ASCII


module XL.PARSER.TREE is
// ----------------------------------------------------------------------------
//    Implementation of parse tree functions
// ----------------------------------------------------------------------------

    function XLNormalize (name : text) return text is
    // ------------------------------------------------------------------------
    //    Return the normalized name (lower-case, no underscores)
    // ------------------------------------------------------------------------
        result := ""
        Max : integer := length(name)
        I : integer
        for I in 0..Max-1 loop
            C : character := name[I]
            if C <> '_' then
                result += ASCII.tolower C


    function Matches (test : PT.tree; ref : PT.tree; in out arg : tree_map) return integer is
    // ------------------------------------------------------------------------
    //   Check if the test tree matches the reference tree, return score
    // ------------------------------------------------------------------------

        if verbose then
            IO.WriteLn "/* Matching: ", test, " */"
            IO.WriteLn "/* With: ", ref, " */"

        // Check if the reference is a wildcard like 'A'
        // If so, check if we saw the same name, and then check compatibility
        // If not, check
        if ref.kind = PT.xlWILDCARD then
            R : PT.wildcard_tree := PT.wildcard_tree(ref)

            // Did we see this name already?
            if count(arg, R.name) > 0 then
                empty_args : tree_map
                result := Matches(test, arg[R.name], empty_args)
                if result > 0 then
                    return result + 1
                if verbose then IO.Writeln "/* Failed wildcard */"
                return 0

            // We did not see the name: assign it
            arg[R.name] := test
            return 1

        // If this is not a wildcard, then it must have the same kind
        if test.kind <> ref.kind then
            if verbose then IO.Writeln "/* Failed kind */"
            return 0

        // For each kind of atom, check and return 0 or 1
        if test.kind = PT.xlNATURAL then
            T : PT.integer_tree := PT.integer_tree(test)
            R : PT.integer_tree := PT.integer_tree(ref)
            if T.value = R.value then
                return 1
            if verbose then IO.Writeln "/* Failed intval */"
            return 0

        if test.kind = PT.xlREAL then
            T : PT.real_tree := PT.real_tree(test)
            R : PT.real_tree := PT.real_tree(ref)
            if T.value = R.value then
                return 1
            if verbose then IO.Writeln "/* Failed realval */"
            return 0

        if test.kind = PT.xlTEXT then
            T : PT.text_tree := PT.text_tree(test)
            R : PT.text_tree := PT.text_tree(ref)
            if T.value = R.value and T.quote = R.quote then
                return 1
            if verbose then IO.Writeln "/* Failed textval */"
            return 0

        if test.kind = PT.xlNAME then
            T : PT.name_tree := PT.name_tree(test)
            R : PT.name_tree := PT.name_tree(ref)
            if XLNormalize(T.value) = XLNormalize(R.value) then
                return 1
            if verbose then IO.Writeln "/* Failed nameval */"
            return 0

        // For non-atoms, check recursively
        if test.kind = PT.xlBLOCK then
            T : PT.block_tree := PT.block_tree(test)
            R : PT.block_tree := PT.block_tree(ref)
            if T.opening = R.opening and T.closing = R.closing then
                result := Matches(T.child, R.child, arg)
                if result > 0 then
                    return result + 1
            if verbose then
                IO.Writeln "/* Failed block */"
                IO.Writeln "/* o=", T.opening = R.opening, " c=", T.closing = R.closing, " */"
                IO.Writeln "/* r=", result, " */"
            return 0

        if test.kind = PT.xlPREFIX then
            T : PT.prefix_tree := PT.prefix_tree(test)
            R : PT.prefix_tree := PT.prefix_tree(ref)
            l_result : integer := Matches(T.left, R.left, arg)
            if l_result > 0 then
                r_result : integer := Matches(T.right, R.right, arg)
                if r_result > 0 then
                    return l_result + r_result
            if verbose then IO.Writeln "/* Failed prefix */"
            return 0

        if test.kind = PT.xlINFIX then
            T : PT.infix_tree := PT.infix_tree(test)
            R : PT.infix_tree := PT.infix_tree(ref)
            if T.name = R.name then
                l_result : integer := Matches(T.left, R.left, arg)
                if l_result > 0 then
                    r_result : integer := Matches(T.right, R.right, arg)
                    if r_result > 0 then
                        return l_result + r_result
                    else if verbose then
                        IO.WriteLn "/* Failed left */"
                else if verbose then
                    IO.WriteLn "/* Failed left */"
            else if verbose then
                IO.WriteLn "/* Failed name ", T.name, " <> ", R.name, " */"
            if verbose then IO.Writeln "/* Failed infix */"
            return 0


module XL.TEXT_IO with
// ----------------------------------------------------------------------------
//   Implements an extension of the TEXT_IO module for parse trees
// ----------------------------------------------------------------------------

    // Pseudo type to control indentation
    type indent_pseudo
    type indent_control is access to indent_pseudo
    indent : indent_control := indent_control(3)
    unindent : indent_control := indent_control(-3)
    newline : indent_control := indent_control(0)
    current_tree_indent : integer := 0

    // Pseudo-type to control debug mode
    type debug_pseudo
    type debug_control is access to debug_pseudo
    show_debug : debug_control := debug_controL(true)
    hide_debug : debug_control := debug_control(false)
    current_tree_debug : boolean := false


    procedure write(direction : indent_control) is
    // ------------------------------------------------------------------------
    //    Write the appropriate amount of indentation
    // ------------------------------------------------------------------------
        I : integer
        delta : integer := integer(long(direction))

        current_tree_indent += delta
        IO.writeln ()
        for I in 1..current_tree_indent loop
            IO.write ' '


    procedure write(do_debug : debug_control) is
    // ------------------------------------------------------------------------
    //    Write the appropriate amount of indentation
    // ------------------------------------------------------------------------
        current_tree_debug := boolean(do_debug)


    procedure write(what : PT.tree) is
    // ------------------------------------------------------------------------
    //    For debugging purpose, write a tree
    // ------------------------------------------------------------------------
        if what.kind = PT.xlNATURAL then
            T : PT.integer_tree := PT.integer_tree(what)
            IO.write T.value
        else if what.kind = PT.xlREAL then
            T : PT.real_tree := PT.real_tree(what)
            IO.write T.value
        else if what.kind = PT.xlTEXT then
            T : PT.text_tree := PT.text_tree(what)
            IO.write T.quote, T.value, T.quote
        else if what.kind = PT.xlNAME then
            T : PT.name_tree := PT.name_tree(what)
            IO.write T.value
        else if what.kind = PT.xlWILDCARD then
            T : PT.wildcard_tree := PT.wildcard_tree(what)
            IO.write "WILDCARD(", T.name, ")"
        else if what.kind = PT.xlBLOCK then
            T : PT.block_tree := PT.block_tree(what)
            if ASCII.is_line_break(T.closing) then
                if current_tree_debug then
                    IO.write "{BL ", indent, T.child, unindent, " BL}"
                else
                    IO.write indent, T.child, unindent
            else
                IO.write T.opening, T.child, T.closing
        else if what.kind = PT.xlPREFIX then
            T : PT.prefix_tree := PT.prefix_tree(what)
            if current_tree_debug then
                IO.write '[', T.left, ' ', T.right, ']'
            else
                IO.write T.left, ' ', T.right
        else if what.kind = PT.xlINFIX then
            T : PT.infix_tree := PT.infix_tree(what)
            if T.name = ASCII.CR then
                IO.write T.left, newline, T.right
            else if current_tree_debug then
                IO.write '(', T.left, ' ', T.name, ' ', T.right, ')'
            else
                IO.write T.left, ' ', T.name, ' ', T.right



procedure Debug (tree : PT.tree) is
// ----------------------------------------------------------------------------
//    This function is here to be invoked from the debugger
// ----------------------------------------------------------------------------
    IO.writeln IO.show_debug, tree
