// *****************************************************************************
// xl.scanner.xl                                                      XL project
// *****************************************************************************
//
// File description:
//
//     The scanner for the bootstrap compiler
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2003-2004,2015,2019-2020, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2004, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// (C) 2003, Juan Carlos Arevalo Baeza <thejcab@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import IO = XL.TEXT_IO
import ERR = XL.ERRORS
import ASCII = XL.TEXT_IO.ENCODING.ASCII


module XL.SCANNER is

    function DigitValue(digit : character) return integer is
    // ------------------------------------------------------------------------
    //   Return the value of the given character
    // ------------------------------------------------------------------------
    // This implementation is actually specific to the ASCII encoding
        if digit >= '0' and digit <= '9' then
            return integer digit - integer '0'
        if digit >= 'A' and digit <= 'Z' then
            return integer digit - integer 'A' + 10
        if digit >= 'a' and digit <= 'z' then
            return integer digit - integer 'a' + 10
        return 999



    function NewScanner(file_name : text) return scanner is
    // ------------------------------------------------------------------------
    //   Create and initialize a new scanner
    // ------------------------------------------------------------------------
        result.file := file_name
        result.line := 1
        result.input := 0
        result.token := ""
        result.string_value := ""
        result.real_value := 0.0
        result.integer_value := 0
        result.indent_char := character(0)
        result.checking_indent := false
        result.setting_indent := false
        result.column := 0
        result.indent := 0

        result.input := IO.open(file_name)
        result.indents += 0


    procedure NextChar (S : scanner; in out C : character) is
    // ------------------------------------------------------------------------
    //   Read the next character
    // ------------------------------------------------------------------------
        S.token += C
        S.string_value += C
        IO.read S.input, C


    procedure NextLowerChar (S : scanner; in out C : character) is
    // ------------------------------------------------------------------------
    //   Read the next character
    // ------------------------------------------------------------------------
        S.token += ASCII.tolower(C)
        S.string_value += C
        IO.read S.input, C


    procedure IgnoreChar (S : scanner; in out C : character) is
    // ------------------------------------------------------------------------
    //   Read the next character
    // ------------------------------------------------------------------------
        S.string_value += C
        IO.read S.input, C


    function NextToken(S : scanner) return token is
    // ------------------------------------------------------------------------
    //    Parse the file until we get a complete token
    // ------------------------------------------------------------------------
        S.token := ""
        S.string_value := ""
        S.integer_value := 0
        S.real_value := 0.0
        S.base := 0

        // Check if file was opened correctly, or if we are at end of file
        if not IO.valid S.input then
            return tokEOF

        // Check if we unindented far enough for multiple indents
        if back S.indents > S.indent then
            pop_back S.indents
            return tokUNINDENT

        // Read next character
        C : character
        IO.Read S.input, C

        // Skip spaces and check indentation
        while ASCII.isspace C and IO.valid S.input loop
            if ASCII.is_line_break C then
                // New line: start counting indentation
                S.line += 1
                S.checking_indent := true
                S.column := 0
            else if S.checking_indent then
                // Can't mix tabs and spaces
                if ASCII.is_space C then
                    if S.indent_char = 0 then
                        S.indent_char := C
                    else if S.indent_char <> C then
                        ERR.Report ERR.E_ScanMixedIndent, S.file, S.line
                    S.column += 1
            // Keep looking for more spaces
            IO.Read S.input, C

        // Stop counting indentation
        if S.checking_indent then
            IO.PutBack S.input, C
            S.checking_indent := false
            if S.setting_indent then
                // We set a new indent, for instance after opening paren
                S.indent := S.column
                S.setting_indent := false
                return tokNEWLINE
            else if S.column > S.indent then
                // Strictly deeper indent
                S.indent := S.column
                S.indents += S.indent
                return tokINDENT
            else if S.column < S.indent then
                // Unindenting: remove rightmost indent level
                pop_back S.indents
                S.indent := S.column

                // If we unindented, but did not go as far as the
                // most recent indent, report inconsistency
                if back S.indents < S.column then
                    ERR.Report ERR.E_ScanInconsistent, S.file, S.line
                    return tokERROR

                // Otherwise, report that we undindented
                // We may report multiple tokUNINDENT if we unindented deep
                return tokUNINDENT

            else
                // Exactly the same indent level as before
                return tokNEWLINE

        // Report end of file if that's what we've got
        if not IO.valid S.input then
            return tokEOF

        // Look for numbers
        if ASCII.is_digit C then
            floating_point : boolean := false
            based_number : boolean := false

            S.base := 10
            S.integer_value := 0

            // Take integral part or base
            loop
                while IO.valid S.input and DigitValue C < S.base loop
                    S.integer_value := S.base * S.integer_value + DigitValue C
                    NextChar S, C

                    // Skip a single underscore
                    if C = '_' then
                        IgnoreChar S, C
                        if DigitValue(C) >= S.base then
                            ERR.Report ERR.E_ScanDoubleUnder, S.file, S.line

                    // Check if this is a based number
                    if C = '#' and not based_number then
                        S.base := S.integer_value
                        if S.base < 2 or S.base > 36 then
                            S.base := 36
                            ERR.Report ERR.E_ScanInvalidBase, S.file, S.line
                        NextChar S, C
                        S.integer_value := 0
                        based_number := true
                    else
                        based_number := false

                exit if not based_number or not IO.valid S.input

            // Check for fractional part
            S.real_value := S.integer_value
            if C = '.' then
                IO.Read S.input, C
                if DigitValue C >= S.base then
                    // This is something else following an integer
                    // For instance 1..3
                    IO.PutBack S.input, C
                    IO.PutBack S.input, '.'
                    return tokNATURAL
                else
                    S.token += '.'
                    S.string_value += '.'
                    floating_point := true

                    comma_position : real := 1.0
                    while IO.valid S.input and DigitValue C < S.base loop
                        comma_position /= S.base
                        S.real_value += comma_position * DigitValue C
                        NextChar S, C
                        if C = '_' then
                            IgnoreChar S, C
                            if DigitValue(C) >= S.base then
                                ERR.Report ERR.E_ScanDoubleUnder, S.file,S.line

            // Check if we have a second '#' at end of based number
            if C = '#' then
                NextChar S, C

            // Check for the exponent
            if C = 'e' or C = 'E' then
                NextChar S, C

                exponent : integer := 0
                negative_exponent : boolean := false

                // Exponent sign
                if C = '+' then
                    NextChar S, C
                else if C = '-' then
                    NextChar S, C
                    negative_exponent := true
                    floating_point := true

                // Exponent value
                while IO.valid S.input and DigitValue C < 10 loop
                    exponent := 10 * exponent + DigitValue C
                    NextChar S, C
                    if C = '_' then
                        IgnoreChar S, C
                        if DigitValue C >= 10 then
                           ERR.Report ERR.E_ScanDoubleUnder, S.file, S.line

                // Compute base ^ exponent
                exponent_value : real := 1.0
                multiplier : real := S.base

                while exponent <> 0 loop
                    if (exponent & 1) <> 0 then
                        exponent_value *= multiplier
                    exponent /= 2
                    multiplier *= multiplier

                // Compute actual value
                if negative_exponent then
                    S.real_value /= exponent_value
                else
                    S.real_value *= exponent_value
                S.integer_value := integer S.real_value

            // Return the last token
            IO.PutBack S.input, C
            if floating_point then
                return tokREAL
            return tokNATURAL
        // End of numbers

        // Look for names
        if ASCII.is_letter C then
            while IO.valid S.input and ASCII.is_letter_or_digit C loop
                NextLowerChar S, C
                if C = '_' then
                    IgnoreChar S, C
                    if not ASCII.is_letter_or_digit C then
                        ERR.Report ERR.E_ScanDoubleUnder, S.file, S.line
            IO.PutBack S.input, C
            return tokNAME

        // Look for strings
        if ASCII.is_quote C then
            eos : character := C
            S.token := C
            IO.Read S.input, C
            while IO.valid S.input loop
                // Check end of string, but keep double quotes in
                if C = eos then
                    S.token += C
                    IO.Read S.input, C
                    if C <> eos then
                        IO.PutBack S.input, C
                        if eos = '"' then
                            return tokTEXT
                        else
                            return tokQUOTE

                if not IO.Valid S.input or ASCII.is_line_break(C) then
                    ERR.Report ERR.E_ScanStringEOL, S.file, S.line
                    return tokERROR
                NextChar S, C

        // Look for parentheses
        blk : text := text("") + C
        if count(S.blocks, blk) > 0 then
            S.string_value := C
            S.token := C
            if S.blocks[blk] <> "" then
                return tokPAROPEN
            return tokPARCLOSE

        // Other symbols
        while IO.valid S.input and ASCII.is_punctuation C loop
            exit if ASCII.is_quote C
            exit if count(S.blocks, text("") + C) > 0
            NextChar S, C
        IO.PutBack S.input, C
        return tokSYMBOL


    function Comment(S : scanner; EndOfComment : text) return text is
    // ------------------------------------------------------------------------
    //   Scan a comment until the given end
    // ------------------------------------------------------------------------
        max     : integer   := length EndOfComment
        index   : integer   := 0
        c       : character := 0
        comment : text      := ""

        while IO.valid S.input and index < max loop
            IO.Read S.input, C

            if ASCII.is_line_break C then
                // New-line: start counting indentation
                S.line += 1
                S.checking_indent := true
                S.column := 0
            else if S.checking_indent then
                if ASCII.is_space C then
                    S.column += 1
                else
                    S.checking_indent := false

            if C = EndOfComment[index] then
                index += 1
            else
                index := 0

            comment += C

        return comment


    function OpenParen(S : scanner) return integer is
    // ------------------------------------------------------------------------
    //   Opening some parenthese: remember the setting_indent value
    // ------------------------------------------------------------------------
        if S.setting_indent then
            result := bitwise_not S.indent
        else
            result := S.indent
        S.setting_indent := true


    procedure CloseParen (S : scanner; old_indent : integer) is
    // ------------------------------------------------------------------------
    //    Closing some parenthese: reset the setting_indent value
    // ------------------------------------------------------------------------
        if old_indent < 0 then
            S.setting_indent := true
            S.indent := bitwise_not old_indent
        else
            S.setting_indent := false
            S.indent := old_indent
