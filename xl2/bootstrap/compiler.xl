// *****************************************************************************
// compiler.xl                                                        XL project
// *****************************************************************************
//
// File description:
//
//     The main body of the XL compiler
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2003-2004,2015,2018-2020, Christophe de Dinechin <christophe@dinechin.org>
// (C) 2004, SÃ©bastien Brochet <sebbrochet@sourceforge.net>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

import SC = XL.SCANNER
import CS = XL.UI.CONSOLE
import PT = XL.PARSER.TREE
import PR = XL.PARSER
import IO = XL.TEXT_IO
import XT = XL.TRANSLATOR
import ASCII = XL.TEXT_IO.ENCODING.ASCII


procedure Main is
// ----------------------------------------------------------------------------
//   The main entry point
// ----------------------------------------------------------------------------
    I          : integer
    Max        : integer := size CS.arguments
    P          : PR.parser
    theProgram : PT.tree
    showParse  : boolean := false

    for I in 1..Max-1 loop
        name : text := CS.arguments[i]
        IO.WriteLn "// Processing argument ", name
        if name = "-tparse" then
            showParse := true
        else if name = "-tmatch" then
            XT.verbose := true
            PT.verbose := true
        else if name = "-bootstrap" then
            IO.WriteLn "// Generated by bootstrap compiler"
        else if name = "-g" then
            IO.WriteLn "// -g option: native compiler would generate debug info"
        else
            P := PR.NewParser(name)
            theProgram := PR.Parse(P)
            if showParse then
                Debug theProgram
            XT.Compile theProgram
