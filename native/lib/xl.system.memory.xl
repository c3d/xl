// *****************************************************************************
// xl.system.memory.xl                                                XL project
// *****************************************************************************
//
// File description:
//
//     Implementation of the memory management interface
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2018-2020, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

use CFG = XL.SYSTEM.CONFIGURATION

module XL.SYSTEM.MEMORY is
// ----------------------------------------------------------------------------
//   Interface for memory allocation and management
// ----------------------------------------------------------------------------

    byte_count Bits:bit_count as byte_count is
    // ------------------------------------------------------------------------
    //  Convert number of bits to number of bytes
    // ------------------------------------------------------------------------
        Bytes is ((Bits + (CFG.BITS_PER_BYTE - 1)) / CFG.BITS_PER_BYTE)
        result := (byte_count) Bytes


    bit_count  Bytes:byte_count as bit_count is
    // ------------------------------------------------------------------------
    //  Convert number of bytes to number of bits
    // ------------------------------------------------------------------------
        Bits is (Bytes / CFG.BITS_PER_BYTE)
        result := (bit_count) Bits


    BitSize   Value             as bit_size     is builtin BitSize
    BitAlign  Value             as bit_size     is builtin BitAlign
