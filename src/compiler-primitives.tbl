// *****************************************************************************
// compiler-primitives.tbl                                            XL project
// *****************************************************************************
//
// File description:
//
//    Description of all the LLVM operators we support from rewrite forms
//
//
//
//
//
//
//
//
// *****************************************************************************
// This software is licensed under the GNU General Public License v3+
// (C) 2018-2021, Christophe de Dinechin <christophe@dinechin.org>
// *****************************************************************************
// This file is part of XL
//
// XL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// XL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with XL, in a file named COPYING.
// If not, see <https://www.gnu.org/licenses/>.
// *****************************************************************************

#ifndef VA_EXTERNAL
#define VA_EXTERNAL EXTERNAL
#endif


// ============================================================================
//
//    Types
//
// ============================================================================

MTYPE(i8,        0, return jit.IntegerType(8))
MTYPE(i16,       0, return jit.IntegerType(16))
MTYPE(i32,       0, return jit.IntegerType(32))
MTYPE(i64,       0, return jit.IntegerType(64))

MTYPE(f16,       0, return jit.FloatType(16))
MTYPE(f32,       0, return jit.FloatType(32))
MTYPE(f64,       0, return jit.FloatType(64))




// ============================================================================
//
//   Special opcodes that perform XL-specific operations
//
// ============================================================================

SPECIAL(TreeKind, 1,
// ----------------------------------------------------------------------------
//   Return the kind for the input tree
// ----------------------------------------------------------------------------
        JIT::Value_p treeValue = Autobox(source, args[0], compiler.treePtrTy);
        JIT::Value_p ptr = code.StructGEP(treeValue, TAG_INDEX, "tagp");
        JIT::Value_p tag = code.Load(ptr, "tag");
        JIT::Value_p mask = code.IntegerConstant(code.Type(tag),Tree::KINDMASK);
        JIT::Value_p kind = code.And(tag, mask, "tagAndMask");
        kind = code.BitCast(kind, compiler.naturalTy);
        return kind;
    )


SPECIAL(TreeLeft, 1,
// ----------------------------------------------------------------------------
//   Return the left for an infix, prefix, or postfix trees
// ----------------------------------------------------------------------------
        JIT::Value_p treeValue = Autobox(source, args[0], compiler.treePtrTy);
        JIT::Value_p prefixValue = code.BitCast(treeValue,
                                                compiler.prefixTreePtrTy);
        JIT::Value_p ptr = code.StructGEP(prefixValue,
                                          LEFT_VALUE_INDEX, "leftp");
        JIT::Value_p result = code.Load(ptr, "left");
        return result;
    )


SPECIAL(TreeRight, 1,
// ----------------------------------------------------------------------------
//   Return the right for the infix, prefix or postfix trees
// ----------------------------------------------------------------------------
        JIT::Value_p treeValue = Autobox(source, args[0], compiler.treePtrTy);
        JIT::Value_p prefixValue = code.BitCast(treeValue,
                                                compiler.prefixTreePtrTy);
        JIT::Value_p ptr = code.StructGEP(prefixValue,
                                          RIGHT_VALUE_INDEX, "rightp");
        JIT::Value_p result = code.Load(ptr, "right");
        return result;
    )


SPECIAL(InfixName, 1,
// ----------------------------------------------------------------------------
//   Return the name for an infix tree
// ----------------------------------------------------------------------------
        JIT::Value_p treeValue = Autobox(source, args[0], compiler.treePtrTy);
        JIT::Value_p infixValue = code.BitCast(treeValue,
                                               compiler.infixTreePtrTy);
        JIT::Value_p result = code.Call(unit.xl_infix_name, infixValue);
        return result;
    )


SPECIAL(TextOpening, 1,
// ----------------------------------------------------------------------------
//   Return the text opening for a text tree
// ----------------------------------------------------------------------------
        JIT::Value_p treeValue = Autobox(source, args[0], compiler.treePtrTy);
        JIT::Value_p textValue = code.BitCast(treeValue,
                                              compiler.textTreePtrTy);
        JIT::Value_p ptr = code.StructGEP(textValue,
                                          TEXT_OPENING_INDEX, "openingp");
        JIT::Value_p result = code.Load(ptr, "opening");
        return result;
    )


SPECIAL(TextClosing, 1,
// ----------------------------------------------------------------------------
//   Return the text closing for a text tree
// ----------------------------------------------------------------------------
        JIT::Value_p treeValue = Autobox(source, args[0], compiler.treePtrTy);
        JIT::Value_p textValue = code.BitCast(treeValue,
                                              compiler.textTreePtrTy);
        JIT::Value_p ptr = code.StructGEP(textValue,
                                          TEXT_CLOSING_INDEX, "closingp");
        JIT::Value_p result = code.Load(ptr, "closing");
        return result;
    )


SPECIAL(BlockChild, 1,
// ----------------------------------------------------------------------------
//   Return the child for a block tree
// ----------------------------------------------------------------------------
        JIT::Value_p treeValue = Autobox(source,
                                         args[0],
                                         compiler.textTreePtrTy);
        JIT::Value_p blockValue = code.BitCast(treeValue,
                                               compiler.blockTreePtrTy);
        JIT::Value_p ptr = code.StructGEP(blockValue,
                                          BLOCK_CHILD_INDEX, "childp");
        JIT::Value_p result = code.Load(ptr, "child");
        return result;
    )


SPECIAL(BlockOpening, 1,
// ----------------------------------------------------------------------------
//   Return the opening text for a block tree
// ----------------------------------------------------------------------------
        JIT::Value_p treeValue = Autobox(source,
                                         args[0],
                                         compiler.textTreePtrTy);
        JIT::Value_p blockValue = code.BitCast(treeValue,
                                               compiler.blockTreePtrTy);
        JIT::Value_p ptr = code.StructGEP(blockValue,
                                          BLOCK_OPENING_INDEX, "bopenp");
        JIT::Value_p result = code.Load(ptr, "bopen");
        return result;
    )


SPECIAL(BlockClosing, 1,
// ----------------------------------------------------------------------------
//   Return the closing text for a block tree
// ----------------------------------------------------------------------------
        JIT::Value_p treeValue = Autobox(source,
                                         args[0],
                                         compiler.textTreePtrTy);
        JIT::Value_p blockValue = code.BitCast(treeValue,
                                               compiler.blockTreePtrTy);
        JIT::Value_p ptr = code.StructGEP(blockValue,
                                          BLOCK_CLOSING_INDEX, "bclosep");
        JIT::Value_p result = code.Load(ptr, "bclose");
        return result;
    )



// ============================================================================
//
//   External declarations used by generated code
//
// ============================================================================

//       Name                   Return          Arguments
EXTERNAL(strcmp,                naturalTy,      charPtrTy, charPtrTy)
EXTERNAL(xl_evaluate,           treePtrTy,      scopePtrTy, treePtrTy)
EXTERNAL(xl_same_shape,         booleanTy,      treePtrTy, treePtrTy)
EXTERNAL(xl_same_text,          booleanTy,      treePtrTy, charPtrTy)
EXTERNAL(xl_infix_match_check,  treePtrTy,      scopePtrTy, treePtrTy, charPtrTy)
EXTERNAL(xl_typecheck,          treePtrTy,      scopePtrTy, treePtrTy, treePtrTy)
EXTERNAL(xl_form_error,         treePtrTy,      scopePtrTy, treePtrTy)
EXTERNAL(xl_stack_overflow,     treePtrTy,      treePtrTy)
EXTERNAL(xl_new_natural,        naturalTreePtrTy, ulongTy, ulonglongTy)
EXTERNAL(xl_new_real,           realTreePtrTy,  ulongTy, realTy)
EXTERNAL(xl_new_character,      textTreePtrTy,  ulongTy, characterTy)
EXTERNAL(xl_new_text,           textTreePtrTy,  ulongTy, textTy)
EXTERNAL(xl_new_text_ptr,       textTreePtrTy,  ulongTy, textPtrTy)
EXTERNAL(xl_new_ctext,          textTreePtrTy,  ulongTy, charPtrTy)
EXTERNAL(xl_new_xtext,          textTreePtrTy,  charPtrTy, naturalTy, charPtrTy, charPtrTy)
EXTERNAL(xl_new_block,          blockTreePtrTy, blockTreePtrTy,treePtrTy)
EXTERNAL(xl_new_prefix,         prefixTreePtrTy, prefixTreePtrTy, treePtrTy, treePtrTy)
EXTERNAL(xl_new_postfix,        postfixTreePtrTy, postfixTreePtrTy, treePtrTy, treePtrTy)
EXTERNAL(xl_new_infix,          infixTreePtrTy, infixTreePtrTy,treePtrTy,treePtrTy)
EXTERNAL(xl_fill_block,         blockTreePtrTy, blockTreePtrTy,treePtrTy)
EXTERNAL(xl_fill_prefix,        prefixTreePtrTy, prefixTreePtrTy, treePtrTy, treePtrTy)
EXTERNAL(xl_fill_postfix,       postfixTreePtrTy, postfixTreePtrTy, treePtrTy, treePtrTy)
EXTERNAL(xl_fill_infix,         infixTreePtrTy, infixTreePtrTy,treePtrTy,treePtrTy)
EXTERNAL(xl_natural2real,       treePtrTy,      treePtrTy)
EXTERNAL(xl_array_index,        treePtrTy,      scopePtrTy, treePtrTy, treePtrTy)
VA_EXTERNAL(xl_new_closure,     treePtrTy,      evalFnTy, treePtrTy, unsignedTy)
EXTERNAL(xl_closure_code,       evalFnTy,       treePtrTy)
EXTERNAL(xl_infix_name,         charPtrTy,      infixTreePtrTy)



// ============================================================================
//
//   Some opcodes that are simple enough (and multi-typed)
//
// ============================================================================
//   If you have a runtime function for these, you would need one per int type

SPECIAL(IAbs, 1,
// ----------------------------------------------------------------------------
//   Return the absolute value for an natural input
// ----------------------------------------------------------------------------
        JIT::Value_p value = args[0];
        JIT::Type_p type = code.Type(value);
        JIT::Value_p zero = code.IntegerConstant(type, 0);
        JIT::Value_p cmp = code.ICmpSLT(value, zero);
        JIT::Value_p neg = code.Neg(value);
        JIT::Value_p result = code.Select(cmp, neg, value);
        return result;
    )

SPECIAL(FAbs, 1,
// ----------------------------------------------------------------------------
//   Return the absolute value for a floating-point input
// ----------------------------------------------------------------------------
        JIT::Value_p value = args[0];
        JIT::Type_p type = code.Type(value);
        JIT::Value_p zero = code.FloatConstant(type, 0.0);
        JIT::Value_p cmp = code.FCmpOLT(value, zero);
        JIT::Value_p neg = code.FNeg(value);
        JIT::Value_p result = code.Select(cmp, neg, value);
        return result;
    )


SPECIAL(SMod, 2,
// ----------------------------------------------------------------------------
//   Compute a mathematical 'mod' from the 'SRem' operator
// ----------------------------------------------------------------------------
//   See equivalent code in interpreter's xl_mod support function

        JIT::Value_p left = args[0];
        JIT::Value_p right = args[1];
        JIT::Value_p rem = code.SRem(left, right);
        JIT::Value_p xored = code.Xor(left, right);
        JIT::Value_p zero = code.IntegerConstant(code.Type(xored), 0);
        JIT::Value_p cmp1 = code.ICmpSLT(xored, zero);
        JIT::Value_p cmp2 = code.ICmpNE(rem, zero);
        JIT::Value_p cmp = code.And(cmp1, cmp2);
        JIT::Value_p mod = code.Add(rem, right);
        JIT::Value_p result = code.Select(cmp, mod, rem);
        return result;
    )



// ============================================================================
//
//   Some aliases for binary opcodes
//
// ============================================================================

ALIAS(BCmpEQ, 2, ICmpEQ)
ALIAS(BCmpNE, 2, ICmpNE)
ALIAS(BCmpGT, 2, ICmpUGT)
ALIAS(BCmpGE, 2, ICmpUGE)
ALIAS(BCmpLT, 2, ICmpULT)
ALIAS(BCmpLE, 2, ICmpULE)

ALIAS(BAnd,   2, And)
ALIAS(BOr,    2, Or)
ALIAS(BXor,   2, Xor)
ALIAS(BNot,   1, Not)


// ============================================================================
//
//   Standard LLVM opcodes (must be at end, undefines UNARY, BINARY and CAST)
//
// ============================================================================

#include "llvm-crap.tbl"

#undef VA_EXTERNAL
#undef EXTERNAL
#undef SPECIAL
#undef ALIAS
#undef MTYPE
