#!/bin/bash
# *****************************************************************************
# trailing_opcode.xl                                                 XL project
# *****************************************************************************
#
# File description:
#
#    Script for testing the compiler
#
#    This file runs through every possible test. It looks for all files
#    ending in .xl below the current directory, and executes them.
#
#
#
# *****************************************************************************
# This software is licensed under the GNU General Public License v3
# (C) 2010,2019, Christophe de Dinechin <christophe@dinechin.org>
# *****************************************************************************
# This file is part of XL
#
# XL is free software: you can r redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# XL is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with XL, in a file named COPYING.
# If not, see <https://www.gnu.org/licenses/>.
# *****************************************************************************

# Environment
OS=$(uname)
TESTDIR="$(pwd)"
SUBDIRS="[0-9]*"
XL=./xl
LIBPATH=..
SRC="../src"
PASS="pass"
ONE_FAILED=
PATTERN='[A-Za-z0-9]*'
UPDATE=
BASELINE=
NOCACHE=
INSTALLED=
RUNTIME=default
[ -z "$TARGET" ] && TARGET=debug
EXCLUDES=nothing-please
POSITIVE_SUCCESS=0
NEGATIVE_SUCCESS=0
POSITIVE_MISMATCHES=0
NEGATIVE_MISMATCHES=0
EXPECTED_FAILURES=0
UNEXPECTED_SUCCESSES=0
UNEXPECTED_FAILURES=0
MISSING_PATTERN=0
MISSING_REFERENCE=0
EXCLUDED=0
TOTAL_TESTS=0

while [ $# -gt 0 ]
do
    case $1 in
        -xl)                    XL="$2"                 ; shift;;
        -lib)                   LIBPATH="$2"            ; shift;;
        -r|-runtime)            RUNTIME="$2"            ; shift;;
        -i|-interactive)        RUNTIME="O0"            ;;
        -I|-installed)          XL="xl"; INSTALLED=1    ;;
        -O0|-O1|-O2|-O3)        RUNTIME="${1/-/}"       ;
                                SUBDIRS="$RUNTIME"      ;;
        -d|-dir)                SUBDIRS="$2"            ; shift;;
        -b|-baseline)           BASELINE="*"            ;;
        -u|-update)             UPDATE='*'"$2"'*'       ; shift;;
        -x|-exclude)            EXCLUDES="$2"           ; shift;;
        *)                      PATTERN='*'"$1"'*'      ;;
    esac
    shift
done

# If we update the baseline, then select all patterns
if [ ! -z "$UPDATE" ];   then  PATTERN="$UPDATE"; fi
if [ ! -z "$BASELINE" ]; then  PATTERN="*"; fi


# Make sure we have the correct support files in this directory
for F in xl.syntax              \
         C.syntax               \
         builtins.xl            \
         xl.stylesheet          \
         html.stylesheet        \
         debug.stylesheet       \
         dbghtml.stylesheet
do
    if [ -z "$INSTALLED" ]; then
        ln -sf ../src/$F .
    else
        rm -f $F
    fi
done
ln -sf ../xl .

SUCCESS="$TESTDIR/success-"$RUNTIME".out"
FAILURE="$TESTDIR/failure-"$RUNTIME".out"
EXPECTED="$TESTDIR/expected-"$RUNTIME".out"
BASEFILE="$TESTDIR/baseline-"$RUNTIME".txt"

export TESTDIR XL SUCCESS FAILURE PASS UPDATE BASELINE

# Make sure the proper files are linked in place
# MinGW's unable to follow symlinks, so we have to copy dependencies
LN="ln -sf"
if (echo "$OS" | grep -iq "mingw"); then LN="cp"; fi
$LN $SRC/*.stylesheet .
$LN $SRC/xl.syntax .
$LN $SRC/builtins.xl .
$LN $SRC/opt-builtins.xl .
export LD_LIBRARY_PATH=$LIBPATH
export DYLD_LIBRARY_PATH=$LIBPATH

# Cleanup the test results
echo Tests successfully run on $(date) on $HOSTNAME > "$SUCCESS"
echo Failed tests on $(date) on $HOSTNAME > "$FAILURE"
echo Expected test failures on $(date) on $HOSTNAME > "$EXPECTED"

# Clear the baseline if we are updating it
if [ ! -z "$BASELINE" ]; then
    rm -f "$BASEFILE"
    touch "$BASEFILE"
fi

# Look for all possible tests in the test directory
SAVEIFS=$IFS
IFS=$(echo -en "\n\b")
for SUBDIR in $(find "$TESTDIR" -type d -a -name "$SUBDIRS")
do
for TEST in $(find "$SUBDIR" -name "$PATTERN".xl -print)
do
    TESTNAME=${TEST/$TESTDIR\/}

    # Setup useful variables - These can be set in the test files
    BASE=${TESTNAME/\.xl}                           # Basename
    DIR="$(dirname $TEST)"                          # Directory
    REF=$BASE.ref                                   # Reference file
    REFR=$BASE-$RUNTIME.ref                         # Reference file
    LOG=$BASE.log                                   # Log file
    CMD=                                            # Command to execute
    EXIT=0                                          # Expected exit code
    FILTER=                                         # Filter output
    RUN=                                            # What to run afterwards
    OPT=                                            # XL compiler options
    RT_OPT=                                         # XL options for runtime
    #INC="-I $DIR -I $TESTDIR/library"              # XL include directory
    EXCLUDE=                                        # Runtimes/tests to exclude
    CACHED=
    OUTLINE=

    # Extract interesting variables from the test
    eval $(./alltests.awk $TESTNAME)

    echo -n Test: $TESTNAME
    if [ ! -z "$OUTLINE" ]; then
        echo -n " ($OUTLINE)"
    fi
    echo -n "..."

    # Defaults if not set by the test
    eval $(grep TO_REMOVE alltests_$RUNTIME)
    [ -z "$RT_OPT" ] && { eval $(grep RT_OPT alltests_$RUNTIME); }
    [ -z "$EXCLUDE" ] && { EXCLUDE=do-not-exclude-anything; }
    if [ -z "$CMD" ]; then
        CMD="$XL $RT_OPT $OPT $TESTNAME";
        [ -z "$RUN" ] && { eval $(grep RUN alltests_$RUNTIME); }
    fi

    # Run the XL compiler on the test
    THIS_FAILED=
    TOTAL_TESTS=$(($TOTAL_TESTS+1))
    if (echo $RUNTIME | grep -q -e "$EXCLUDE" -e "$EXCLUDES") then
        CACHED="(Excluded runtime)"
        EXCLUDED=$(($EXCLUDED+1))
        RC=$EXIT
    elif (echo $TARGET | grep -q -e "$EXCLUDE" -e "$EXCLUDES") then
        CACHED="(Excluded target)"
        EXCLUDED=$(($EXCLUDED+1))
        RC=$EXIT
    elif (echo $BASE | grep -q -e "$EXCLUDE" -e "$EXCLUDES") then
        CACHED="(Excluded test)"
        EXCLUDED=$(($EXCLUDED+1))
        RC=$EXIT
    else
        bash -c "$CMD" > $LOG 2>&1
        RC=$?

        # Analyze the results
        if [ $RC -ne $EXIT ]; then

            # Check if we set the baseline
            THIS_FAILED="Exit code $RC, expected $EXIT"
            if [ $RC -eq 0 ]; then
                UNEXPECTED_SUCCESSES=$(($UNEXPECTED_SUCCESSES+1))
            else
                UNEXPECTED_FAILURES=$(($UNEXPECTED_FAILURES+1))
            fi
        elif [ ! -z "$REF" ]; then
            if [ ! -z "$FILTER" ]; then
                bash -c "$FILTER" < $LOG > $LOG.tmp && mv $LOG.tmp $LOG
            fi
            sed 's@'$TESTDIR'@TESTS@g' < $LOG > $LOG.tmp && mv $LOG.tmp $LOG
            sed 's@'library/runtime/$RUNTIME'@library/runtime/default@g' < $LOG > $LOG.tmp && mv $LOG.tmp $LOG
            sed 's@/usr/local/lib/xl/@@g' < $LOG > $LOG.tmp && mv $LOG.tmp $LOG
            if diff $REF $LOG > /dev/null 2>&1; then
                THIS=ok
            elif diff $REFR $LOG > /dev/null 2>&1; then
                THIS=ok
            elif [ ! -z "$UPDATE" ]; then
                echo -n "Updating reference... "
                if [ "$RUNTIME" == "default" ]; then
                    mv -f $REF $REF.old || true
                    cp $LOG $REF
                else
                    mv -f $REFR $REFR.old || true
                    cp $LOG $REFR
                fi
            elif [ -f $REFR -o -f $REF ]; then
                THIS_FAILED="Output mismatch"
                if [ $RC -eq 0 ]; then
                    POSITIVE_MISMATCHES=$(($POSITIVE_MISMATCHES+1))
                else
                    NEGATIVE_MISMATCHES=$(($NEGATIVE_MISMATCHES+1))
                fi
                if [ -f $REFR ]; then
                    diff $REFR $LOG > $LOG.diff
                else
                    diff $REF $LOG > $LOG.diff
                fi
                mv $LOG $LOG.output
                mv $LOG.diff $LOG
                rm -f $BASE$EXT
            else
                THIS_FAILED="Missing reference"
                MISSING_REFERENCE=$(($MISSING_REFERENCE+1))
            fi
        elif [ ! -z "$GREP" ]; then
            if $GREP $LOG; then
                THIS=ok
            else
                THIS_FAILED="No pattern match"
                MISSING_PATTERN=$(($MISSING_PATTERN+1))
            fi
        fi
    fi

    if [ -z "$THIS_FAILED" ]; then
        echo $TEST >> $SUCCESS
        if [ "$RC" -ne "0" ] ; then
            echo Success - negative test $CACHED;
            NEGATIVE_SUCCESS=$((NEGATIVE_SUCCESS+1))
        else
            echo Success $CACHED;
            POSITIVE_SUCCESS=$((POSITIVE_SUCCESS+1))
        fi
        rm -f $LOG
    else

        if [ ! -z "$BASELINE" ]; then
            echo $TESTNAME >> $BASEFILE
            EXPECTED_FAILURES=$(($EXPECTED_FAILURES+1))
            echo 'Updated failure ('$THIS_FAILED')'
            echo "*** FAILED (BASELINE):" $TESTNAME: >> $FAILURE
        elif grep -q "$TESTNAME" $BASEFILE; then
            echo "--------------------------------------------------------------------------------" >> $EXPECTED
            echo "|   FAILED:" $TESTNAME: >> $EXPECTED
            echo "|   REASON:" $THIS_FAILED >> $EXPECTED
            echo "--------------------------------------------------------------------------------" >> $EXPECTED
            cat $LOG >> $EXPECTED
            echo "" >> $EXPECTED

            EXPECTED_FAILURES=$(($EXPECTED_FAILURES+1))
            echo 'Expected failure ('$THIS_FAILED')'
            echo "* FAILED (EXPECTED):" $TESTNAME: >> $FAILURE
        else
            echo "********************************************************************************" >> $FAILURE
            echo "**  FAILED:" $TESTNAME     >> $FAILURE
            if [ ! -z "$OUTLINE" ]; then
                echo "**  CHECKS:" $OUTLINE      >> $FAILURE
            fi
            echo "**  REASON:" $THIS_FAILED  >> $FAILURE
            echo "********************************************************************************" >> $FAILURE
            cat $LOG >> $FAILURE
            echo "" >> $FAILURE

            echo '*** FAILURE ('$THIS_FAILED') ***'
            if [ -z "$THIS_KNOWN_FAILURE" ]; then
                ONE_FAILED=1
            fi
        fi

    fi
    rm -f $TO_REMOVE
done
done


IFS=$SAVEIFS
if [ "$ONE_FAILED" ]; then
    cat $FAILURE
    echo "*** SUMMARY OF" $TOTAL_TESTS "TESTS: FAILURE ***"
    echo "  Positive success           : " $POSITIVE_SUCCESS
    echo "  Negative success           : " $NEGATIVE_SUCCESS
    echo "  Expected test failures     : " $EXPECTED_FAILURES
    echo "  Invalid error exit         : " $UNEXPECTED_FAILURES
    echo "  Invalid successful exit    : " $UNEXPECTED_SUCCESSES
    echo "  Positive mismatches        : " $POSITIVE_MISMATCHES
    echo "  Negative mismatches        : " $NEGATIVE_MISMATCHES
    echo "  Missing references         : " $MISSING_REFERENCE
    echo "  Missing patterns           : " $MISSING_PATTERN
    echo "  Excluded from run          : " $EXCLUDED
    exit 1
else
    echo "*** SUMMARY OF" $TOTAL_TESTS "TESTS: SUCCESS ***"
    echo "  Positive success           : " $POSITIVE_SUCCESS
    echo "  Negative success           : " $NEGATIVE_SUCCESS
    echo "  Expected test failures     : " $EXPECTED_FAILURES
    echo "  Excluded from run          : " $EXCLUDED
fi
